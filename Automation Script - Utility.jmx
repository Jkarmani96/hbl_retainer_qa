<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Utility Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DBHost" elementType="Argument">
            <stringProp name="Argument.name">DBHost</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DBPort" elementType="Argument">
            <stringProp name="Argument.name">DBPort</stringProp>
            <stringProp name="Argument.value">27017</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mongoUser" elementType="Argument">
            <stringProp name="Argument.name">mongoUser</stringProp>
            <stringProp name="Argument.value">paymentcoreuser</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userName" elementType="Argument">
            <stringProp name="Argument.name">userName</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">p@ssWord</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="databaseName" elementType="Argument">
            <stringProp name="Argument.name">databaseName</stringProp>
            <stringProp name="Argument.value">paymentCore</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Batches" elementType="Argument">
            <stringProp name="Argument.name">Batches</stringProp>
            <stringProp name="Argument.value">batches</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CbsRequestQueues" elementType="Argument">
            <stringProp name="Argument.name">CbsRequestQueues</stringProp>
            <stringProp name="Argument.value">cbsrequestqueues</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CbsResponseQueues" elementType="Argument">
            <stringProp name="Argument.name">CbsResponseQueues</stringProp>
            <stringProp name="Argument.value">cbsresponsequeues</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IsoInboundTransactions" elementType="Argument">
            <stringProp name="Argument.name">IsoInboundTransactions</stringProp>
            <stringProp name="Argument.value">isoinboundtransactions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IsoMessages" elementType="Argument">
            <stringProp name="Argument.name">IsoMessages</stringProp>
            <stringProp name="Argument.value">isomessages</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Instructions" elementType="Argument">
            <stringProp name="Argument.name">Instructions</stringProp>
            <stringProp name="Argument.value">instructions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="InboundInstructions" elementType="Argument">
            <stringProp name="Argument.name">InboundInstructions</stringProp>
            <stringProp name="Argument.value">inboundinstructions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="InstructionQueues" elementType="Argument">
            <stringProp name="Argument.name">InstructionQueues</stringProp>
            <stringProp name="Argument.value">instructionqueues</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OutboundTransactions" elementType="Argument">
            <stringProp name="Argument.name">OutboundTransactions</stringProp>
            <stringProp name="Argument.value">outboundtransactions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OutboundTransactionDetails" elementType="Argument">
            <stringProp name="Argument.name">OutboundTransactionDetails</stringProp>
            <stringProp name="Argument.value">outboundtransactiondetails</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LftRequestQueues" elementType="Argument">
            <stringProp name="Argument.name">LftRequestQueues</stringProp>
            <stringProp name="Argument.value">lftrequestqueues</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LftResponseQueues" elementType="Argument">
            <stringProp name="Argument.name">LftResponseQueues</stringProp>
            <stringProp name="Argument.value">lftresponsequeues</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P2PIsoMessages" elementType="Argument">
            <stringProp name="Argument.name">P2PIsoMessages</stringProp>
            <stringProp name="Argument.value">p2pisomessages</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P2PHostResponselogs" elementType="Argument">
            <stringProp name="Argument.name">P2PHostResponselogs</stringProp>
            <stringProp name="Argument.value">p2phostresponselogs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P2POutboundTransactions" elementType="Argument">
            <stringProp name="Argument.name">P2POutboundTransactions</stringProp>
            <stringProp name="Argument.value">p2poutboundtransactions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="paymentcorePort" elementType="Argument">
            <stringProp name="Argument.name">paymentcorePort</stringProp>
            <stringProp name="Argument.value">3001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hblmpgPort" elementType="Argument">
            <stringProp name="Argument.name">hblmpgPort</stringProp>
            <stringProp name="Argument.value">31000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TitleInstructions" elementType="Argument">
            <stringProp name="Argument.name">TitleInstructions</stringProp>
            <stringProp name="Argument.value">titleinstructions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TitleQueues" elementType="Argument">
            <stringProp name="Argument.name">TitleQueues</stringProp>
            <stringProp name="Argument.value">titlequeues</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P2MIsoMessages" elementType="Argument">
            <stringProp name="Argument.name">P2MIsoMessages</stringProp>
            <stringProp name="Argument.value">p2misomessages</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P2MHostResponselogs" elementType="Argument">
            <stringProp name="Argument.name">P2MHostResponselogs</stringProp>
            <stringProp name="Argument.value">p2mhostresponselogs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P2MOutboundTransactions" elementType="Argument">
            <stringProp name="Argument.name">P2MOutboundTransactions</stringProp>
            <stringProp name="Argument.value">p2moutboundtransactions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verification Payment Core" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DBHost}</stringProp>
          <stringProp name="HTTPSampler.port">${paymentcorePort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2056026501">{&quot;message&quot;:&quot;Hello World from Payment Core App!!&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verification HBL MPG" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${DBHost}</stringProp>
          <stringProp name="HTTPSampler.port">${hblmpgPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/inbound</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1532472322">{&quot;message&quot;:&quot;Hello World from API gateway inbound!!&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
//vars.putObject(&quot;Instructions&quot;, Instructions);
props.put(&quot;Instructions&quot;, Instructions);

//Connection to &apos;inboundinstructions&apos;
MongoCollection&lt;Document&gt; InboundInstructions = database.getCollection(vars.get(&quot;InboundInstructions&quot;));
vars.putObject(&quot;InboundInstructions&quot;, InboundInstructions);

//Connection to &apos;instructionqueues&apos;
MongoCollection&lt;Document&gt; InstructionQueues = database.getCollection(vars.get(&quot;InstructionQueues&quot;));
vars.putObject(&quot;InstructionQueues&quot;, InstructionQueues);

//Connection to &apos;batches&apos;
MongoCollection&lt;Document&gt; Batches = database.getCollection(vars.get(&quot;Batches&quot;));
vars.putObject(&quot;Batches&quot;, Batches);

//Connection to &apos;cbsrequestqueues&apos;
MongoCollection&lt;Document&gt; CbsRequestQueues = database.getCollection(vars.get(&quot;CbsRequestQueues&quot;));
vars.putObject(&quot;CbsRequestQueues&quot;, CbsRequestQueues);

//Connection to &apos;cbsresponsequeues&apos;
MongoCollection&lt;Document&gt; CbsResponseQueues = database.getCollection(vars.get(&quot;CbsResponseQueues&quot;));
vars.putObject(&quot;CbsResponseQueues&quot;, CbsResponseQueues);

//Connection to &apos;isoinboundtransactions&apos;
MongoCollection&lt;Document&gt; IsoInboundTransactions = database.getCollection(vars.get(&quot;IsoInboundTransactions&quot;));
vars.putObject(&quot;IsoInboundTransactions&quot;, IsoInboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);


//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to database&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
//${__setProperty(Instructions, ${Instructions})};
//vars.putObject(&quot;Instructions&quot;, Instructions);
props.put(&quot;Instructions&quot;, Instructions);

////Connection to &apos;inboundinstructions&apos;
//MongoCollection&lt;Document&gt; InboundInstructions = database.getCollection(vars.get(&quot;InboundInstructions&quot;));
//${__setProperty(&quot;InboundInstructions&quot;, InboundInstructions);
////vars.putObject(&quot;InboundInstructions&quot;, InboundInstructions);
//
////Connection to &apos;instructionqueues&apos;
//MongoCollection&lt;Document&gt; InstructionQueues = database.getCollection(vars.get(&quot;InstructionQueues&quot;));
//${__setProperty(&quot;InstructionQueues&quot;, InstructionQueues);
////vars.putObject(&quot;InstructionQueues&quot;, InstructionQueues);

////Connection to &apos;batches&apos;
//MongoCollection&lt;Document&gt; Batches = database.getCollection(vars.get(&quot;Batches&quot;));
//${__setProperty(storeid, ${storeid})};
//vars.putObject(&quot;Batches&quot;, Batches);
//
////Connection to &apos;cbsrequestqueues&apos;
//MongoCollection&lt;Document&gt; CbsRequestQueues = database.getCollection(vars.get(&quot;CbsRequestQueues&quot;));
//${__setProperty(storeid, ${storeid})};
//vars.putObject(&quot;CbsRequestQueues&quot;, CbsRequestQueues);
//
////Connection to &apos;cbsresponsequeues&apos;
//MongoCollection&lt;Document&gt; CbsResponseQueues = database.getCollection(vars.get(&quot;CbsResponseQueues&quot;));
//${__setProperty(storeid, ${storeid})};
//vars.putObject(&quot;CbsResponseQueues&quot;, CbsResponseQueues);
//
////Connection to &apos;isoinboundtransactions&apos;
//MongoCollection&lt;Document&gt; IsoInboundTransactions = database.getCollection(vars.get(&quot;IsoInboundTransactions&quot;));
//${__setProperty(storeid, ${storeid})};
//vars.putObject(&quot;IsoInboundTransactions&quot;, IsoInboundTransactions);
//
////Connection to &apos;isomessages&apos;
//MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
//${__setProperty(storeid, ${storeid})};
//vars.putObject(&quot;IsoMessages&quot;, IsoMessages);


//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to database&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">${__property(valueToPass,${Instructions})}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Inward - Success" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="true">
          <stringProp name="variableName">batchID1</stringProp>
          <stringProp name="outputFormat">C1HABBPKKA2310200000A0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereferene" enabled="true">
          <stringProp name="variableName">traceref1</stringProp>
          <stringProp name="outputFormat">HABBPKKA2310200000B0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Sequential Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;inboundinstructions&apos;
MongoCollection&lt;Document&gt; InboundInstructions = database.getCollection(vars.get(&quot;InboundInstructions&quot;));
vars.putObject(&quot;InboundInstructions&quot;, InboundInstructions);

//Connection to &apos;instructionqueues&apos;
MongoCollection&lt;Document&gt; InstructionQueues = database.getCollection(vars.get(&quot;InstructionQueues&quot;));
vars.putObject(&quot;InstructionQueues&quot;, InstructionQueues);

//Connection to &apos;batches&apos;
MongoCollection&lt;Document&gt; Batches = database.getCollection(vars.get(&quot;Batches&quot;));
vars.putObject(&quot;Batches&quot;, Batches);

//Connection to &apos;cbsrequestqueues&apos;
MongoCollection&lt;Document&gt; CbsRequestQueues = database.getCollection(vars.get(&quot;CbsRequestQueues&quot;));
vars.putObject(&quot;CbsRequestQueues&quot;, CbsRequestQueues);

//Connection to &apos;cbsresponsequeues&apos;
MongoCollection&lt;Document&gt; CbsResponseQueues = database.getCollection(vars.get(&quot;CbsResponseQueues&quot;));
vars.putObject(&quot;CbsResponseQueues&quot;, CbsResponseQueues);

//Connection to &apos;isoinboundtransactions&apos;
MongoCollection&lt;Document&gt; IsoInboundTransactions = database.getCollection(vars.get(&quot;IsoInboundTransactions&quot;));
vars.putObject(&quot;IsoInboundTransactions&quot;, IsoInboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);


//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to database&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pre-Validation Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID1}&quot;,&#xd;
    &quot;batchInitiator&quot;: &quot;CDCPKKAA&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-01-25T09:04:58.495Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-1&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 1&quot;&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-2&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 2&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instruction/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


Document document = Instructions.find(eq(&quot;type&quot;,&quot;validate&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;request&quot;).get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id
instrID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;instrID&quot;, instrID);

//Loop for all the instructions in a batch 
// Start //

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		String instr = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, finalList);

Thread. sleep(1000)
return batch_id+mode+status+stage+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-523813281">Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="inboundinstructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; InboundInstructions = vars.getObject(&quot;InboundInstructions&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
def instrID = vars.getObject(&quot;instrID&quot;);

Document document = InboundInstructions.find(eq(&quot;instructionId&quot;,instrID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
instr_id = &quot;InstructionID is: &quot;+document.get(&quot;request&quot;).get(&quot;instructionId&quot;).toString()+&quot;\n&quot;;

//Get the object id
inbinstrID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;inbinstrID&quot;, inbinstrID);

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = InboundInstructions.find(and(eq(&quot;instructionId&quot;,instrID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		objid = document1.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;inbound_ids&quot;, instlist);
//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+instr_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructionqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; InstructionQueues = vars.getObject(&quot;InstructionQueues&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
def inbinstrID = vars.getObject(&quot;inbinstrID&quot;);

Document document = InstructionQueues.find(eq(&quot;instructionId&quot;,inbinstrID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;inbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		Document document1 = InstructionQueues.find(eq(&quot;instructionId&quot;,new ObjectId(instlist[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);

// Getting the object id from &apos;instructions&apos;
def instrID = vars.getObject(&quot;instrID&quot;);

Document document = Instructions.find(eq(&quot;type&quot;,&quot;validate&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n\n&quot;;
mode = &quot;Type Validate - Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Type Validate - Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Type Validate - Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

Document document1 = Instructions.find(and(eq(&quot;refInstructionId&quot;,instrID),eq(&quot;type&quot;,&quot;status&quot;))).last();
mode1 = &quot;Type Status - Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Type Status - Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n\n&quot;;

//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		stat_var = document1.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String instr = &quot;Status for Instruction &quot;+i+&quot; is: &quot; + stat_var;
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+mode+status+stage+mode1+status1+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-264035965">Type Validate - Mode is: inbound
Type Validate - Status is: Success
Type Validate - Stage is: Completed

Type Status - Mode is: outbound
Type Status - Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find().sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="57348383">State is: PRE-VALIDATION-REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref1}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AAAAVNVN&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKXIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;PACS008-NRTDC-001&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-05-13T18:47:04.101Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08\&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${batchID1}&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-05-27T10:58:50&lt;/CreDtTm&gt;&lt;NbOfTxs&gt;2&lt;/NbOfTxs&gt;&lt;TtlIntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;2&lt;/TtlIntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2020-06-03&lt;/IntrBkSttlmDt&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;I-NRTDC-0000001&lt;/InstrId&gt;&lt;EndToEndId&gt;NRTDC-ENDTOEND&lt;/EndToEndId&gt;&lt;TxId&gt;T-NRTDC-0000001&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CSDC&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;14.97&lt;/IntrBkSttlmAmt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;BankA&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 1&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;123456789&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AHRBPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;BankB&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 2&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;11617901130103&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/CdtrAcct&gt;&lt;/CdtTrfTxInf&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;I-NRTDC-0000002&lt;/InstrId&gt;&lt;EndToEndId&gt;NRTDC-ENDTOEND&lt;/EndToEndId&gt;&lt;TxId&gt;T-NRTDC-0000002&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CSDC&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;BankA&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 1&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;123456789&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AHRBPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;BankB&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 2&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;11617901130103&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/CdtrAcct&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID1}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1207205974">State is: IN-PROGRESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID1}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);




//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;).getAt(i).get(&quot;PmtId&quot;).get(&quot;InstrId&quot;).get(&quot;_text&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, onlyinstr);

return batch_id+type+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1965304567">Type is: pacs.008.001.08
Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isoinboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; IsoInboundTransactions = vars.getObject(&quot;IsoInboundTransactions&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoInboundTransactions.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
instr_id = &quot;InstructionID is: &quot;+document.get(&quot;transactionMetaData&quot;).get(&quot;instructionId&quot;).toString()+&quot;\n&quot;;
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = IsoInboundTransactions.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;transactionMetaData.instructionId&quot;,onlyinstr[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		objid = document1.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);
vars.putObject(&quot;isoinbound_ids&quot;, instlist);




Thread. sleep(1000)
return batch_id+instr_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; CbsRequestQueues = vars.getObject(&quot;CbsRequestQueues&quot;);


// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);


Document document = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
//status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		Document document1 = CbsRequestQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; CbsResponseQueues = vars.getObject(&quot;CbsResponseQueues&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = CbsResponseQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = CbsResponseQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID1}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n\n&quot;;
type= &quot;Pacs 008 - Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Pacs 008 - Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Pacs 008 - Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Pacs 008 - Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document1 = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;, &quot;status&quot;))).last();
type1= &quot;Type Status - Type is: &quot;+document1.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode1= &quot;Type Status - Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n\n&quot;;
//status1 = &quot;Type Status - Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;


//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document1.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		stat_var = document1.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String instr = &quot;Status for Instruction &quot;+i+&quot; is: &quot;+stat_var;
//		log.info(instr);
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+type+mode+status+stage+type1+mode1+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID1}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="370838764">State is: COMPLETED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Outward - BENE BANK ACK" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - Batch ID" enabled="true">
          <stringProp name="variableName">batchID4</stringProp>
          <stringProp name="outputFormat">C2TESTBANKLTD|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID1" enabled="true">
          <stringProp name="variableName">instructionID1</stringProp>
          <stringProp name="outputFormat">CDC28007|170003681</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID2" enabled="true">
          <stringProp name="variableName">instructionID2</stringProp>
          <stringProp name="outputFormat">CDC28007|170003671</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereference" enabled="true">
          <stringProp name="variableName">traceref</stringProp>
          <stringProp name="outputFormat">CRPL-TBank|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));


//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;outboundtransactions&apos;
MongoCollection&lt;Document&gt; OutboundTransactions = database.getCollection(vars.get(&quot;OutboundTransactions&quot;));
vars.putObject(&quot;OutboundTransactions&quot;, OutboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);

//Connection to &apos;lftrequestqueues&apos;
MongoCollection&lt;Document&gt; LftRequestQueues = database.getCollection(vars.get(&quot;LftRequestQueues&quot;));
vars.putObject(&quot;LftRequestQueues&quot;, LftRequestQueues);

//Connection to &apos;lftresponsequeues&apos;
MongoCollection&lt;Document&gt; LftResponseQueues = database.getCollection(vars.get(&quot;LftResponseQueues&quot;));
vars.putObject(&quot;LftResponseQueues&quot;, LftResponseQueues);

//Connection to &apos;outboundtransactiondetails&apos;
MongoCollection&lt;Document&gt; OutboundTransactionDetails = database.getCollection(vars.get(&quot;OutboundTransactionDetails&quot;));
vars.putObject(&quot;OutboundTransactionDetails&quot;, OutboundTransactionDetails);

//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Pre-Validation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &#xd;
    &quot;cdtrBank&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;${batchID4}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-03-21T00:00:00.000Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;100000&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK33ALFH0094001005366754&quot;,&#xd;
                &quot;name&quot;: &quot;ABC&quot;&#xd;
            }&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1000&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;NTN&quot;,&#xd;
                    &quot;value&quot;: &quot;8156166&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK33ALFH0094001005366754&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode1= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find().last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of outboundtransactions
outboundtransID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outboundtransID&quot;, outboundtransID);

//return status1+stage;
return mode1+status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1505622151">Mode is: outbound
Status is: Initiated
Stage is: VAL_ACCEPT
Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);

Document document = Instructions.find(and(eq(&quot;_id&quot;,outboundtransID),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1742696767">Mode is: outbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
                <stringProp name="470435717">Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status validation reply (VAL_REPLY)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchInitiator&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;CRPL-${batchID4}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;09-JUN-22&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
       &#xd;
    ]&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instructions/validate/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;status&quot;))).last();
//Document document = OutboundTransactions.find(eq(&quot;type&quot;,&quot;status&quot;)).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1875437325">Mode is: inbound
Status is: Success
Stage is: VAL_REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);


Document document = Instructions.find(and(eq(&quot;refInstructionId&quot;,outboundtransID),eq(&quot;type&quot;,&quot;status&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

// Loop Start // 

// Getting ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);

// Creating an Array List
ArrayList&lt;String&gt; instr_status = new ArrayList&lt;String&gt;();

int count = 0;
count = instr_array.size();
if (instr_array.isEmpty() != true)
{
	//count = instr_array.size();
	for(int i = 0; i &lt; count; i++)
	{
		stat_var=document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;)+ &quot; with Rejecton Reason: &quot;+ document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;rejectedReason&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		instr_status.add(stat);
		//log.info(docList.toString());
		}
}

else 
{
	stat_var = &quot;Processed&quot;;
	stat = &quot;Status of all Instructions is&quot; +stat_var;
	instr_status.add(stat);
	}

// LoopEnd //

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return mode+status+stage+instr_status;

}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="700869394">Mode is: inbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Payment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID4}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2021-07-13T00:00:00.000Z&quot;,&#xd;
    &quot;nbOfTxs&quot;: &quot;2&quot;,&#xd;
    &quot;amount&quot;: {&#xd;
        &quot;currency&quot;: &quot;PKR&quot;,&#xd;
        &quot;value&quot;: &quot;2.93&quot;&#xd;
    },&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.03&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4210154878570&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
                &quot;name&quot;: &quot;MOBINA SAEED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-17&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.9&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4220189247021&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK72HABB0005997900537503&quot;,&#xd;
                &quot;name&quot;: &quot;ZAFAR AHMED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-18&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/payment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">batchID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of type payment
paymentID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;paymentID&quot;, paymentID);


//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, onlyinstr);

return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="502516385">Mode is: outbound
Status is: Initiated
Stage is: PAY_ACCEPT</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);



return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		String objid = document.get(&quot;_id&quot;).toString();
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

vars.putObject(&quot;myArr&quot;, instlist);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document2 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage3 = &quot;Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find().last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return stage1+stage2+stage3;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1831599089">Stage is: CBS_PROCESSED</stringProp>
                <stringProp name="-778302848">Stage is: PAYMENT_IN_PROCESS</stringProp>
                <stringProp name="-323524245">Stage is: SBP_SUBMITTED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;))).last();
//Document document = IsoMessages.find(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T14:53:39Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;P12302256/102&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-06-03T17:53:39.520+03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;CRPL-${batchID4}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2020-05-19T14:20:47&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EP122&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Invalid value date&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID4}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1471912185">Stage is: SBP_ACK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;))).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status validation reply (BENE_BANK)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchInitiator&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;CRPL-${batchID4}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2021-07-13T10:22:28Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;reportedStatus&quot;: {&#xd;
                &quot;name&quot;: &quot;Processed&quot;,&#xd;
                &quot;modificationDateTime&quot;: &quot;2021-07-13T10:22:28Z&quot;&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;reportedStatus&quot;: {&#xd;
                &quot;name&quot;: &quot;Processed&quot;,&#xd;
                &quot;modificationDateTime&quot;: &quot;2021-07-13T10:22:28Z&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instructions/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">2SF-G2S</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">HABBPKPKSNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">adsadsadasd</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1215272746">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;success&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;status&quot;))).last();
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;



//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; reportedstatus = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{
		stat_var = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		reportedstatus.add(stat);
		log.info(reportedstatus.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return stage+reportedstatus;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1044933817">Stage is: BENE_BANK_ACK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Outward - pacs.002(Failure)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - Batch ID" enabled="true">
          <stringProp name="variableName">batchID</stringProp>
          <stringProp name="outputFormat">C3TESTBANKLTD|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID1" enabled="true">
          <stringProp name="variableName">instructionID1</stringProp>
          <stringProp name="outputFormat">CDC28007|170003681</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID2" enabled="true">
          <stringProp name="variableName">instructionID2</stringProp>
          <stringProp name="outputFormat">CDC28007|170003671</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereference" enabled="true">
          <stringProp name="variableName">traceref</stringProp>
          <stringProp name="outputFormat">CRPL-TBank|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));


//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;outboundtransactions&apos;
MongoCollection&lt;Document&gt; OutboundTransactions = database.getCollection(vars.get(&quot;OutboundTransactions&quot;));
vars.putObject(&quot;OutboundTransactions&quot;, OutboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);

//Connection to &apos;lftrequestqueues&apos;
MongoCollection&lt;Document&gt; LftRequestQueues = database.getCollection(vars.get(&quot;LftRequestQueues&quot;));
vars.putObject(&quot;LftRequestQueues&quot;, LftRequestQueues);

//Connection to &apos;lftresponsequeues&apos;
MongoCollection&lt;Document&gt; LftResponseQueues = database.getCollection(vars.get(&quot;LftResponseQueues&quot;));
vars.putObject(&quot;LftResponseQueues&quot;, LftResponseQueues);

//Connection to &apos;outboundtransactiondetails&apos;
MongoCollection&lt;Document&gt; OutboundTransactionDetails = database.getCollection(vars.get(&quot;OutboundTransactionDetails&quot;));
vars.putObject(&quot;OutboundTransactionDetails&quot;, OutboundTransactionDetails);

//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Pre-Validation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;cdtrBank&quot;: &quot;UNILPKKARTG&quot;,&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-03-21T00:00:00.000Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode1= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find().last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of outboundtransactions
outboundtransID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outboundtransID&quot;, outboundtransID);

//return status1+stage;
return mode1+status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1505622151">Mode is: outbound
Status is: Initiated
Stage is: VAL_ACCEPT
Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);

Document document = Instructions.find(and(eq(&quot;_id&quot;,outboundtransID),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1742696767">Mode is: outbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
                <stringProp name="470435717">Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status validation reply (VAL_REPLY)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchInitiator&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;CRPL-${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;09-JUN-22&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
   &#xd;
    ]&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instructions/validate/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;status&quot;))).last();
//Document document = OutboundTransactions.find(eq(&quot;type&quot;,&quot;status&quot;)).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1875437325">Mode is: inbound
Status is: Success
Stage is: VAL_REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);


Document document = Instructions.find(and(eq(&quot;refInstructionId&quot;,outboundtransID),eq(&quot;type&quot;,&quot;status&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

// Loop Start // 

// Getting ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);

// Creating an Array List
ArrayList&lt;String&gt; instr_status = new ArrayList&lt;String&gt;();

int count = 0;
count = instr_array.size();
if (instr_array.isEmpty() != true)
{
	//count = instr_array.size();
	for(int i = 0; i &lt; count; i++)
	{
		stat_var=document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;)+ &quot; with Rejecton Reason: &quot;+ document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;rejectedReason&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		instr_status.add(stat);
		//log.info(docList.toString());
		}
}

else 
{
	stat_var = &quot;Processed&quot;;
	stat = &quot;Status of all Instructions is&quot; + stat_var;
	instr_status.add(stat);
	}

// LoopEnd //

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


Thread. sleep(1000)
return mode+status+stage+instr_status;

}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="700869394">Mode is: inbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Payment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2021-07-13T00:00:00.000Z&quot;,&#xd;
    &quot;nbOfTxs&quot;: &quot;2&quot;,&#xd;
    &quot;amount&quot;: {&#xd;
        &quot;currency&quot;: &quot;PKR&quot;,&#xd;
        &quot;value&quot;: &quot;2.93&quot;&#xd;
    },&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.03&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4210154878570&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
                &quot;name&quot;: &quot;MOBINA SAEED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-17&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.9&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4220189247021&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK72HABB0005997900537503&quot;,&#xd;
                &quot;name&quot;: &quot;ZAFAR AHMED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-18&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/payment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">batchID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of type payment
paymentID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;paymentID&quot;, paymentID);


//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, onlyinstr);

return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="502516385">Mode is: outbound
Status is: Initiated
Stage is: PAY_ACCEPT</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+document.get(&quot;status&quot;).toString();
		String objid = document.get(&quot;_id&quot;).toString();
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;myArr&quot;, instlist);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document2 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage3 = &quot;Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find().last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return stage1+stage2+stage3;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1831599089">Stage is: CBS_PROCESSED</stringProp>
                <stringProp name="-778302848">Stage is: PAYMENT_IN_PROCESS</stringProp>
                <stringProp name="-323524245">Stage is: SBP_SUBMITTED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;))).last();
//Document document = IsoMessages.find(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - pacs.002 Failure" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T14:53:39Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;P12302256/102&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-06-03T17:53:39.520+03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;CRPL-${batchID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2020-05-19T14:20:47&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EP122&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Invalid value date&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - camt.025" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:F5xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;camt.025.001.05&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T14:06:21Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:camt.025.001.05\&quot;&gt;&lt;Rct&gt;&lt;MsgHdr&gt;&lt;MsgId&gt;1599729840119&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-06-03T17:00:18.738+03:00&lt;/CreDtTm&gt;&lt;/MsgHdr&gt;&lt;RctDtls&gt;&lt;OrgnlMsgId&gt;&lt;MsgId&gt;CRPL-${batchID}&lt;/MsgId&gt;&lt;MsgNmId&gt;camt.018.001.05/999&lt;/MsgNmId&gt;&lt;OrgtrNm&gt;ABPAPKKA&lt;/OrgtrNm&gt;&lt;/OrgnlMsgId&gt;&lt;ReqHdlg&gt;&lt;StsCd&gt;OK&lt;/StsCd&gt;&lt;/ReqHdlg&gt;&lt;/RctDtls&gt;&lt;/Rct&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;camt.025.001.05&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/camt</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - admi.002" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;admi.002.001.01&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T06:48:12Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:admi.002.001.01\&quot;&gt;&lt;admi.002.001.01&gt;&lt;RltdRef&gt;&lt;Ref&gt;CRPL-${batchID}&lt;/Ref&gt;&lt;/RltdRef&gt;&lt;Rsn&gt;&lt;RjctgPtyRsn&gt;EA1&lt;/RjctgPtyRsn&gt;&lt;RjctnDtTm&gt;2020-06-03T09:48:12.412&lt;/RjctnDtTm&gt;&lt;RsnDesc&gt;Text block has invalid format&lt;/RsnDesc&gt;&lt;AddtlData&gt;Invalid MX input:[38,17] cvc-complex-type.2.4.a: Invalid content was found starting with element &apos;AcctId&apos;. One of &apos;{&amp;quot;urn:swift:xsd:camt.009.001.06&amp;quot;:SchCrit}&apos; is expected.&lt;/AddtlData&gt;&lt;/Rsn&gt;&lt;/admi.002.001.01&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;admi.002.001.01&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/admi</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1738874451">Stage is: SBP_FAILED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;))).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1380616844">Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
//mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
//status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id
outID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outID&quot;, outID);

//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;returnArray&quot;, onlyinstr);


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1888389501">Stage is: RETURN_RECV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(10000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="628494353">Mode is: inbound
Status is: Failure
Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;returnArray&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var= document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End
//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1650924334">Mode is: inbound
Status is: Success
Stage is: CBS_REV_PROCESSED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Outward - camt.025(Failure)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - Batch ID" enabled="true">
          <stringProp name="variableName">batchID</stringProp>
          <stringProp name="outputFormat">C4TESTBANKLTD|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID1" enabled="true">
          <stringProp name="variableName">instructionID1</stringProp>
          <stringProp name="outputFormat">CDC28007|170003681</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID2" enabled="true">
          <stringProp name="variableName">instructionID2</stringProp>
          <stringProp name="outputFormat">CDC28007|170003671</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereference" enabled="true">
          <stringProp name="variableName">traceref</stringProp>
          <stringProp name="outputFormat">CRPL-TBank|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));


//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;outboundtransactions&apos;
MongoCollection&lt;Document&gt; OutboundTransactions = database.getCollection(vars.get(&quot;OutboundTransactions&quot;));
vars.putObject(&quot;OutboundTransactions&quot;, OutboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);

//Connection to &apos;lftrequestqueues&apos;
MongoCollection&lt;Document&gt; LftRequestQueues = database.getCollection(vars.get(&quot;LftRequestQueues&quot;));
vars.putObject(&quot;LftRequestQueues&quot;, LftRequestQueues);

//Connection to &apos;lftresponsequeues&apos;
MongoCollection&lt;Document&gt; LftResponseQueues = database.getCollection(vars.get(&quot;LftResponseQueues&quot;));
vars.putObject(&quot;LftResponseQueues&quot;, LftResponseQueues);

//Connection to &apos;outboundtransactiondetails&apos;
MongoCollection&lt;Document&gt; OutboundTransactionDetails = database.getCollection(vars.get(&quot;OutboundTransactionDetails&quot;));
vars.putObject(&quot;OutboundTransactionDetails&quot;, OutboundTransactionDetails);

//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Pre-Validation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;cdtrBank&quot;: &quot;UNILPKKARTG&quot;,&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-03-21T00:00:00.000Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode1= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find().last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of outboundtransactions
outboundtransID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outboundtransID&quot;, outboundtransID);

//return status1+stage;
return mode1+status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1505622151">Mode is: outbound
Status is: Initiated
Stage is: VAL_ACCEPT
Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);

Document document = Instructions.find(and(eq(&quot;_id&quot;,outboundtransID),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1742696767">Mode is: outbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
                <stringProp name="470435717">Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status validation reply (VAL_REPLY)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchInitiator&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;CRPL-${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;09-JUN-22&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
   &#xd;
    ]&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instructions/validate/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;status&quot;))).last();
//Document document = OutboundTransactions.find(eq(&quot;type&quot;,&quot;status&quot;)).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1875437325">Mode is: inbound
Status is: Success
Stage is: VAL_REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);


Document document = Instructions.find(and(eq(&quot;refInstructionId&quot;,outboundtransID),eq(&quot;type&quot;,&quot;status&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

// Loop Start // 

// Getting ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);

// Creating an Array List
ArrayList&lt;String&gt; instr_status = new ArrayList&lt;String&gt;();

int count = 0;
count = instr_array.size();
if (instr_array.isEmpty() != true)
{
	//count = instr_array.size();
	for(int i = 0; i &lt; count; i++)
	{
		stat_var=document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;)+ &quot; with Rejecton Reason: &quot;+ document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;rejectedReason&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		instr_status.add(stat);
		//log.info(docList.toString());
		}
}

else 
{
	stat_var = &quot;Processed&quot;;
	stat = &quot;Status of all Instructions is&quot; + stat_var;
	instr_status.add(stat);
	}

// LoopEnd //

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


Thread. sleep(1000)
return mode+status+stage+instr_status;

}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="700869394">Mode is: inbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Payment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2021-07-13T00:00:00.000Z&quot;,&#xd;
    &quot;nbOfTxs&quot;: &quot;2&quot;,&#xd;
    &quot;amount&quot;: {&#xd;
        &quot;currency&quot;: &quot;PKR&quot;,&#xd;
        &quot;value&quot;: &quot;2.93&quot;&#xd;
    },&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.03&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4210154878570&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
                &quot;name&quot;: &quot;MOBINA SAEED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-17&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.9&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4220189247021&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK72HABB0005997900537503&quot;,&#xd;
                &quot;name&quot;: &quot;ZAFAR AHMED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-18&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/payment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">batchID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of type payment
paymentID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;paymentID&quot;, paymentID);


//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, onlyinstr);

return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="502516385">Mode is: outbound
Status is: Initiated
Stage is: PAY_ACCEPT</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+document.get(&quot;status&quot;).toString();
		String objid = document.get(&quot;_id&quot;).toString();
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;myArr&quot;, instlist);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document2 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage3 = &quot;Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find().last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return stage1+stage2+stage3;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1831599089">Stage is: CBS_PROCESSED</stringProp>
                <stringProp name="-778302848">Stage is: PAYMENT_IN_PROCESS</stringProp>
                <stringProp name="-323524245">Stage is: SBP_SUBMITTED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;))).last();
//Document document = IsoMessages.find(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - pacs.002 Failure" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T14:53:39Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;P12302256/102&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-06-03T17:53:39.520+03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;CRPL-${batchID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2020-05-19T14:20:47&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EP122&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Invalid value date&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - camt.025" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:F5xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;camt.025.001.05&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T14:06:21Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:camt.025.001.05\&quot;&gt;&lt;Rct&gt;&lt;MsgHdr&gt;&lt;MsgId&gt;1599729840119&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-06-03T17:00:18.738+03:00&lt;/CreDtTm&gt;&lt;/MsgHdr&gt;&lt;RctDtls&gt;&lt;OrgnlMsgId&gt;&lt;MsgId&gt;CRPL-${batchID}&lt;/MsgId&gt;&lt;MsgNmId&gt;camt.018.001.05/999&lt;/MsgNmId&gt;&lt;OrgtrNm&gt;ABPAPKKA&lt;/OrgtrNm&gt;&lt;/OrgnlMsgId&gt;&lt;ReqHdlg&gt;&lt;StsCd&gt;OK&lt;/StsCd&gt;&lt;/ReqHdlg&gt;&lt;/RctDtls&gt;&lt;/Rct&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;camt.025.001.05&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/camt</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - admi.002" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;admi.002.001.01&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T06:48:12Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:admi.002.001.01\&quot;&gt;&lt;admi.002.001.01&gt;&lt;RltdRef&gt;&lt;Ref&gt;CRPL-${batchID}&lt;/Ref&gt;&lt;/RltdRef&gt;&lt;Rsn&gt;&lt;RjctgPtyRsn&gt;EA1&lt;/RjctgPtyRsn&gt;&lt;RjctnDtTm&gt;2020-06-03T09:48:12.412&lt;/RjctnDtTm&gt;&lt;RsnDesc&gt;Text block has invalid format&lt;/RsnDesc&gt;&lt;AddtlData&gt;Invalid MX input:[38,17] cvc-complex-type.2.4.a: Invalid content was found starting with element &apos;AcctId&apos;. One of &apos;{&amp;quot;urn:swift:xsd:camt.009.001.06&amp;quot;:SchCrit}&apos; is expected.&lt;/AddtlData&gt;&lt;/Rsn&gt;&lt;/admi.002.001.01&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;admi.002.001.01&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/admi</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1738874451">Stage is: SBP_FAILED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;camt.025.001.05&quot;))).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1380616844">Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
//mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
//status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id
outID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outID&quot;, outID);

//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;returnArray&quot;, onlyinstr);


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1888389501">Stage is: RETURN_RECV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;camt.025.001.05&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(10000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="628494353">Mode is: inbound
Status is: Failure
Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;returnArray&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var= document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End
//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1650924334">Mode is: inbound
Status is: Success
Stage is: CBS_REV_PROCESSED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Outward - admi.002(Failure)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - Batch ID" enabled="true">
          <stringProp name="variableName">batchID</stringProp>
          <stringProp name="outputFormat">C5TESTBANKLTD|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID1" enabled="true">
          <stringProp name="variableName">instructionID1</stringProp>
          <stringProp name="outputFormat">CDC28007|170003681</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID2" enabled="true">
          <stringProp name="variableName">instructionID2</stringProp>
          <stringProp name="outputFormat">CDC28007|170003671</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereference" enabled="true">
          <stringProp name="variableName">traceref</stringProp>
          <stringProp name="outputFormat">CRPL-TBank|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));


//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;outboundtransactions&apos;
MongoCollection&lt;Document&gt; OutboundTransactions = database.getCollection(vars.get(&quot;OutboundTransactions&quot;));
vars.putObject(&quot;OutboundTransactions&quot;, OutboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);

//Connection to &apos;lftrequestqueues&apos;
MongoCollection&lt;Document&gt; LftRequestQueues = database.getCollection(vars.get(&quot;LftRequestQueues&quot;));
vars.putObject(&quot;LftRequestQueues&quot;, LftRequestQueues);

//Connection to &apos;lftresponsequeues&apos;
MongoCollection&lt;Document&gt; LftResponseQueues = database.getCollection(vars.get(&quot;LftResponseQueues&quot;));
vars.putObject(&quot;LftResponseQueues&quot;, LftResponseQueues);

//Connection to &apos;outboundtransactiondetails&apos;
MongoCollection&lt;Document&gt; OutboundTransactionDetails = database.getCollection(vars.get(&quot;OutboundTransactionDetails&quot;));
vars.putObject(&quot;OutboundTransactionDetails&quot;, OutboundTransactionDetails);

//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Pre-Validation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;cdtrBank&quot;: &quot;UNILPKKARTG&quot;,&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-03-21T00:00:00.000Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode1= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find().last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of outboundtransactions
outboundtransID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outboundtransID&quot;, outboundtransID);

//return status1+stage;
return mode1+status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1505622151">Mode is: outbound
Status is: Initiated
Stage is: VAL_ACCEPT
Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);

Document document = Instructions.find(and(eq(&quot;_id&quot;,outboundtransID),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1742696767">Mode is: outbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
                <stringProp name="470435717">Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status validation reply (VAL_REPLY)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchInitiator&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;CRPL-${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;09-JUN-22&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
   &#xd;
    ]&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instructions/validate/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;status&quot;))).last();
//Document document = OutboundTransactions.find(eq(&quot;type&quot;,&quot;status&quot;)).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1875437325">Mode is: inbound
Status is: Success
Stage is: VAL_REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);


Document document = Instructions.find(and(eq(&quot;refInstructionId&quot;,outboundtransID),eq(&quot;type&quot;,&quot;status&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

// Loop Start // 

// Getting ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);

// Creating an Array List
ArrayList&lt;String&gt; instr_status = new ArrayList&lt;String&gt;();

int count = 0;
count = instr_array.size();
if (instr_array.isEmpty() != true)
{
	//count = instr_array.size();
	for(int i = 0; i &lt; count; i++)
	{
		stat_var=document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;)+ &quot; with Rejecton Reason: &quot;+ document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;rejectedReason&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		instr_status.add(stat);
		//log.info(docList.toString());
		}
}

else 
{
	stat_var = &quot;Processed&quot;;
	stat = &quot;Status of all Instructions is&quot; + stat_var;
	instr_status.add(stat);
	}

// LoopEnd //

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


Thread. sleep(1000)
return mode+status+stage+instr_status;

}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="700869394">Mode is: inbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Payment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2021-07-13T00:00:00.000Z&quot;,&#xd;
    &quot;nbOfTxs&quot;: &quot;2&quot;,&#xd;
    &quot;amount&quot;: {&#xd;
        &quot;currency&quot;: &quot;PKR&quot;,&#xd;
        &quot;value&quot;: &quot;2.93&quot;&#xd;
    },&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.03&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4210154878570&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
                &quot;name&quot;: &quot;MOBINA SAEED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-17&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.9&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4220189247021&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK72HABB0005997900537503&quot;,&#xd;
                &quot;name&quot;: &quot;ZAFAR AHMED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-18&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/payment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">batchID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of type payment
paymentID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;paymentID&quot;, paymentID);


//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, onlyinstr);

return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="502516385">Mode is: outbound
Status is: Initiated
Stage is: PAY_ACCEPT</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+document.get(&quot;status&quot;).toString();
		String objid = document.get(&quot;_id&quot;).toString();
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;myArr&quot;, instlist);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document2 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage3 = &quot;Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find().last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return stage1+stage2+stage3;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1831599089">Stage is: CBS_PROCESSED</stringProp>
                <stringProp name="-778302848">Stage is: PAYMENT_IN_PROCESS</stringProp>
                <stringProp name="-323524245">Stage is: SBP_SUBMITTED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;))).last();
//Document document = IsoMessages.find(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - pacs.002 Failure" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T14:53:39Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;P12302256/102&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-06-03T17:53:39.520+03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;CRPL-${batchID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2020-05-19T14:20:47&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EP122&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Invalid value date&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - camt.025" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:F5xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;camt.025.001.05&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T14:06:21Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:camt.025.001.05\&quot;&gt;&lt;Rct&gt;&lt;MsgHdr&gt;&lt;MsgId&gt;1599729840119&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-06-03T17:00:18.738+03:00&lt;/CreDtTm&gt;&lt;/MsgHdr&gt;&lt;RctDtls&gt;&lt;OrgnlMsgId&gt;&lt;MsgId&gt;CRPL-${batchID}&lt;/MsgId&gt;&lt;MsgNmId&gt;camt.018.001.05/999&lt;/MsgNmId&gt;&lt;OrgtrNm&gt;ABPAPKKA&lt;/OrgtrNm&gt;&lt;/OrgnlMsgId&gt;&lt;ReqHdlg&gt;&lt;StsCd&gt;OK&lt;/StsCd&gt;&lt;/ReqHdlg&gt;&lt;/RctDtls&gt;&lt;/Rct&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;camt.025.001.05&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/camt</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - admi.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;admi.002.001.01&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T06:48:12Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:admi.002.001.01\&quot;&gt;&lt;admi.002.001.01&gt;&lt;RltdRef&gt;&lt;Ref&gt;CRPL-${batchID}&lt;/Ref&gt;&lt;/RltdRef&gt;&lt;Rsn&gt;&lt;RjctgPtyRsn&gt;EA1&lt;/RjctgPtyRsn&gt;&lt;RjctnDtTm&gt;2020-06-03T09:48:12.412&lt;/RjctnDtTm&gt;&lt;RsnDesc&gt;Text block has invalid format&lt;/RsnDesc&gt;&lt;AddtlData&gt;Invalid MX input:[38,17] cvc-complex-type.2.4.a: Invalid content was found starting with element &apos;AcctId&apos;. One of &apos;{&amp;quot;urn:swift:xsd:camt.009.001.06&amp;quot;:SchCrit}&apos; is expected.&lt;/AddtlData&gt;&lt;/Rsn&gt;&lt;/admi.002.001.01&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;admi.002.001.01&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/admi</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1738874451">Stage is: SBP_FAILED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;admi.002.001.01&quot;))).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1380616844">Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
//mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
//status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id
outID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outID&quot;, outID);

//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;returnArray&quot;, onlyinstr);


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1888389501">Stage is: RETURN_RECV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;admi.002.001.01&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(10000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="628494353">Mode is: inbound
Status is: Failure
Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;returnArray&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var= document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End
//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1650924334">Mode is: inbound
Status is: Success
Stage is: CBS_REV_PROCESSED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Outward - BENE BANK ACK with RETURN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - Batch ID" enabled="true">
          <stringProp name="variableName">batchID5</stringProp>
          <stringProp name="outputFormat">C7TESTBANKLTD|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID1" enabled="true">
          <stringProp name="variableName">instructionID1</stringProp>
          <stringProp name="outputFormat">CDC28007|170003681</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID2" enabled="true">
          <stringProp name="variableName">instructionID2</stringProp>
          <stringProp name="outputFormat">CDC28007|170003671</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereference" enabled="true">
          <stringProp name="variableName">traceref5</stringProp>
          <stringProp name="outputFormat">CRPL-TBank|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));


//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;outboundtransactions&apos;
MongoCollection&lt;Document&gt; OutboundTransactions = database.getCollection(vars.get(&quot;OutboundTransactions&quot;));
vars.putObject(&quot;OutboundTransactions&quot;, OutboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);

//Connection to &apos;lftrequestqueues&apos;
MongoCollection&lt;Document&gt; LftRequestQueues = database.getCollection(vars.get(&quot;LftRequestQueues&quot;));
vars.putObject(&quot;LftRequestQueues&quot;, LftRequestQueues);

//Connection to &apos;lftresponsequeues&apos;
MongoCollection&lt;Document&gt; LftResponseQueues = database.getCollection(vars.get(&quot;LftResponseQueues&quot;));
vars.putObject(&quot;LftResponseQueues&quot;, LftResponseQueues);

//Connection to &apos;outboundtransactiondetails&apos;
MongoCollection&lt;Document&gt; OutboundTransactionDetails = database.getCollection(vars.get(&quot;OutboundTransactionDetails&quot;));
vars.putObject(&quot;OutboundTransactionDetails&quot;, OutboundTransactionDetails);

//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Pre-Validation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;cdtrBank&quot;: &quot;UNILPKKARTG&quot;,&#xd;
    &quot;batchId&quot;: &quot;${batchID5}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-03-21T00:00:00.000Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode1= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find().last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of outboundtransactions
outboundtransID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outboundtransID&quot;, outboundtransID);

//return status1+stage;
return mode1+status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1505622151">Mode is: outbound
Status is: Initiated
Stage is: VAL_ACCEPT
Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);

Document document = Instructions.find(and(eq(&quot;_id&quot;,outboundtransID),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1742696767">Mode is: outbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
                <stringProp name="470435717">Stage is: VAL_IN_PROCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status validation reply (VAL_REPLY)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchInitiator&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;CRPL-${batchID5}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;09-JUN-22&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
   &#xd;
    ]&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instructions/validate/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;status&quot;))).last();
//Document document = OutboundTransactions.find(eq(&quot;type&quot;,&quot;status&quot;)).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1875437325">Mode is: inbound
Status is: Success
Stage is: VAL_REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);


Document document = Instructions.find(and(eq(&quot;refInstructionId&quot;,outboundtransID),eq(&quot;type&quot;,&quot;status&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

// Loop Start // 

// Getting ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);

// Creating an Array List
ArrayList&lt;String&gt; instr_status = new ArrayList&lt;String&gt;();

int count = 0;
count = instr_array.size();
if (instr_array.isEmpty() != true)
{
	//count = instr_array.size();
	for(int i = 0; i &lt; count; i++)
	{
		stat_var=document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;)+ &quot; with Rejecton Reason: &quot;+ document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;rejectedReason&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		instr_status.add(stat);
		//log.info(docList.toString());
		}
}

else 
{
	stat_var = &quot;Processed&quot;;
	stat = &quot;Status of all Instructions is&quot; + stat_var;
	instr_status.add(stat);
	}

// LoopEnd //

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return mode+status+stage+instr_status;

}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="700869394">Mode is: inbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Payment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID5}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2021-07-13T00:00:00.000Z&quot;,&#xd;
    &quot;nbOfTxs&quot;: &quot;2&quot;,&#xd;
    &quot;amount&quot;: {&#xd;
        &quot;currency&quot;: &quot;PKR&quot;,&#xd;
        &quot;value&quot;: &quot;2.93&quot;&#xd;
    },&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.03&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4210154878570&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
                &quot;name&quot;: &quot;MOBINA SAEED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-17&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.9&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4220189247021&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK72HABB0005997900537503&quot;,&#xd;
                &quot;name&quot;: &quot;ZAFAR AHMED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-18&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/payment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">batchID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of type payment
paymentID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;paymentID&quot;, paymentID);


//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, onlyinstr);

return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="502516385">Mode is: outbound
Status is: Initiated
Stage is: PAY_ACCEPT</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);




return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var= document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		String objid = document.get(&quot;_id&quot;).toString();
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;myArr&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document2 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage3 = &quot;Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find().last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return stage1+stage2+stage3;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1831599089">Stage is: CBS_PROCESSED</stringProp>
                <stringProp name="-778302848">Stage is: PAYMENT_IN_PROCESS</stringProp>
                <stringProp name="-323524245">Stage is: SBP_SUBMITTED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;))).last();
//Document document = IsoMessages.find(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ISO Message - pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&#xd;
    &quot;traceReference&quot;: &quot;${traceref5}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;${traceref}&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-06-03T14:53:39Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;P12302256/102&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-06-03T17:53:39.520+03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;CRPL-${batchID5}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2020-05-19T14:20:47&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EP122&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Invalid value date&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID5}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1471912185">Stage is: SBP_ACK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;))).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status validation reply (BENE_BANK)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchInitiator&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;CRPL-${batchID5}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2021-07-13T10:22:28Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;reportedStatus&quot;: {&#xd;
                &quot;name&quot;: &quot;Processed&quot;,&#xd;
                &quot;modificationDateTime&quot;: &quot;2021-07-13T10:22:28Z&quot;&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;reportedStatus&quot;: {&#xd;
                &quot;name&quot;: &quot;Processed&quot;,&#xd;
                &quot;modificationDateTime&quot;: &quot;2021-07-13T10:22:28Z&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instructions/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">2SF-G2S</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">HABBPKPKSNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">adsadsadasd</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1215272746">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;success&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;status&quot;))).last();
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;



//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; reportedstatus = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{
		stat_var=document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		reportedstatus.add(stat);
		log.info(reportedstatus.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return stage+reportedstatus;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1044933817">Stage is: BENE_BANK_ACK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="IsoMessage - pacs.004" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;traceReference&quot;: &quot;${traceref5}&quot;,&#xd;
&quot;type&quot;: &quot;pacs.004.001.09&quot;,&#xd;
&quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKXIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AAAAVNVN&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;RTN1619075420145&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.004.001.09&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-05-13T18:47:04.101Z&lt;/CreDt&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.004.001.09\&quot;&gt;&lt;PmtRtr&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;MID${traceref}&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-05-27T10:58:50&lt;/CreDtTm&gt;&lt;BtchBookg&gt;true&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;2&lt;/NbOfTxs&gt;&lt;TtlRtrdIntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;420000.00&lt;/TtlRtrdIntrBkSttlmAmt&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInf&gt;&lt;OrgnlMsgId&gt;CRPL-${batchID5}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2020-05-27T10:58:50&lt;/OrgnlCreDtTm&gt;&lt;/OrgnlGrpInf&gt;&lt;TxInf&gt;&lt;RtrId&gt;RTRN1619075420157fnbqs4m6&lt;/RtrId&gt;&lt;OrgnlInstrId&gt;${instructionID1}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;NRTDC-ENDTOEND&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;T-NRTDC-0000001&lt;/OrgnlTxId&gt;&lt;OrgnlIntrBkSttlmDt&gt;2020-06-03&lt;/OrgnlIntrBkSttlmDt&gt;&lt;RtrdIntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;4&lt;/RtrdIntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2020-06-03&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;RtrRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;BlockedAccount&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;/RtrRsnInf&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1.9&lt;/IntrBkSttlmAmt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CSDC&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Dbtr&gt;&lt;Pty&gt;&lt;Nm&gt;BankA&lt;/Nm&gt;&lt;/Pty&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;123456789&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AHRBPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Pty&gt;&lt;Nm&gt;BankB&lt;/Nm&gt;&lt;/Pty&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;11617901130103&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/CdtrAcct&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInf&gt;&lt;/PmtRtr&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/004</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
//mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
//status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id
outID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outID&quot;, outID);

//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;returnArray&quot;, onlyinstr);


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1888389501">Stage is: RETURN_RECV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(10000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="941657483">Mode is: inbound
Status is: Initiated
Stage is: NotStarted
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

//Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;



////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;returnArray&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = OutboundTransactionDetails.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;detail_ids&quot;, instlist);

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

return statlist;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

Thread. sleep(20000);
//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		//Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,paymentID),eq(&quot;outboundTransactionDetailId&quot;,instlist[i]))).last();
		Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		//Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

//Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def outID = vars.getObject(&quot;outID&quot;);

Thread. sleep(20000);
//Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;detail_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;outboundTransactionDetailId&quot;,new ObjectId(instlist[i])))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End



//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);



return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1650924334">Mode is: inbound
Status is: Success
Stage is: CBS_REV_PROCESSED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Inward Flow - Success" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed">9695</stringProp>
          <stringProp name="variableName">traceReference1</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
          <stringProp name="variableName">msgID</stringProp>
          <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">9695</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="true">
            <stringProp name="variableName">msgID1</stringProp>
            <stringProp name="outputFormat">C1JSBLPKKA9087450000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorName" elementType="Argument">
                <stringProp name="Argument.name">CreditorName</stringProp>
                <stringProp name="Argument.value">ZOHAIB ALI KHAN</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK32HABB0000477948641001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorName" elementType="Argument">
                <stringProp name="Argument.name">DebitorName</stringProp>
                <stringProp name="Argument.value">ABC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebitorIBAN</stringProp>
                <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference1}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402202&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:43Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 \&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID1}&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/CreDtTm&gt;&lt;BtchBookg&gt;false&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;JSBLPKKA908745603401&lt;/InstrId&gt;&lt;EndToEndId&gt;JSBLPKKA908745603401&lt;/EndToEndId&gt;&lt;TxId&gt;JSBLPKKA9087456034&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;021&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;${DebitorName}&lt;/Nm&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${DebitorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;${CreditorName}&lt;/Nm&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${CreditorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;RmtInf&gt;&lt;Ustrd&gt;testing1&lt;/Ustrd&gt;&lt;/RmtInf&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID1}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
//msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2P Outbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="135937764">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress

P2P Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-703402082">Type is: Validate
Msg Id is: ${msgID1}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference1}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402203&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:44Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID1}/001&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:44.854 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${msgID1}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178993071/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;JSBLPKKA908745603401&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;JSBLPKKA908745603401&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;JSBLPKKA9087456034&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;284&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1.0&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
              <stringProp name="variableName">MsgId</stringProp>
              <stringProp name="outputFormat">M1789930/002</stringProp>
              <stringProp name="minimumValue">002</stringProp>
              <stringProp name="maximumValue">999</stringProp>
              <stringProp name="randomSeed">006</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID1}&quot;), eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

Thread. sleep(10000);

// Pacs 002 Inbound
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
//return message1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-128450689">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="376250842">Type is: Payment
Msg Id is: ${msgID1}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Inward Flow - Manual Return" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed">9695</stringProp>
          <stringProp name="variableName">traceReference2</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="true">
          <stringProp name="variableName">msgID2</stringProp>
          <stringProp name="outputFormat">C2JSBLPKKA9087450000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">9695</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorName" elementType="Argument">
                <stringProp name="Argument.name">CreditorName</stringProp>
                <stringProp name="Argument.value">ZOHAIB ALI KHAN</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK32HABB0000477948641001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorName" elementType="Argument">
                <stringProp name="Argument.name">DebitorName</stringProp>
                <stringProp name="Argument.value">ABC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebitorIBAN</stringProp>
                <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference2}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402202&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:43Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 \&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID2}&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/CreDtTm&gt;&lt;BtchBookg&gt;false&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;JSBLPKKA908745603401&lt;/InstrId&gt;&lt;EndToEndId&gt;JSBLPKKA908745603401&lt;/EndToEndId&gt;&lt;TxId&gt;JSBLPKKA9087456034&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;021&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;${DebitorName}&lt;/Nm&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${DebitorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;${CreditorName}&lt;/Nm&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${CreditorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;RmtInf&gt;&lt;Ustrd&gt;testing1&lt;/Ustrd&gt;&lt;/RmtInf&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID2}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
//msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable

Thread. sleep(5000);

// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2P Outbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="135937764">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress

P2P Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
respmsg =&quot;Response Msg is: &quot;+ document.get(&apos;response&apos;).get(&apos;result&apos;).get(&apos;message&apos;).toString()+&quot;\n&quot;;

	 
return type+msgID+procsby+status+respmsg;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-943942211">Type is: Validate
Msg Id is: ${msgID2}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference2}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402203&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:44Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID2}/002&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:44.854 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${msgID2}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178993071/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;JSBLPKKA908745603401&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;JSBLPKKA908745603401&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;JSBLPKKA9087456034&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;284&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1.0&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
              <stringProp name="variableName">MsgId</stringProp>
              <stringProp name="outputFormat">M1789930/002</stringProp>
              <stringProp name="minimumValue">002</stringProp>
              <stringProp name="maximumValue">999</stringProp>
              <stringProp name="randomSeed">006</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID2}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

// Pacs 002 Inbound
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
//return mode1+status1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-128450689">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Transfer&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
subtype =&quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
respmsg =&quot;Response Msg is: &quot;+ document.get(&apos;response&apos;).get(&apos;result&apos;).get(&apos;message&apos;).toString()+&quot;\n&quot;;
	 
return type+subtype+msgID+procsby+status+respmsg;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1962489712">Type is: Payment
Sub-Type is: Transfer
Msg Id is: ${msgID2}
Processed By is: CoreBanking
Status is: Success
Response Msg is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs Changes*" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Type:Payment , Subtype: Transfer
Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Transfer&quot;))).last();
message1 = &quot;P2P Type Payment and subtype Transfer document details: \n&quot;;
type1 =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
subtype1 =&quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
msgID1 =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby1 =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(10000);

// Type:Payment , Subtype: Return
Document document1 = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Return&quot;))).last();
message2 = &quot;P2P Type Payment and subtype Return document details: \n&quot;;
type2 =&quot;Type is: &quot;+document1.get(&quot;type&quot;).toString()+&quot;\n&quot;;
subtype2 =&quot;Sub-Type is: &quot;+document1.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
msgID2 =&quot;Msg Id is: &quot;+document1.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby2 =&quot;Processed By is: &quot;+document1.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return message1+type1+subtype1+msgID1+procsby1+status1+message2+type2+subtype2+msgID2+procsby2+status2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1299868069">Type is: Payment
Sub-Type is: Transfer
Msg Id is: ${msgID}
Processed By is: CoreBanking
Status is: Success
Response Msg is: Success

Type is: Payment
Sub-Type is: Return
Msg Id is: ${msgID}
Processed By is: CoreBanking
Status is: Success
Response Msg is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;mpg@admin&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/proxy/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Token Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Access_Token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="On Demand Return" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;msgId&quot;: &quot;${msgID2}&quot;,&#xd;
    &quot;rejectionReason&quot;: &quot;InsufficientFunds&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/admin/p2p/return</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${Access_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="MsgID Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">MsgID</stringProp>
              <stringProp name="RegexExtractor.regex">msgID: &quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
//Document document = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
message = &quot;P2P Outbound Pacs.004 document details: \n&quot;;
mode =&quot;Pacs 004 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 004 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 004 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of pacs.008
Document document1 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
objectID = document1.getObjectId(&quot;_id&quot;);
//Get the msgid of pacs.004 
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;, objectID),eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;))).last();
//{refP2pIsoMessageId: ObjectId(&apos;62a78cda08ebee003f6b061b&apos;), type: &quot;pacs.004.001.09&quot;}
msgid = document2.get(&quot;msgID&quot;);
//Put it in a variable:
vars.putObject(&quot;msgid&quot;, msgid);

	 
return message+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2094684497">P2P Outbound Pacs.004 document details: 
Pacs 004 Mode is: outbound
Pacs 004 Status is: Initiated
Pacs 004 Stage is: InProgress</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 004 Outbound
Document document = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
//Document document = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
message = &quot;P2P Outbound Pacs.004 document details: \n&quot;;
mode =&quot;Pacs 004 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 004 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 004 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

// Getting Pacs 004 msgID -&gt; To use as msgID in &apos;pacs002 for pacs004&apos;
RTNMsgID = document.get(&quot;msgID&quot;);
//Put it in a variable:
vars.putObject(&quot;RTNMsgID&quot;, RTNMsgID);

	 
return message+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2094684497">P2P Outbound Pacs.004 document details: 
Pacs 004 Mode is: outbound
Pacs 004 Status is: Initiated
Pacs 004 Stage is: InProgress</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Return&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
subtype =&quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
respmsg =&quot;Response Msg is: &quot;+ document.get(&apos;response&apos;).get(&apos;result&apos;).get(&apos;message&apos;).toString()+&quot;\n&quot;;
	 
return type+subtype+msgID+procsby+status+respmsg;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1866877515">Type is: Payment
Sub-Type is: Return
Msg Id is: ${msgID2}
Processed By is: CoreBanking
Status is: Success
Response Msg is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="pacs002 for pacs004" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference2}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402207&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T07:07:01Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;RTN${msgID2}/002&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T12:07:01.580 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${RTNMsgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.004.001.09&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-13T12:03:50.418Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M111023/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;JSBLPKKA908745603401&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;JSBLPKKA908745603401&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;RTNHABBPKKARTG1637751682667&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;284&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="RTNMsgID" elementType="Argument">
                  <stringProp name="Argument.name">RTNMsgID</stringProp>
                  <stringProp name="Argument.value">${RTNMsgID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1029309536">{&quot;hasErrors&quot;:false,&quot;result&quot;:{&quot;isSuccess&quot;:true}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
//Document document = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
message = &quot;P2P Outbound Pacs.004 document details: \n&quot;;
mode =&quot;Pacs 004 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 004 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 004 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

	 
return message+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1571463372">P2P Outbound Pacs.004 document details: 
Pacs 004 Mode is: outbound
Pacs 004 Status is: Success
Pacs 004 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Inward Flow - Pacs002 RJCT" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed">9695</stringProp>
          <stringProp name="variableName">traceReference3</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="true">
          <stringProp name="variableName">msgID3</stringProp>
          <stringProp name="outputFormat">C3JSBLPKKA9087450000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">9695</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorName" elementType="Argument">
                <stringProp name="Argument.name">CreditorName</stringProp>
                <stringProp name="Argument.value">ZOHAIB ALI KHAN</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK32HABB0000477948641001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorName" elementType="Argument">
                <stringProp name="Argument.name">DebitorName</stringProp>
                <stringProp name="Argument.value">ABC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebitorIBAN</stringProp>
                <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference3}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402202&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:43Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 \&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID3}&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/CreDtTm&gt;&lt;BtchBookg&gt;false&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;JSBLPKKA908745603401&lt;/InstrId&gt;&lt;EndToEndId&gt;JSBLPKKA908745603401&lt;/EndToEndId&gt;&lt;TxId&gt;JSBLPKKA9087456034&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;021&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;${DebitorName}&lt;/Nm&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${DebitorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;${CreditorName}&lt;/Nm&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${CreditorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;RmtInf&gt;&lt;Ustrd&gt;testing1&lt;/Ustrd&gt;&lt;/RmtInf&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgId</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID3}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2P Outbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1447157020">P2P Inbound Pacs.008 document details: 
Pacs 008 MsgID is: ${msgID3}
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress

P2P Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;; 
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1184482340">Type is: Validate
Msg Id is: ${msgID3}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference3}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID3}/003&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-12T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${msgID3}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;pc624bklwur2jpj98w92&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;pc624bklwur2jpj98w92&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;pc624bklwur2jpj98w92&lt;/OrgnlTxId&gt;&lt;TxSts&gt;RJCT&lt;/TxSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EL201&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Document was rejected by counterparty&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;IncorrectAccountNumber&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Account number is invalid or missing&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgId</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
              <stringProp name="variableName">MsgId</stringProp>
              <stringProp name="outputFormat">M1789930/002</stringProp>
              <stringProp name="minimumValue">002</stringProp>
              <stringProp name="maximumValue">999</stringProp>
              <stringProp name="randomSeed">006</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

//def msgid = vars.getObject(&quot;msgID&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID3}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

// Pacs 002 Inbound
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+ document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
reason = &quot;Pacs 002 Rejected Reason is: &quot;+document2.get(&apos;request&apos;).get(&apos;DataPDU&apos;).get(&apos;Body&apos;).get(&apos;Document&apos;).get(&apos;FIToFIPmtStsRpt&apos;).get(&apos;TxInfAndSts&apos;).get(&apos;StsRsnInf&apos;).getAt(1).get(&apos;Rsn&apos;).get(&apos;Prtry&apos;).get(&apos;_text&apos;).toString()+&quot;\n&quot;;
addinfo = &quot;Pacs 002 Rejected Reason Additional Info is: &quot;+document2.get(&apos;request&apos;).get(&apos;DataPDU&apos;).get(&apos;Body&apos;).get(&apos;Document&apos;).get(&apos;FIToFIPmtStsRpt&apos;).get(&apos;TxInfAndSts&apos;).get(&apos;StsRsnInf&apos;).getAt(1).get(&apos;AddtlInf&apos;).get(&apos;_text&apos;).toString()+&quot;\n\n\n&quot;;
//reason = &quot;Pacs 002 Rejected Reason is: &quot;+document2.get(&apos;request&apos;).toString()+&quot;\n&quot;;
	 
return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2+reason+addinfo;
//return mode1+status1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="329248691">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Failure
Pacs 002 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Outward Flow - Success" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="true">
            <stringProp name="variableName">msgID5</stringProp>
            <stringProp name="outputFormat">C5LOCALTESTING0000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference5</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2POutboundTransactions = database.getCollection(vars.get(&quot;P2POutboundTransactions&quot;));
vars.putObject(&quot;P2POutboundTransactions&quot;, P2POutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;instruction&quot;: {&#xd;
      &quot;instructionId&quot;: &quot;ZbwuKJN75kGogD1Tt8&quot;,&#xd;
      &quot;amount&quot;: {&#xd;
         &quot;currency&quot;: &quot;PKR&quot;,&#xd;
         &quot;value&quot;: &quot;10.0&quot;&#xd;
      },&#xd;
      &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
      &quot;creditor&quot;: {&#xd;
         &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
         &quot;name&quot;:&quot;MOBINA SAEED&quot;,&#xd;
         &quot;accountType&quot;: &quot;W&quot;&#xd;
      },&#xd;
      &quot;cdtrBank&quot;: &quot;SCBLPKKA&quot;,&#xd;
      &quot;debtor&quot;: {&#xd;
         &quot;iban&quot;: &quot;PK32HABB0000477948641001&quot;,&#xd;
         &quot;name&quot;: &quot;MUHAMMAD RIZWAN&quot;,&#xd;
         &quot;accountType&quot;: &quot;A&quot;&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/p2ppayment</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID5}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID5}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-486289218">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID5}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="496627041">Type is: Payment
Msg Id is: MB${msgID5}
Processed By is: CoreBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference5}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;MB${msgID5}/002&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-11-23T16:56:35.214Z&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID5}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;MB${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;MB${msgID5}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MB${msgID5}&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <stringProp name="variableName">traceReference</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
                  <stringProp name="variableName">msgID</stringProp>
                  <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
                  <stringProp name="variableName">MsgId</stringProp>
                  <stringProp name="outputFormat">M1789930/002</stringProp>
                  <stringProp name="minimumValue">002</stringProp>
                  <stringProp name="maximumValue">999</stringProp>
                  <stringProp name="randomSeed">006</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID5}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="895516714">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID5}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Outward Flow - Pacs.002 RJCT" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="true">
            <stringProp name="variableName">msgID6</stringProp>
            <stringProp name="outputFormat">C6LOCALTESTING0000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference6</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2POutboundTransactions = database.getCollection(vars.get(&quot;P2POutboundTransactions&quot;));
vars.putObject(&quot;P2POutboundTransactions&quot;, P2POutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate Payment" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB103101271712000643&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;PK42UNIL0109000213301578&quot;,&#xd;
            &quot;name&quot;: &quot;Ali Khan&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;UNILPKKARTG&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;PK94HABB0050217902363451&quot;,&#xd;
            &quot;name&quot;: &quot;HZRU ZASIZ&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/p2ppayment</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID6}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51514">406</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1273575271">{&quot;errors&quot;:[{&quot;type&quot;:&quot;Main&quot;,&quot;code&quot;:&quot;704&quot;,&quot;subCode&quot;:&quot;IncorrectAccountNumber&quot;,&quot;message&quot;:&quot;Account number is invalid or missing&quot;}]}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID6}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-871656001">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID6}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Transfer&quot;))).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
type =&quot;Pacs 008 Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Pacs 008 MsgID is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Pacs 008 Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Pacs 008 Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return message1+type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="236471927">P2P Outbound Pacs.008 document details: 
Pacs 008 Type is: Payment
Pacs 008 MsgID is: MB${msgID6}
Pacs 008 Sub-Type is: Transfer
Pacs 008 Processed By is: CoreBanking
Pacs 008 Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002 RJCT" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference6}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;MB${msgID6}/003&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-12T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID6}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;MBZbwuKJN75kGogD1Tt8_Dfd8&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;MBZbwuKJN75kGogD1Tt8_Dfd8&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MBZbwuKJN75kGogD1Tt8_Dfd8&lt;/OrgnlTxId&gt;&lt;TxSts&gt;RJCT&lt;/TxSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EL201&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Document was rejected by counterparty&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;IncorrectAccountNumber&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Account number is invalid or missing&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <stringProp name="variableName">traceReference</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
                  <stringProp name="variableName">msgID</stringProp>
                  <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
                  <stringProp name="variableName">MsgId</stringProp>
                  <stringProp name="outputFormat">M1789930/002</stringProp>
                  <stringProp name="minimumValue">002</stringProp>
                  <stringProp name="maximumValue">999</stringProp>
                  <stringProp name="randomSeed">006</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID6}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-791178532">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID6}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Reversal&quot;))).sort({createdAt:-1}).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-964491955">Type is: Payment
Msg Id is: MB${msgID6}
Sub-Type is: Reversal
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Outward Flow - Return" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="true">
            <stringProp name="variableName">msgID7</stringProp>
            <stringProp name="outputFormat">C7LOCALTESTING0000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference7</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="msgID" elementType="Argument">
                <stringProp name="Argument.name">msgID</stringProp>
                <stringProp name="Argument.value">HBLTEST2504202202</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2POutboundTransactions = database.getCollection(vars.get(&quot;P2POutboundTransactions&quot;));
vars.putObject(&quot;P2POutboundTransactions&quot;, P2POutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate Payment" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB103101271712000643&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;PK44JCMA0103923245158189&quot;,&#xd;
            &quot;name&quot;: &quot;Khurram Raza&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;WMBLPKKA&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;PK89HABB0001277901143303&quot;,&#xd;
            &quot;name&quot;: &quot;HSZSAZW IZHLLO&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${DBHost}</stringProp>
                <stringProp name="HTTPSampler.port">${paymentcorePort}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/p2ppayment</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID7}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID7}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-87675">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID7}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">4000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1158030647">Type is: Payment
Msg Id is: MB${msgID7}
Sub-Type is: Transfer
Processed By is: CoreBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">6000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference7}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID7}/007&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-12T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID7}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;MB103101271712000643&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;MB103101271712000643&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MB103101271712000643&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;023&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;023&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${DBHost}</stringProp>
                <stringProp name="HTTPSampler.port">${paymentcorePort}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID7}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1946773986">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID7}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="pacs.004 Payment Return" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;MBHBL10310127171200065&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.004.001.09&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;PACS004-NRTDC-001&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.004.001.09&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2018-01-15T10:35:40.243&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.004.001.09\&quot;&gt;&lt;PmtRtr&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID7}&lt;/MsgId&gt;&lt;CreDtTm&gt;2018-01-15T10:35:40.243&lt;/CreDtTm&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInf&gt;&lt;OrgnlMsgId&gt;MB${msgID7}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2018-01-14T10:40:40.232&lt;/OrgnlCreDtTm&gt;&lt;/OrgnlGrpInf&gt;&lt;TxInf&gt;&lt;RtrId&gt;ALFHPKKA20210915081724&lt;/RtrId&gt;&lt;OrgnlInstrId&gt;20170913-1818001&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;NOTPROVIDED&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;ABPAPKPKAXXX180217100120000001231&lt;/OrgnlTxId&gt;&lt;OrgnlIntrBkSttlmDt&gt;2018-01-14&lt;/OrgnlIntrBkSttlmDt&gt;&lt;RtrdIntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;71000&lt;/RtrdIntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2018-01-15&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; ALFHPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; HABBPKKARTG &lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;RtrRsnInf&gt;&lt;Orgtr&gt;&lt;Id&gt;&lt;OrgId&gt;&lt;AnyBIC&gt;BAHLPKPK&lt;/AnyBIC&gt;&lt;/OrgId&gt;&lt;/Id&gt;&lt;/Orgtr&gt;&lt;Rsn&gt;&lt;Prtry&gt;AC04&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Closed account number&lt;/AddtlInf&gt;&lt;/RtrRsnInf&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1000&lt;/IntrBkSttlmAmt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;/PmtTpInf&gt;&lt;Dbtr&gt;&lt;Pty&gt;&lt;Nm&gt;FHNZM TZFSZI&lt;/Nm&gt;&lt;/Pty&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK65HABB0023087900941903&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;DbtrAgtAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK65HABB0023087900941903&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAgtAcct&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; ALFHPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;CdtrAgtAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK24ALFH0031001007302500&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAgtAcct&gt;&lt;Cdtr&gt;&lt;Pty&gt;&lt;Nm&gt;CREDITOR PERSON NAME&lt;/Nm&gt;&lt;/Pty&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK24ALFH0031001007302500&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInf&gt;&lt;/PmtRtr&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DBHost}</stringProp>
            <stringProp name="HTTPSampler.port">${paymentcorePort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/004</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-req-id</stringProp>
                  <stringProp name="Header.value">${msgID7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">MB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.004 document details: \n&quot;;
msgid1 =&quot;Pacs 004 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 004 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 004 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 004 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
//isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
//vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1523457203">P2P Outbound Pacs.004 document details: 
Pacs 004 MsgID is: ${msgID7}
Pacs 004 Mode is: inbound
Pacs 004 Status is: Success
Pacs 004 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Return&quot;))).sort({createdAt:-1}).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="829193294">Type is: Payment
Msg Id is: MB${msgID7}
Sub-Type is: Return
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Title Fetch - Active Account" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - X Request ID" enabled="true">
          <stringProp name="variableName">xRequestID</stringProp>
          <stringProp name="outputFormat">REQ-UBL-000000</stringProp>
          <stringProp name="minimumValue">000000</stringProp>
          <stringProp name="maximumValue">999999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Title Fetch" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;iban&quot;: &quot;PK50HABB0023397901980203&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">3001</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/titlefetch</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">${xRequestID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">sender-participant-code</stringProp>
                <stringProp name="Header.value">JSBLPKKA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">receiver-participant-code</stringProp>
                <stringProp name="Header.value">HABBPKPK</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Sender-User-Code</stringProp>
                <stringProp name="Header.value">JSBLPKKA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-channel-id</stringProp>
                <stringProp name="Header.value">CRPL</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-980971369">&quot;statusCode&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Title Fetch Conventional" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - X Request ID" enabled="true">
          <stringProp name="variableName">xRequestID</stringProp>
          <stringProp name="outputFormat">REQ-UBL-000000</stringProp>
          <stringProp name="minimumValue">000000</stringProp>
          <stringProp name="maximumValue">999999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Title Fetch Conv" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;accountNo&quot;: &quot;PK14HABB0006717900409703&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">3001</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/titlefetchconv</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">${xRequestID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">sender-participant-code</stringProp>
                <stringProp name="Header.value">JSBLPKKA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">receiver-participant-code</stringProp>
                <stringProp name="Header.value">HABBPKPK</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Sender-User-Code</stringProp>
                <stringProp name="Header.value">JSBLPKKA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-channel-id</stringProp>
                <stringProp name="Header.value">CRPL</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-980971369">&quot;statusCode&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Bulk Title Fetch" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - X Request ID" enabled="true">
          <stringProp name="variableName">xRequestID</stringProp>
          <stringProp name="outputFormat">REQ-UBL-000000</stringProp>
          <stringProp name="minimumValue">000000</stringProp>
          <stringProp name="maximumValue">999999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Bulk-ID" elementType="Argument">
              <stringProp name="Argument.name">Bulk-ID</stringProp>
              <stringProp name="Argument.value">11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.MongoCredential;
import org.bson.Document;
import java.util.Arrays;


try
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));


//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;titleinstructions&apos;
MongoCollection&lt;Document&gt; TitleInstructions = database.getCollection(vars.get(&quot;TitleInstructions&quot;));
vars.putObject(&quot;TitleInstructions&quot;, TitleInstructions);

//Connection to &apos;titlequeues&apos;
MongoCollection&lt;Document&gt; TitleQueues = database.getCollection(vars.get(&quot;TitleQueues&quot;));
vars.putObject(&quot;TitleQueues&quot;, TitleQueues);


//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bulk Title Fetch" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;accountNumbers&quot;: [&#xd;
       &quot;03008030248&quot;,&#xd;
       &quot;23057903379303&quot;,&#xd;
       &quot;0300&quot;&#xd;
   ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">31000</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/titlefetch/bulk/request/${Bulk-ID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Request-ID</stringProp>
                <stringProp name="Header.value">${xRequestID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">sender-participant-code</stringProp>
                <stringProp name="Header.value">JSBLPKKA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">receiver-participant-code</stringProp>
                <stringProp name="Header.value">HABBPKPK</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Sender-User-Code</stringProp>
                <stringProp name="Header.value">JSBLPKKA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-channel-id</stringProp>
                <stringProp name="Header.value">CRPL</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);

Document document = Instructions.find(and(eq(&quot;request.bulkId&quot;,&quot;${Bulk-ID}&quot;),eq(&quot;type&quot;,&quot;titlefetch&quot;))).sort({createdAt:-1}).last();
bulk_id = &quot;BulkID is: &quot;+&quot;${Bulk-ID}&quot;.toString()+&quot;\n\n&quot;;
acc_nos = &quot;Account Numbers are: &quot;+document.get(&quot;request&quot;).getAt(&quot;accountNumbers&quot;).toString()+&quot;\n&quot;;
type = &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

//Get the object id 
instructionsId = document.getObjectId(&quot;_id&quot;);
//Putting in a variable:
vars.putObject(&quot;instructionsId&quot;, instructionsId);

//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;accountNumbers&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; accnum = new ArrayList&lt;String&gt;(); 


int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{

		//Getting Account Nos
		String account = document.get(&quot;request&quot;).get(&quot;accountNumbers&quot;).getAt(i).toString();
		accnum.add(account);
		log.info(accnum.toString());
		}
}

else 
{
	log.info(&quot;Array is empty&quot;);
	}

// End

//Array of account numbers
vars.putObject(&quot;accnum&quot;, accnum);


Thread. sleep(1000)
return bulk_id+mode+status+stage+acc_nos;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="265646624">BulkID is: ${Bulk-ID}

Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="titleinstructions" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; TitleInstructions = vars.getObject(&quot;TitleInstructions&quot;);

//Get the object id of titlefetch
def instructionsId = vars.getObject(&quot;instructionsId&quot;);

// Getting array for account nos
String [] accnum = vars.getObject(&quot;accnum&quot;);

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; titleinstrIds = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int count = 0;
count = accnum.size();
if (count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		Document document = TitleInstructions.find(and(eq(&quot;instructionId&quot;,instructionsId),eq(&quot;request&quot;,accnum[i]))).last();
		stat_var=document.get(&quot;status&quot;).toString();
		if (stat_var == &quot;Failure&quot;){
			response=document.get(&quot;response&quot;).get(&quot;description&quot;).toString();
			}
		else{
			response=document.get(&quot;response&quot;).toString();
		}
		String stat = &quot;\n\n&quot;+&quot;Status of Account No &quot;+accnum[i]+&quot; is: &quot;+stat_var+&quot; and response is: &quot;+response;
		objid = document.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		titleinstrIds.add(objid);
		
	}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

vars.putObject(&quot;titleinstrIds&quot;, titleinstrIds);


Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-202516509">Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">stat_var</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="titlequeues" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; TitleQueues = vars.getObject(&quot;TitleQueues&quot;);

// Getting array for account nos
String [] accnum = vars.getObject(&quot;accnum&quot;);

// Getting array of titleinstructionIds
String [] titleinstrIds = vars.getObject(&quot;titleinstrIds&quot;);

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int count = 0;
count = titleinstrIds.size();
if (count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		Document document = TitleQueues.find(eq(&quot;titleInstructionId&quot;,new ObjectId(titleinstrIds[i]))).last();
		stat_var = document.get(&quot;status&quot;).toString();
		String stat = &quot;\n&quot;+&quot;Status of Account No &quot;+accnum[i]+&quot; is: &quot;+stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);


Thread. sleep(1000)
return statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="909208366">Processed</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">stat_var</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);

//Get the object id of titlefetch
def instructionsId = vars.getObject(&quot;instructionsId&quot;);

Document document = Instructions.find(and(eq(&quot;refInstructionId&quot;,instructionsId),eq(&quot;type&quot;,&quot;titleStatus&quot;))).last();
type = &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Count of successful title fetch
count = 0
count = &quot;Total Accounts for successful title fetch: &quot; + document.get(&quot;request&quot;).get(&quot;ibans&quot;).size();


Thread. sleep(1000)
return type+mode+status+count;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1002701682">Mode is: outbound
Status is: Success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M Inward Flow - Success" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
          <stringProp name="variableName">msgID</stringProp>
          <stringProp name="outputFormat">T7TestMsgID00000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="outputFormat">T7_TestMsgID00000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed">9695</stringProp>
          <stringProp name="variableName">traceReference</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CreditorIBAN" elementType="Argument">
              <stringProp name="Argument.name">CreditorIBAN</stringProp>
              <stringProp name="Argument.value">PK32HABB0000477948641001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DebtorIBAN" elementType="Argument">
              <stringProp name="Argument.name">DebtorIBAN</stringProp>
              <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CreditorBank" elementType="Argument">
              <stringProp name="Argument.name">CreditorBank</stringProp>
              <stringProp name="Argument.value">JSBLPKKA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="InstructionId" elementType="Argument">
              <stringProp name="Argument.name">InstructionId</stringProp>
              <stringProp name="Argument.value">Inst-2023-001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed">9695</stringProp>
          <stringProp name="variableName">traceReference1</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="false">
          <stringProp name="variableName">msgID</stringProp>
          <stringProp name="outputFormat">C1JSBLPKKA9087450000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CreditorName" elementType="Argument">
              <stringProp name="Argument.name">CreditorName</stringProp>
              <stringProp name="Argument.value">ZOHAIB ALI KHAN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CreditorIBAN" elementType="Argument">
              <stringProp name="Argument.name">CreditorIBAN</stringProp>
              <stringProp name="Argument.value">PK32HABB0000477948641001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DebitorName" elementType="Argument">
              <stringProp name="Argument.name">DebitorName</stringProp>
              <stringProp name="Argument.value">ABC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DebitorIBAN" elementType="Argument">
              <stringProp name="Argument.name">DebitorIBAN</stringProp>
              <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2mhostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402202&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:43Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 \&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/CreDtTm&gt;&lt;BtchBookg&gt;false&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;${InstructionId}&lt;/InstrId&gt;&lt;EndToEndId&gt;${InstructionId}&lt;/EndToEndId&gt;&lt;TxId&gt;${InstructionId}&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;021&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;${DebitorName}&lt;/Nm&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${DebitorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;${CreditorName}&lt;/Nm&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${CreditorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;RmtInf&gt;&lt;Ustrd&gt;testing1&lt;/Ustrd&gt;&lt;/RmtInf&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2m/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message = &quot;P2M Inbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
paymentTraceId =&quot;Pacs 008 Payment Trace Id is: &quot;+ document.get(&quot;paymentTraceId&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot; + document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot; + document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot; +document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2M Outbound Pacs.002 document details: \n&quot;;
msgID2=&quot;Pacs 002 MsgID is: &quot;+ document2.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
	 
return message+msgId+paymentTraceId+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2+msgID2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1077348186">P2M Inbound Pacs.008 document details: 
Pacs 008 MsgID is: ${msgID}
Pacs 008 Payment Trace Id is: ${traceReference}
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentReceived

P2M Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
response =&quot;Response is: \n&quot;+ document.get(&quot;response&quot;).toString()+&quot;\n\n&quot;;
	 
return type+msgID+procsby+status+response;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-540776971">Type is: Validate
Msg Id is: ${msgID}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402203&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:44Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}/001&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:44.854 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178993071/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${InstructionId}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${InstructionId}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;${InstructionId}&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;284&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1.0&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;), eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message = &quot;P2M Inbound Pacs.008 document details: \n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;

Thread. sleep(10000);

// Pacs 002 Inbound
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2;
//return message1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1894210137">P2M Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: PaymentAccepted

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
response =&quot;Response is: \n&quot;+ document.get(&quot;response&quot;).toString()+&quot;\n\n&quot;;
	 
return type+msgID+procsby+status+response;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1987902521">Type is: Payment
Msg Id is: ${msgID}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M Outward - Success Scenerio" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">T1TestMsgID00000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">T1_TestMsgID00000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebtorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebtorIBAN</stringProp>
                <stringProp name="Argument.value">PK32HABB0000477948641001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorBank" elementType="Argument">
                <stringProp name="Argument.name">CreditorBank</stringProp>
                <stringProp name="Argument.value">JSBLPKKA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2MOutboundTransactions = database.getCollection(vars.get(&quot;P2MOutboundTransactions&quot;));
vars.putObject(&quot;P2MOutboundTransactions&quot;, P2MOutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB1031012717120060645&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;instrForCdtrBank&quot;: &quot;ABC&quot;,&#xd;
        &quot;rmtInf&quot;: &quot;XYZ&quot;,&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${CreditorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;KHURRAM RAZA&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;merchantName&quot;: &quot;COMPANY CO.&quot;,&#xd;
                &quot;merchantChannel&quot;: &quot;400&quot;,&#xd;
                &quot;storeLabel&quot;: &quot;SOME BRANCH&quot;,&#xd;
                &quot;website&quot;: &quot;www.merchant.pk&quot;,&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520420&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-123&quot;,&#xd;
                &quot;email&quot;: &quot;payee@karachi.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;terminalNumber&quot;: &quot;LABEL&quot;,&#xd;
                &quot;address&quot;: &quot;Free Format Address&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;taxId&quot;: &quot;733738292928PK&quot;,&#xd;
            &quot;referenceInfo&quot;: {&#xd;
                &quot;code&quot;: &quot;INVN&quot;,&#xd;
                &quot;value&quot;: &quot;PK7822222UIH88891&quot;&#xd;
            },&#xd;
            &quot;merchantId&quot;: &quot;229999999&quot;,&#xd;
            &quot;merchantCategoryCode&quot;: &quot;5411&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;${CreditorBank}&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${DebtorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;MUHAMMAD OMER&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520410&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-3055520419&quot;,&#xd;
                &quot;email&quot;: &quot;payer@raast.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;street&quot;: &quot;GREEN STREET&quot;,&#xd;
                &quot;building&quot;: &quot;1&quot;,&#xd;
                &quot;room&quot;: &quot;2&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;customerLabel&quot;: &quot;BLK&quot;,&#xd;
            &quot;loyaltyNumber&quot;: &quot;MU303&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/payment/p2m</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId= document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


return message+msgId+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-489724240">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def pacs008_ObjId= vars.getObject(&quot;pacs008_ObjId&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
direction = &quot;Direction is: &quot;+document.get(&quot;direction&quot;).toString()+&quot;\n&quot;;
subType = &quot;Sub Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+direction+subType+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-979907318">Type is: Payment
Msg Id is: MB${msgID}
Direction is: FROM_DEBITOR_ACCOUNT_TO_SETLLEMENT_ACCOUNT
Sub Type is: Transfer
Processed By is: CoreBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
     &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2023-10-25T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2023-10-25T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/00&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${msgID}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MB103101271712000644&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2023-25-10&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;PMCT&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status=&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+msgId+mode+status+stage+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1191031705">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M Outward - Manual Return Scenerio" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">T1TestMsgID00000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">T1_TestMsgID00000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebtorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebtorIBAN</stringProp>
                <stringProp name="Argument.value">PK32HABB0000477948641001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorBank" elementType="Argument">
                <stringProp name="Argument.name">CreditorBank</stringProp>
                <stringProp name="Argument.value">JSBLPKKA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2MOutboundTransactions = database.getCollection(vars.get(&quot;P2MOutboundTransactions&quot;));
vars.putObject(&quot;P2MOutboundTransactions&quot;, P2MOutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB1031012717120060645&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;instrForCdtrBank&quot;: &quot;ABC&quot;,&#xd;
        &quot;rmtInf&quot;: &quot;XYZ&quot;,&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${CreditorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;KHURRAM RAZA&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;merchantName&quot;: &quot;COMPANY CO.&quot;,&#xd;
                &quot;merchantChannel&quot;: &quot;400&quot;,&#xd;
                &quot;storeLabel&quot;: &quot;SOME BRANCH&quot;,&#xd;
                &quot;website&quot;: &quot;www.merchant.pk&quot;,&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520420&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-123&quot;,&#xd;
                &quot;email&quot;: &quot;payee@karachi.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;terminalNumber&quot;: &quot;LABEL&quot;,&#xd;
                &quot;address&quot;: &quot;Free Format Address&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;taxId&quot;: &quot;733738292928PK&quot;,&#xd;
            &quot;referenceInfo&quot;: {&#xd;
                &quot;code&quot;: &quot;INVN&quot;,&#xd;
                &quot;value&quot;: &quot;PK7822222UIH88891&quot;&#xd;
            },&#xd;
            &quot;merchantId&quot;: &quot;229999999&quot;,&#xd;
            &quot;merchantCategoryCode&quot;: &quot;5411&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;${CreditorBank}&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${DebtorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;MUHAMMAD OMER&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520410&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-3055520419&quot;,&#xd;
                &quot;email&quot;: &quot;payer@raast.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;street&quot;: &quot;GREEN STREET&quot;,&#xd;
                &quot;building&quot;: &quot;1&quot;,&#xd;
                &quot;room&quot;: &quot;2&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;customerLabel&quot;: &quot;BLK&quot;,&#xd;
            &quot;loyaltyNumber&quot;: &quot;MU303&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/payment/p2m</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Outbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+ document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId= document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


return message+msgId+mode+status+stage+paymentFlowStage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1139339641">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentPosting</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def pacs008_ObjId= vars.getObject(&quot;pacs008_ObjId&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
direction = &quot;Direction is: &quot;+document.get(&quot;direction&quot;).toString()+&quot;\n&quot;;
subType = &quot;Sub Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
response =&quot;Response is: \n&quot;+ document.get(&quot;response&quot;).toString()+&quot;\n\n&quot;;
	 
return type+msgID+direction+subType+procsby+status+response;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-979907318">Type is: Payment
Msg Id is: MB${msgID}
Direction is: FROM_DEBITOR_ACCOUNT_TO_SETLLEMENT_ACCOUNT
Sub Type is: Transfer
Processed By is: CoreBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
     &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2023-10-25T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2023-10-25T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/00&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${msgID}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MB103101271712000644&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2023-25-10&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;PMCT&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Outbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status=&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+ document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


// Pacs 002 Inbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+msgId+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-982225927">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: PaymentAccepted

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="pacs.004 Payment Return" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.004.001.09&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;PACS004-NRTDC-001&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.004.001.09&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2018-01-15T10:35:40.243&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.004.001.09\&quot;&gt;&lt;PmtRtr&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;RTN${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2018-01-15T10:35:40.243&lt;/CreDtTm&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInf&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2018-01-14T10:40:40.232&lt;/OrgnlCreDtTm&gt;&lt;/OrgnlGrpInf&gt;&lt;TxInf&gt;&lt;RtrId&gt;${msgID}01&lt;/RtrId&gt;&lt;OrgnlInstrId&gt;20170913-1818001&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;NOTPROVIDED&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;${msgID}01&lt;/OrgnlTxId&gt;&lt;OrgnlIntrBkSttlmDt&gt;2018-01-14&lt;/OrgnlIntrBkSttlmDt&gt;&lt;RtrdIntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1&lt;/RtrdIntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2018-01-15&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; ALFHPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; HABBPKKARTG &lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;RtrRsnInf&gt;&lt;Orgtr&gt;&lt;Id&gt;&lt;OrgId&gt;&lt;AnyBIC&gt;BAHLPKPK&lt;/AnyBIC&gt;&lt;/OrgId&gt;&lt;/Id&gt;&lt;/Orgtr&gt;&lt;Rsn&gt;&lt;Prtry&gt;AC04&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Closed account number&lt;/AddtlInf&gt;&lt;/RtrRsnInf&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;/PmtTpInf&gt;&lt;Dbtr&gt;&lt;Pty&gt;&lt;Nm&gt;FHNZM TZFSZI&lt;/Nm&gt;&lt;/Pty&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK84BAHL1063008100002401&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;DbtrAgtAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK84BAHL1063008100002401&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAgtAcct&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; ALFHPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;CdtrAgtAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK84BAHL1063008100002401&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAgtAcct&gt;&lt;Cdtr&gt;&lt;Pty&gt;&lt;Nm&gt;CREDITOR PERSON NAME&lt;/Nm&gt;&lt;/Pty&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK84BAHL1063008100002401&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInf&gt;&lt;/PmtRtr&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DBHost}</stringProp>
            <stringProp name="HTTPSampler.port">${paymentcorePort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2m/iso/pacs/004</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-req-id</stringProp>
                  <stringProp name="Header.value">${msgID7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">MB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;

try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 004 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;RTN${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message = &quot;P2M Outbound - Pacs.004 document details:\n&quot;;
msgid =&quot;Pacs 004 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 004 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 004 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 004 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Pacs 008 Outbound - Payment Flow Stage Updated 
Document document1 = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message1 = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1=&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage1 = &quot;Pacs 008 Payment Flow Stage is: &quot;+ document1.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;

return message+msgid+mode+status+stage+message1+msgId1+mode1+status1+stage1+paymentFlowStage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1480948334">P2M Outbound - Pacs.004 document details:
Pacs 004 MsgID is: RTN${msgID}
Pacs 004 Mode is: inbound
Pacs 004 Status is: Success
Pacs 004 Stage is: Completed

P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: ReturnProcessed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);


// Getting the object id of P2Misomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Return&quot;))).sort({createdAt:-1}).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
response =&quot;Response is: \n&quot;+ document.get(&quot;response&quot;).toString()+&quot;\n\n&quot;;
	 
return type+msgID+subtype+procsby+status+response;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-286387971">Type is: Payment
Msg Id is: MB${msgID}
Sub-Type is: Return
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Inward (BB - 2 Active Acc)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable - batchInitiator" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="batchInitiator" elementType="Argument">
              <stringProp name="Argument.name">batchInitiator</stringProp>
              <stringProp name="Argument.value">CDCPKKAA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="true">
          <stringProp name="variableName">batchID</stringProp>
          <stringProp name="outputFormat">C6HABBPKKA2310200000A0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereferene" enabled="true">
          <stringProp name="variableName">traceref</stringProp>
          <stringProp name="outputFormat">HABBPKKA2310200000B0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Sequential Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;inboundinstructions&apos;
MongoCollection&lt;Document&gt; InboundInstructions = database.getCollection(vars.get(&quot;InboundInstructions&quot;));
vars.putObject(&quot;InboundInstructions&quot;, InboundInstructions);

//Connection to &apos;instructionqueues&apos;
MongoCollection&lt;Document&gt; InstructionQueues = database.getCollection(vars.get(&quot;InstructionQueues&quot;));
vars.putObject(&quot;InstructionQueues&quot;, InstructionQueues);

//Connection to &apos;batches&apos;
MongoCollection&lt;Document&gt; Batches = database.getCollection(vars.get(&quot;Batches&quot;));
vars.putObject(&quot;Batches&quot;, Batches);

//Connection to &apos;cbsrequestqueues&apos;
MongoCollection&lt;Document&gt; CbsRequestQueues = database.getCollection(vars.get(&quot;CbsRequestQueues&quot;));
vars.putObject(&quot;CbsRequestQueues&quot;, CbsRequestQueues);

//Connection to &apos;cbsresponsequeues&apos;
MongoCollection&lt;Document&gt; CbsResponseQueues = database.getCollection(vars.get(&quot;CbsResponseQueues&quot;));
vars.putObject(&quot;CbsResponseQueues&quot;, CbsResponseQueues);

//Connection to &apos;isoinboundtransactions&apos;
MongoCollection&lt;Document&gt; IsoInboundTransactions = database.getCollection(vars.get(&quot;IsoInboundTransactions&quot;));
vars.putObject(&quot;IsoInboundTransactions&quot;, IsoInboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);


//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to database&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pre-Validation Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;batchInitiator&quot;: &quot;${batchInitiator}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-01-25T09:04:58.495Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-1&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK55HABB0164030049946271&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 1&quot;&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-2&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK55HABB0164030049946271&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 2&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instruction/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(40000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


Document document = Instructions.find(and(eq(&quot;request.batchId&quot;,&quot;${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;request&quot;).get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
batch_initiator = &quot;Batch Initiator is: &quot;+document.get(&quot;request&quot;).get(&quot;batchInitiator&quot;).toString()+&quot;\n&quot;;
type = &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Getting it&apos;s object id and storing in var
instrId = document.getObjectId(&quot;_id&quot;);
vars.putObject(&quot;instrId&quot;, instrId);

//Loop for all the instructions in a batch 
// Start //

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; InstructionIds_list = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; instr_list = new ArrayList&lt;String&gt;(); // for print

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		String instr = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		InstructionIds_list.add(instr);
		String instrcs = &quot;\n&quot;+&quot;Instruction &quot;+ i + &quot; is: &quot; +instr;
		instr_list.add(instrcs);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in validate document recieved&quot;);
	}

// End

vars.putObject(&quot;InstructionIds_list&quot;, InstructionIds_list);
vars.putObject(&quot;instrId&quot;, instrId);

Thread. sleep(1000)
return batch_id+batch_initiator+type+mode+status+stage+instr_list;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="430158596">BatchID is: ${batchID}
Batch Initiator is: ${batchInitiator}
Type is: validate
Mode is: inbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="inboundinstructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; InboundInstructions = vars.getObject(&quot;InboundInstructions&quot;);

// Getting the object id from &apos;instructions&apos;
def instrId = vars.getObject(&quot;instrId&quot;);

Document document = InboundInstructions.find(eq(&quot;instructionId&quot;,instrId)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;


//Get the object id and store in var
inbinstrID = document.getObjectId(&quot;_id&quot;);
vars.putObject(&quot;inbinstrID&quot;, inbinstrID);

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] InstructionIds_list = vars.getObject(&quot;InstructionIds_list&quot;);


// Create an ArrayList object &apos;inboundinstrId&apos;
ArrayList&lt;String&gt; inboundinstrIds = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = InstructionIds_list.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = InboundInstructions.find(and(eq(&quot;instructionId&quot;,instrId),eq(&quot;request.instructionId&quot;,InstructionIds_list[i]))).last();
		stat_var = document.get(&quot;status&quot;).toString();
		host_var = document.get(&quot;host&quot;).toString();
		responseMsg = document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Response_Message&quot;).toString();
		String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+InstructionIds_list[i]+&quot;): host is &quot;+host_var+&quot; , Status is &quot;+stat_var+ &quot; , Response Message is &quot; +responseMsg;
		objid = document1.getObjectId(&quot;_id&quot;);
		statlist.add(result);
		inboundinstrIds.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;inbinstrID&quot;, inbinstrID);
vars.putObject(&quot;inboundinstrIds&quot;, inboundinstrIds);

//Put it in a variable for Assertion:
vars.putObject(&quot;stat_var&quot;, stat_var);
vars.putObject(&quot;host_var&quot;, host_var);


Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2055364939">BranchlessBanking</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">host_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="362091064">[
host is BranchlessBanking , Status is Success , Response Message is Success, 
host is BranchlessBanking , Status is Success , Response Message is Success]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructionqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(20000);

MongoCollection&lt;Document&gt; InstructionQueues = vars.getObject(&quot;InstructionQueues&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
//def inbinstrID = vars.getObject(&quot;inbinstrID&quot;);
//
//Document document = InstructionQueues.find(eq(&quot;instructionId&quot;,inbinstrID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] inboundinstrIds = vars.getObject(&quot;inboundinstrIds&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();

int instr_count = inboundinstrIds.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = InstructionQueues.find(eq(&quot;instructionId&quot;,new ObjectId(inboundinstrIds[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;\n&quot;+&quot;Status of Instruction &quot; + i + &quot; is: &quot;+ stat_var;
		statlist.add(stat);
	}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End
//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="24097631">[
Status of Instruction 0 is: Processed, 
Status of Instruction 1 is: Processed]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {


MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);

// Getting the object id from &apos;instructions&apos;
def instrId = vars.getObject(&quot;instrId&quot;);

Document document = Instructions.find(and(eq(&quot;refInstructionId&quot;,instrId),eq(&quot;type&quot;,&quot;status&quot;))).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
batch_initiator = &quot;Batch Initiator is: &quot;+document.get(&quot;request&quot;).get(&quot;batchInitiator&quot;).toString()+&quot;\n&quot;;
type = &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n\n&quot;;

//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		stat_var = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String instr = &quot;\n&quot;+&quot;Status for Instruction &quot;+i+&quot; is: &quot; + stat_var;
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+batch_initiator+type+mode+status+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="472710037">[
Status for Instruction 0 is: Processed, 
Status for Instruction 1 is: Processed]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1045910044">BatchID is: ${batchID}
Batch Initiator is: ${batchInitiator}
Type is: status
Mode is: outbound
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+mode+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="57348383">State is: PRE-VALIDATION-REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=&apos;urn:cma:stp:xsd:stp.1.0&apos;&gt; &lt;Body&gt; &lt;AppHdr xmlns=&apos;urn:iso:std:iso:20022:tech:xsd:head.001.001.01&apos;&gt; &lt;Fr&gt; &lt;FIId&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/FIId&gt; &lt;/Fr&gt; &lt;To&gt; &lt;FIId&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/FIId&gt; &lt;/To&gt; &lt;BizMsgIdr&gt;16670217&lt;/BizMsgIdr&gt; &lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt; &lt;CreDt&gt;2022-12-20T12:58:10Z&lt;/CreDt&gt; &lt;Prty&gt;0100&lt;/Prty&gt; &lt;Sgntr&gt; &lt;ds:Signature xmlns:ds=&apos;http://www.w3.org/2000/09/xmldsig#&apos;&gt; &lt;ds:SignedInfo&gt; &lt;ds:CanonicalizationMethod Algorithm=&apos;http://www.w3.org/2001/10/xml-exc-c14n#&apos;/&gt; &lt;ds:SignatureMethod Algorithm=&apos;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&apos;/&gt; &lt;ds:Reference URI=&apos;#_b75e493a-bacd-44b9-94ac-c2ab706d272d&apos;&gt; &lt;ds:Transforms&gt; &lt;ds:Transform Algorithm=&apos;http://www.w3.org/2001/10/xml-exc-c14n#&apos;/&gt; &lt;/ds:Transforms&gt; &lt;ds:DigestMethod Algorithm=&apos;http://www.w3.org/2001/04/xmlenc#sha256&apos;/&gt; &lt;ds:DigestValue&gt;jAa3J3LODGNzaACCj1sxOLA3Y2/ZGHCKmuYBSei1ca4=&lt;/ds:DigestValue&gt; &lt;/ds:Reference&gt; &lt;ds:Reference Type=&apos;http://uri.etsi.org/01903/v1.3.2#SignedProperties&apos; URI=&apos;#_bc5f12eb-48c6-4288-8d90-7712a546160f-signedprops&apos;&gt; &lt;ds:Transforms&gt; &lt;ds:Transform Algorithm=&apos;http://www.w3.org/2001/10/xml-exc-c14n#&apos;/&gt; &lt;/ds:Transforms&gt; &lt;ds:DigestMethod Algorithm=&apos;http://www.w3.org/2001/04/xmlenc#sha256&apos;/&gt; &lt;ds:DigestValue&gt;SG1wtLYTxwmg8OMJSwW+ZJi/61BeghUQ91ozcxzP2Ks=&lt;/ds:DigestValue&gt; &lt;/ds:Reference&gt; &lt;ds:Reference&gt; &lt;ds:Transforms&gt; &lt;ds:Transform Algorithm=&apos;http://www.w3.org/2001/10/xml-exc-c14n#&apos;/&gt; &lt;/ds:Transforms&gt; &lt;ds:DigestMethod Algorithm=&apos;http://www.w3.org/2001/04/xmlenc#sha256&apos;/&gt; &lt;ds:DigestValue&gt;B0YQSRIZ0aKcgIEezpov/rnhX4/tWCLsnRa0YVaonH0=&lt;/ds:DigestValue&gt; &lt;/ds:Reference&gt; &lt;/ds:SignedInfo&gt; &lt;ds:SignatureValue&gt;Oysf8QaL+06AGALbF6fTEbKHBIRclzL7YrMf53HFgSQ5HFdRU52tVvb2BKGDJb8tEWFk9vPssspQ ZMhbrmO9eAwFb+YIwpu4rFWu3Lt7HP+jhJQLK/NFurPShXuPu7Rn8+oKiIu6/08SbxNUoaFFxYvV irtBj5M9cCfULpGxOYWwrcyKQm9JWkQS+zL5rq8FV/LGqzMbbqWohVIbZdwwmvGzM1nWUSD5uzML E5fb7MLeiDo/wibDsd/vfXn+LRox+Wtk5o+gc6PxngNcabbxYqblJYlMSdiMnQoXGyYuTSnksAks sJ5E+gjWQuU5hNwTma1yrKQyUJUGBajPuU2Q3g==&lt;/ds:SignatureValue&gt; &lt;ds:KeyInfo Id=&apos;_b75e493a-bacd-44b9-94ac-c2ab706d272d&apos;&gt; &lt;ds:X509Data&gt; &lt;ds:X509IssuerSerial&gt; &lt;ds:X509IssuerName&gt;CN=test-TST-AD-CA, DC=test, DC=mpg, DC=local&lt;/ds:X509IssuerName&gt; &lt;ds:X509SerialNumber&gt;2408480482046566660373395480477785912053334132&lt;/ds:X509SerialNumber&gt; &lt;/ds:X509IssuerSerial&gt; &lt;/ds:X509Data&gt; &lt;/ds:KeyInfo&gt; &lt;ds:Object&gt; &lt;xades:QualifyingProperties xmlns:xades=&apos;http://uri.etsi.org/01903/v1.3.2#&apos;&gt; &lt;xades:SignedProperties Id=&apos;_bc5f12eb-48c6-4288-8d90-7712a546160f-signedprops&apos;&gt; &lt;xades:SignedSignatureProperties&gt; &lt;xades:SigningTime&gt;2022-12-20T17:58:10+05:00&lt;/xades:SigningTime&gt; &lt;/xades:SignedSignatureProperties&gt; &lt;/xades:SignedProperties&gt; &lt;/xades:QualifyingProperties&gt; &lt;/ds:Object&gt; &lt;/ds:Signature&gt; &lt;/Sgntr&gt; &lt;/AppHdr&gt; &lt;Document xmlns=&apos;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08&apos;&gt; &lt;FIToFICstmrCdtTrf&gt; &lt;GrpHdr&gt; &lt;MsgId&gt;${batchID}&lt;/MsgId&gt; &lt;CreDtTm&gt;2022-12-20T17:55:56.372Z&lt;/CreDtTm&gt; &lt;BtchBookg&gt;true&lt;/BtchBookg&gt; &lt;NbOfTxs&gt;2&lt;/NbOfTxs&gt; &lt;TtlIntrBkSttlmAmt Ccy=&apos;PKR&apos;&gt;2.0&lt;/TtlIntrBkSttlmAmt&gt; &lt;IntrBkSttlmDt&gt;2022-12-20&lt;/IntrBkSttlmDt&gt; &lt;SttlmInf&gt; &lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt; &lt;/SttlmInf&gt; &lt;/GrpHdr&gt; &lt;CdtTrfTxInf&gt; &lt;PmtId&gt; &lt;InstrId&gt;TEST-02&lt;/InstrId&gt; &lt;EndToEndId&gt;TEST-02&lt;/EndToEndId&gt; &lt;TxId&gt;TEST-02&lt;/TxId&gt; &lt;/PmtId&gt; &lt;PmtTpInf&gt; &lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt; &lt;SvcLvl&gt; &lt;Prtry&gt;0100&lt;/Prtry&gt; &lt;/SvcLvl&gt; &lt;LclInstrm&gt; &lt;Prtry&gt;CSDC&lt;/Prtry&gt; &lt;/LclInstrm&gt; &lt;CtgyPurp&gt; &lt;Prtry&gt;027&lt;/Prtry&gt; &lt;/CtgyPurp&gt; &lt;/PmtTpInf&gt; &lt;IntrBkSttlmAmt Ccy=&apos;PKR&apos;&gt;1.0&lt;/IntrBkSttlmAmt&gt; &lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt; &lt;InstgAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/InstgAgt&gt; &lt;InstdAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/InstdAgt&gt; &lt;Dbtr&gt; &lt;Nm&gt;CDC&lt;/Nm&gt; &lt;/Dbtr&gt; &lt;DbtrAcct&gt; &lt;Id&gt; &lt;Othr&gt; &lt;Id&gt;123456789&lt;/Id&gt; &lt;/Othr&gt; &lt;/Id&gt; &lt;/DbtrAcct&gt; &lt;DbtrAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/DbtrAgt&gt; &lt;CdtrAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/CdtrAgt&gt; &lt;Cdtr&gt; &lt;Nm&gt;MUHUMMAD KASHIF KHAN&lt;/Nm&gt; &lt;Id&gt; &lt;PrvtId&gt; &lt;Othr&gt; &lt;Id&gt;8855960000016&lt;/Id&gt; &lt;SchmeNm&gt; &lt;Prtry&gt;CNIC&lt;/Prtry&gt; &lt;/SchmeNm&gt; &lt;/Othr&gt; &lt;/PrvtId&gt; &lt;/Id&gt; &lt;/Cdtr&gt; &lt;CdtrAcct&gt; &lt;Id&gt; &lt;Othr&gt; &lt;Id&gt;PK55HABB0164030049946271&lt;/Id&gt; &lt;/Othr&gt; &lt;/Id&gt; &lt;/CdtrAcct&gt; &lt;InstrForCdtrAgt&gt; &lt;InstrInf&gt;Dividend&lt;/InstrInf&gt; &lt;/InstrForCdtrAgt&gt; &lt;Purp&gt; &lt;Prtry&gt;027&lt;/Prtry&gt; &lt;/Purp&gt; &lt;RmtInf&gt; &lt;Ustrd&gt;JS-DCR-D-23&lt;/Ustrd&gt; &lt;/RmtInf&gt; &lt;/CdtTrfTxInf&gt; &lt;CdtTrfTxInf&gt; &lt;PmtId&gt; &lt;InstrId&gt;TEST-03&lt;/InstrId&gt; &lt;EndToEndId&gt;TEST-03&lt;/EndToEndId&gt; &lt;TxId&gt;TEST-03&lt;/TxId&gt; &lt;/PmtId&gt; &lt;PmtTpInf&gt; &lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt; &lt;SvcLvl&gt; &lt;Prtry&gt;0100&lt;/Prtry&gt; &lt;/SvcLvl&gt; &lt;LclInstrm&gt; &lt;Prtry&gt;CSDC&lt;/Prtry&gt; &lt;/LclInstrm&gt; &lt;CtgyPurp&gt; &lt;Prtry&gt;027&lt;/Prtry&gt; &lt;/CtgyPurp&gt; &lt;/PmtTpInf&gt; &lt;IntrBkSttlmAmt Ccy=&apos;PKR&apos;&gt;1.0&lt;/IntrBkSttlmAmt&gt; &lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt; &lt;InstgAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/InstgAgt&gt; &lt;InstdAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/InstdAgt&gt; &lt;Dbtr&gt; &lt;Nm&gt;CDC&lt;/Nm&gt; &lt;/Dbtr&gt; &lt;DbtrAcct&gt; &lt;Id&gt; &lt;Othr&gt; &lt;Id&gt;123456789&lt;/Id&gt; &lt;/Othr&gt; &lt;/Id&gt; &lt;/DbtrAcct&gt; &lt;DbtrAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/DbtrAgt&gt; &lt;CdtrAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/CdtrAgt&gt; &lt;Cdtr&gt; &lt;Nm&gt;MUHUMMAD KASHIF KHAN&lt;/Nm&gt; &lt;Id&gt; &lt;PrvtId&gt; &lt;Othr&gt; &lt;Id&gt;8855960000016&lt;/Id&gt; &lt;SchmeNm&gt; &lt;Prtry&gt;CNIC&lt;/Prtry&gt; &lt;/SchmeNm&gt; &lt;/Othr&gt; &lt;/PrvtId&gt; &lt;/Id&gt; &lt;/Cdtr&gt; &lt;CdtrAcct&gt; &lt;Id&gt; &lt;Othr&gt; &lt;Id&gt;PK55HABB0164030049946271&lt;/Id&gt; &lt;/Othr&gt; &lt;/Id&gt; &lt;/CdtrAcct&gt; &lt;InstrForCdtrAgt&gt; &lt;InstrInf&gt;Dividend&lt;/InstrInf&gt; &lt;/InstrForCdtrAgt&gt; &lt;Purp&gt; &lt;Prtry&gt;027&lt;/Prtry&gt; &lt;/Purp&gt; &lt;RmtInf&gt; &lt;Ustrd&gt;JS-DCR-D-23&lt;/Ustrd&gt; &lt;/RmtInf&gt; &lt;/CdtTrfTxInf&gt; &lt;/FIToFICstmrCdtTrf&gt; &lt;/Document&gt; &lt;/Body&gt; &lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(40000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;batchId&quot;).toString()+&quot;\n\n&quot;;
type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

//Getting the object id and storing in var
isoID = document.getObjectId(&quot;_id&quot;);
vars.putObject(&quot;isoID&quot;, isoID);

//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object to store Instruction Ids
ArrayList&lt;String&gt; instr_Ids = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;).getAt(i).get(&quot;PmtId&quot;).get(&quot;InstrId&quot;).get(&quot;_text&quot;).toString();
		instr_Ids.add(inst);
		log.info(instr_Ids.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty&quot;);
	}

// End



/*
//TYPE PACS.002
Document document1 = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID}&quot;), eq(&quot;refIsoMessageId&quot;,isoID), eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;))).last();
type2= &quot;Type is: &quot;+document1.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode2= &quot;Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status2= &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2= &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;
//stat_txt2= &quot;Type Pacs.002 Status Text is: &quot;+document1.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).getAt(0).get(&quot;TxSts&quot;).get(&quot;_text&quot;).toString();

//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
stat_txt = document1.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(stat_txt); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; stat_txt2 = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		stat_var=document1.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).getAt(i).get(&quot;TxSts&quot;).get(&quot;_text&quot;).toString();
		String stat_txt1 = &quot;\n&quot;+&quot;Status Text for Instruction &quot;+i+&quot; is: &quot;+stat_var;
		stat_txt2.add(stat_txt1);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

*/
vars.putObject(&quot;instr_Ids&quot;, instr_Ids);

return batch_id+type+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1965304567">Type is: pacs.008.001.08
Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isoinboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(20000);

MongoCollection&lt;Document&gt; IsoInboundTransactions = vars.getObject(&quot;IsoInboundTransactions&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoInboundTransactions.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;transactionMetaData&quot;).get(&quot;batchId&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instr_Ids = vars.getObject(&quot;instr_Ids&quot;);


// Create an ArrayList object &apos;instlist&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;statlist&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = instr_Ids.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = IsoInboundTransactions.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;transactionMetaData.instructionId&quot;,instr_Ids[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		host_var = document1.get(&quot;host&quot;).toString();
		responseMsg = document1.get(&quot;response&quot;).get(&quot;Response_Message&quot;).toString();
		String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+instr_Ids[i]+&quot;): host is &quot;+host_var+&quot; , Status is &quot;+stat_var+ &quot; , Response Message is &quot; +responseMsg;
		statlist.add(result);
		objid = document1.getObjectId(&quot;_id&quot;);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);
vars.putObject(&quot;host_var&quot;, host_var);
vars.putObject(&quot;isoinbound_ids&quot;, instlist);


Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2055364939">BranchlessBanking</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">host_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="362091064">[
host is BranchlessBanking , Status is Success , Response Message is Success, 
host is BranchlessBanking , Status is Success , Response Message is Success]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);

MongoCollection&lt;Document&gt; CbsRequestQueues = vars.getObject(&quot;CbsRequestQueues&quot;);


// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);


Document document = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
//status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		Document document1 = CbsRequestQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;\n&quot;+&quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; CbsResponseQueues = vars.getObject(&quot;CbsResponseQueues&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = CbsResponseQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = CbsResponseQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		processingStatus = document1.get(&quot;processingStatus&quot;).toString();
		responseMsg = document1.get(&quot;response&quot;).get(&quot;Response_Message&quot;).toString();
		String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+instlist[i]+&quot;): Status is &quot;+stat_var+ &quot; , Processing Status is: &quot;+processingStatus+ &quot; , Response Message is &quot; +responseMsg;
		statlist.add(result);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;, &quot;status&quot;))).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		stat_var = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String instr = &quot;\n&quot;+&quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
//		log.info(instr);
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+type+mode+status+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1264213564">BatchID is: ${batchID}
Type is: status
Mode is: outbound
Status is: Success</stringProp>
                <stringProp name="24097631">[
Status of Instruction 0 is: Processed, 
Status of Instruction 1 is: Processed]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+mode+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="370838764">State is: COMPLETED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID1}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1207205974">State is: IN-PROGRESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID1}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);




//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;).getAt(i).get(&quot;PmtId&quot;).get(&quot;InstrId&quot;).get(&quot;_text&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, onlyinstr);

return batch_id+type+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1965304567">Type is: pacs.008.001.08
Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isoinboundtransactions" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; IsoInboundTransactions = vars.getObject(&quot;IsoInboundTransactions&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoInboundTransactions.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
instr_id = &quot;InstructionID is: &quot;+document.get(&quot;transactionMetaData&quot;).get(&quot;instructionId&quot;).toString()+&quot;\n&quot;;
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = IsoInboundTransactions.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;transactionMetaData.instructionId&quot;,onlyinstr[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		objid = document1.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);
vars.putObject(&quot;isoinbound_ids&quot;, instlist);




Thread. sleep(1000)
return batch_id+instr_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsrequestqueues" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; CbsRequestQueues = vars.getObject(&quot;CbsRequestQueues&quot;);


// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);


Document document = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
//status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		Document document1 = CbsRequestQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsresponsequeues" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; CbsResponseQueues = vars.getObject(&quot;CbsResponseQueues&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = CbsResponseQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = CbsResponseQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID1}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n\n&quot;;
type= &quot;Pacs 008 - Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Pacs 008 - Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Pacs 008 - Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Pacs 008 - Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document1 = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;, &quot;status&quot;))).last();
type1= &quot;Type Status - Type is: &quot;+document1.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode1= &quot;Type Status - Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n\n&quot;;
//status1 = &quot;Type Status - Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;


//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document1.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		stat_var = document1.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String instr = &quot;Status for Instruction &quot;+i+&quot; is: &quot;+stat_var;
//		log.info(instr);
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+type+mode+status+stage+type1+mode1+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID1}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID1}&quot;.toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="370838764">State is: COMPLETED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BB - P2P Inward Flow(Active Account)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed">9695</stringProp>
          <stringProp name="variableName">traceReference1</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
          <stringProp name="variableName">msgID</stringProp>
          <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">9695</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">C1JSBLPKKA9087450000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorName" elementType="Argument">
                <stringProp name="Argument.name">CreditorName</stringProp>
                <stringProp name="Argument.value">ZOHAIB ALI KHAN</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK55HABB0164030049946271</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorName" elementType="Argument">
                <stringProp name="Argument.name">DebitorName</stringProp>
                <stringProp name="Argument.value">ABC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebitorIBAN</stringProp>
                <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference1}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402202&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:43Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 \&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/CreDtTm&gt;&lt;BtchBookg&gt;false&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;JSBLPKKA908745603401&lt;/InstrId&gt;&lt;EndToEndId&gt;JSBLPKKA908745603401&lt;/EndToEndId&gt;&lt;TxId&gt;JSBLPKKA9087456034&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;021&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;${DebitorName}&lt;/Nm&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${DebitorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;${CreditorName}&lt;/Nm&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${CreditorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;RmtInf&gt;&lt;Ustrd&gt;testing1&lt;/Ustrd&gt;&lt;/RmtInf&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
//msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2P Outbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
//status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;


if(document2.get(&quot;state&quot;).toString()==&quot;RJCT&quot;){
	RejectedReason = document2.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).get(&quot;StsRsnInf&quot;).get(&quot;Rsn&quot;).get(&quot;Prtry&quot;).get(&quot;_text&quot;).toString();

	status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot; with Reason: &quot;+RejectedReason+&quot;\n&quot;;
}
else{
	status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
}

return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="135937764">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress

P2P Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(3000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
ResponseCode= &quot;Response Code Received from BB is: &quot;+document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Response_code&quot;).toString()+&quot;\n&quot;;
ResponseMsg= &quot;Response Message Received from BB is: &quot;+document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Response_Message&quot;).toString()+&quot;\n&quot;;
AccountStatus= &quot;Account Status Received from BB is: &quot;+document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Account_Status&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status+ResponseCode+ResponseMsg+AccountStatus;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-385558709">Type is: Validate
Msg Id is: ${msgID}
Processed By is: BranchlessBanking
Status is: Success
Response Code Received from BB is: 2100
Response Message Received from BB is: Success
Account Status Received from BB is: ACTIVE</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID1}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
//msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2P Outbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="135937764">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress

P2P Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-540776971">Type is: Validate
Msg Id is: ${msgID}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference1}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402203&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:44Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}/001&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:44.854 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178993071/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;JSBLPKKA908745603401&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;JSBLPKKA908745603401&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;JSBLPKKA9087456034&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;284&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1.0&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
              <stringProp name="variableName">MsgId</stringProp>
              <stringProp name="outputFormat">M1789930/002</stringProp>
              <stringProp name="minimumValue">002</stringProp>
              <stringProp name="maximumValue">999</stringProp>
              <stringProp name="randomSeed">006</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID1}&quot;), eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

Thread. sleep(10000);

// Pacs 002 Inbound
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
//return message1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-128450689">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="376250842">Type is: Payment
Msg Id is: ${msgID1}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;), eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

Thread. sleep(2000);

// Pacs 002 Inbound
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

if(document2.get(&quot;state&quot;).toString()==&quot;RJCT&quot;){
	RejectedReason = document2.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).get(&quot;StsRsnInf&quot;).getAt(0).get(&quot;AddtlInf&quot;).get(&quot;_text&quot;).toString();

	status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot; with Reason: &quot;+RejectedReason+&quot;\n&quot;;
}
else{
	status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString();
}
	 
return message1+mode1+status1+stage1+message2+mode2+state2+stage2+status2;
//return message1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1155325893">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Stage is: Completed
Pacs 002 Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
subType =&quot;subType is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
//status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
ResponseCode= &quot;Response Code Received from BB is: &quot;+document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Response_code&quot;).toString()+&quot;\n&quot;;
ResponseMsg= &quot;Response Message Received from BB is: &quot;+document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Response_Message&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 


return type+msgID+procsby+subType+status+ResponseCode+ResponseMsg;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1759795664">Type is: Payment
Msg Id is: ${msgID}
Processed By is: BranchlessBanking
subType is: Transfer
Status is: Success
Response Code Received from BB is: 2100
Response Message Received from BB is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BB - P2P Outward Flow(Active Account)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">C5LOCALTESTING0000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference5</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2POutboundTransactions = database.getCollection(vars.get(&quot;P2POutboundTransactions&quot;));
vars.putObject(&quot;P2POutboundTransactions&quot;, P2POutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;instruction&quot;: {&#xd;
      &quot;instructionId&quot;: &quot;ZbwuKJN75kGogD1Tt8&quot;,&#xd;
      &quot;amount&quot;: {&#xd;
         &quot;currency&quot;: &quot;PKR&quot;,&#xd;
         &quot;value&quot;: &quot;10.0&quot;&#xd;
      },&#xd;
      &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
      &quot;creditor&quot;: {&#xd;
         &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
         &quot;name&quot;:&quot;MOBINA SAEED&quot;,&#xd;
         &quot;accountType&quot;: &quot;W&quot;&#xd;
      },&#xd;
      &quot;cdtrBank&quot;: &quot;SCBLPKKA&quot;,&#xd;
      &quot;debtor&quot;: {&#xd;
         &quot;iban&quot;: &quot;PK55HABB0164030049946271&quot;,&#xd;
         &quot;name&quot;: &quot;MUHAMMAD RIZWAN&quot;,&#xd;
         &quot;accountType&quot;: &quot;A&quot;&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/p2ppayment</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">BB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID5}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-486289218">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID5}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="496627041">Type is: Payment
Msg Id is: MB${msgID5}
Processed By is: CoreBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1562728957">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: BB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-284719019">Type is: Payment
Msg Id is: BB${msgID}
Processed By is: BranchlessBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference5}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;MB${msgID}/002&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-11-23T16:56:35.214Z&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;BB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${msgID}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MB${msgID5}&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <stringProp name="variableName">traceReference</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
                  <stringProp name="variableName">msgID</stringProp>
                  <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
                  <stringProp name="variableName">MsgId</stringProp>
                  <stringProp name="outputFormat">M1789930/002</stringProp>
                  <stringProp name="minimumValue">002</stringProp>
                  <stringProp name="maximumValue">999</stringProp>
                  <stringProp name="randomSeed">006</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID5}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="895516714">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID5}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(5000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2035726892">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: BB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M Outward - Manual Return Scenerio" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">T1TestMsgID00000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">T1_TestMsgID00000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK84BAHL1063008100002401</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebtorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebtorIBAN</stringProp>
                <stringProp name="Argument.value">PK09HABB0000927900524203</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorBank" elementType="Argument">
                <stringProp name="Argument.name">CreditorBank</stringProp>
                <stringProp name="Argument.value">BAHLPKKA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2MOutboundTransactions = database.getCollection(vars.get(&quot;P2MOutboundTransactions&quot;));
vars.putObject(&quot;P2MOutboundTransactions&quot;, P2MOutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB1031012717120060645&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;instrForCdtrBank&quot;: &quot;ABC&quot;,&#xd;
        &quot;rmtInf&quot;: &quot;XYZ&quot;,&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${CreditorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;KHURRAM RAZA&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;merchantName&quot;: &quot;COMPANY CO.&quot;,&#xd;
                &quot;merchantChannel&quot;: &quot;400&quot;,&#xd;
                &quot;storeLabel&quot;: &quot;SOME BRANCH&quot;,&#xd;
                &quot;website&quot;: &quot;www.merchant.pk&quot;,&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520420&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-123&quot;,&#xd;
                &quot;email&quot;: &quot;payee@karachi.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;terminalNumber&quot;: &quot;LABEL&quot;,&#xd;
                &quot;address&quot;: &quot;Free Format Address&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;taxId&quot;: &quot;733738292928PK&quot;,&#xd;
            &quot;referenceInfo&quot;: {&#xd;
                &quot;code&quot;: &quot;INVN&quot;,&#xd;
                &quot;value&quot;: &quot;PK7822222UIH88891&quot;&#xd;
            },&#xd;
            &quot;merchantId&quot;: &quot;229999999&quot;,&#xd;
            &quot;merchantCategoryCode&quot;: &quot;5411&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;${CreditorBank}&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${DebtorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;MUHAMMAD OMER&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520410&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-3055520419&quot;,&#xd;
                &quot;email&quot;: &quot;payer@raast.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;street&quot;: &quot;GREEN STREET&quot;,&#xd;
                &quot;building&quot;: &quot;1&quot;,&#xd;
                &quot;room&quot;: &quot;2&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;customerLabel&quot;: &quot;BLK&quot;,&#xd;
            &quot;loyaltyNumber&quot;: &quot;MU303&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/payment/p2m</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Outbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+ document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId= document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


return message+msgId+mode+status+stage+paymentFlowStage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1139339641">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentPosting</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def pacs008_ObjId= vars.getObject(&quot;pacs008_ObjId&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
direction = &quot;Direction is: &quot;+document.get(&quot;direction&quot;).toString()+&quot;\n&quot;;
subType = &quot;Sub Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
response =&quot;Response is: \n&quot;+ document.get(&quot;response&quot;).toString()+&quot;\n\n&quot;;
	 
return type+msgID+direction+subType+procsby+status+response;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-979907318">Type is: Payment
Msg Id is: MB${msgID}
Direction is: FROM_DEBITOR_ACCOUNT_TO_SETLLEMENT_ACCOUNT
Sub Type is: Transfer
Processed By is: CoreBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
     &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2023-10-25T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2023-10-25T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/00&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${msgID}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MB103101271712000644&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2023-25-10&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;PMCT&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Outbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status=&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+ document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


// Pacs 002 Inbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+msgId+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-982225927">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: PaymentAccepted

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="pacs.004 Payment Return" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.004.001.09&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;PACS004-NRTDC-001&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.004.001.09&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2018-01-15T10:35:40.243&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.004.001.09\&quot;&gt;&lt;PmtRtr&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;RTN${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2018-01-15T10:35:40.243&lt;/CreDtTm&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInf&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2018-01-14T10:40:40.232&lt;/OrgnlCreDtTm&gt;&lt;/OrgnlGrpInf&gt;&lt;TxInf&gt;&lt;RtrId&gt;${msgID}01&lt;/RtrId&gt;&lt;OrgnlInstrId&gt;20170913-1818001&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;NOTPROVIDED&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;${msgID}01&lt;/OrgnlTxId&gt;&lt;OrgnlIntrBkSttlmDt&gt;2018-01-14&lt;/OrgnlIntrBkSttlmDt&gt;&lt;RtrdIntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1&lt;/RtrdIntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2018-01-15&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; ALFHPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; HABBPKKARTG &lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;RtrRsnInf&gt;&lt;Orgtr&gt;&lt;Id&gt;&lt;OrgId&gt;&lt;AnyBIC&gt;BAHLPKPK&lt;/AnyBIC&gt;&lt;/OrgId&gt;&lt;/Id&gt;&lt;/Orgtr&gt;&lt;Rsn&gt;&lt;Prtry&gt;AC04&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Closed account number&lt;/AddtlInf&gt;&lt;/RtrRsnInf&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;/PmtTpInf&gt;&lt;Dbtr&gt;&lt;Pty&gt;&lt;Nm&gt;FHNZM TZFSZI&lt;/Nm&gt;&lt;/Pty&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK84BAHL1063008100002401&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;DbtrAgtAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK84BAHL1063008100002401&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAgtAcct&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt; ALFHPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;CdtrAgtAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK84BAHL1063008100002401&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAgtAcct&gt;&lt;Cdtr&gt;&lt;Pty&gt;&lt;Nm&gt;CREDITOR PERSON NAME&lt;/Nm&gt;&lt;/Pty&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;PK84BAHL1063008100002401&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInf&gt;&lt;/PmtRtr&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${DBHost}</stringProp>
            <stringProp name="HTTPSampler.port">${paymentcorePort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2m/iso/pacs/004</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-req-id</stringProp>
                  <stringProp name="Header.value">${msgID7}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">MB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;

try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 004 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;RTN${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.004.001.09&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message = &quot;P2M Outbound - Pacs.004 document details:\n&quot;;
msgid =&quot;Pacs 004 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 004 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 004 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 004 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Pacs 008 Outbound - Payment Flow Stage Updated 
Document document1 = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message1 = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1=&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage1 = &quot;Pacs 008 Payment Flow Stage is: &quot;+ document1.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;

return message+msgid+mode+status+stage+message1+msgId1+mode1+status1+stage1+paymentFlowStage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1480948334">P2M Outbound - Pacs.004 document details:
Pacs 004 MsgID is: RTN${msgID}
Pacs 004 Mode is: inbound
Pacs 004 Status is: Success
Pacs 004 Stage is: Completed

P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: ReturnProcessed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);


// Getting the object id of P2Misomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Return&quot;))).sort({createdAt:-1}).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
response =&quot;Response is: \n&quot;+ document.get(&quot;response&quot;).toString()+&quot;\n\n&quot;;
	 
return type+msgID+subtype+procsby+status+response;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-286387971">Type is: Payment
Msg Id is: MB${msgID}
Sub-Type is: Return
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M Outward (BB) - Success Scenerio" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">T1TestMsgID00000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">T1_TestMsgID00000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK84BAHL1063008100002401</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebtorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebtorIBAN</stringProp>
                <stringProp name="Argument.value">PK55HABB0164030049946271</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorBank" elementType="Argument">
                <stringProp name="Argument.name">CreditorBank</stringProp>
                <stringProp name="Argument.value">BAHLPKKA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2MOutboundTransactions = database.getCollection(vars.get(&quot;P2MOutboundTransactions&quot;));
vars.putObject(&quot;P2MOutboundTransactions&quot;, P2MOutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB1031012717120060645&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;instrForCdtrBank&quot;: &quot;ABC&quot;,&#xd;
        &quot;rmtInf&quot;: &quot;XYZ&quot;,&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${CreditorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;KHURRAM RAZA&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;merchantName&quot;: &quot;COMPANY CO.&quot;,&#xd;
                &quot;merchantChannel&quot;: &quot;400&quot;,&#xd;
                &quot;storeLabel&quot;: &quot;SOME BRANCH&quot;,&#xd;
                &quot;website&quot;: &quot;www.merchant.pk&quot;,&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520420&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-123&quot;,&#xd;
                &quot;email&quot;: &quot;payee@karachi.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;terminalNumber&quot;: &quot;LABEL&quot;,&#xd;
                &quot;address&quot;: &quot;Free Format Address&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;taxId&quot;: &quot;733738292928PK&quot;,&#xd;
            &quot;referenceInfo&quot;: {&#xd;
                &quot;code&quot;: &quot;INVN&quot;,&#xd;
                &quot;value&quot;: &quot;PK7822222UIH88891&quot;&#xd;
            },&#xd;
            &quot;merchantId&quot;: &quot;229999999&quot;,&#xd;
            &quot;merchantCategoryCode&quot;: &quot;5411&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;${CreditorBank}&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${DebtorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;MUHAMMAD OMER&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520410&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-3055520419&quot;,&#xd;
                &quot;email&quot;: &quot;payer@raast.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;street&quot;: &quot;GREEN STREET&quot;,&#xd;
                &quot;building&quot;: &quot;1&quot;,&#xd;
                &quot;room&quot;: &quot;2&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;customerLabel&quot;: &quot;BLK&quot;,&#xd;
            &quot;loyaltyNumber&quot;: &quot;MU303&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/payment/p2m</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId= document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


return message+msgId+mode+status+stage+paymentFlowStage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1139339641">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentPosting</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def pacs008_ObjId= vars.getObject(&quot;pacs008_ObjId&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
direction = &quot;Direction is: &quot;+document.get(&quot;direction&quot;).toString()+&quot;\n&quot;;
subType = &quot;Sub Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+direction+subType+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1942021926">Type is: Payment
Msg Id is: MB${msgID}
Direction is: FROM_DEBITOR_ACCOUNT_TO_SETLLEMENT_ACCOUNT
Sub Type is: Transfer
Processed By is: BranchlessBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
     &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2023-10-25T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10\&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2023-10-25T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/00&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${msgID}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MB103101271712000644&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2023-25-10&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;PMCT&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status=&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+msgId+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-982225927">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: PaymentAccepted

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Inward - Validation Rejected" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="true">
          <stringProp name="variableName">batchID2</stringProp>
          <stringProp name="outputFormat">C8HABBPKKA2310200000A0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereferene" enabled="true">
          <stringProp name="variableName">traceref2</stringProp>
          <stringProp name="outputFormat">HABBPKKA2310200000B0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Sequential Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;inboundinstructions&apos;
MongoCollection&lt;Document&gt; InboundInstructions = database.getCollection(vars.get(&quot;InboundInstructions&quot;));
vars.putObject(&quot;InboundInstructions&quot;, InboundInstructions);

//Connection to &apos;instructionqueues&apos;
MongoCollection&lt;Document&gt; InstructionQueues = database.getCollection(vars.get(&quot;InstructionQueues&quot;));
vars.putObject(&quot;InstructionQueues&quot;, InstructionQueues);

//Connection to &apos;batches&apos;
MongoCollection&lt;Document&gt; Batches = database.getCollection(vars.get(&quot;Batches&quot;));
vars.putObject(&quot;Batches&quot;, Batches);

//Connection to &apos;cbsrequestqueues&apos;
MongoCollection&lt;Document&gt; CbsRequestQueues = database.getCollection(vars.get(&quot;CbsRequestQueues&quot;));
vars.putObject(&quot;CbsRequestQueues&quot;, CbsRequestQueues);

//Connection to &apos;cbsresponsequeues&apos;
MongoCollection&lt;Document&gt; CbsResponseQueues = database.getCollection(vars.get(&quot;CbsResponseQueues&quot;));
vars.putObject(&quot;CbsResponseQueues&quot;, CbsResponseQueues);

//Connection to &apos;isoinboundtransactions&apos;
MongoCollection&lt;Document&gt; IsoInboundTransactions = database.getCollection(vars.get(&quot;IsoInboundTransactions&quot;));
vars.putObject(&quot;IsoInboundTransactions&quot;, IsoInboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);


//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to database&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pre-Validation Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID2}&quot;,&#xd;
    &quot;batchInitiator&quot;: &quot;CDCPKKAA&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-01-25T09:04:58.495Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-1&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 1&quot;&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-2&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 2&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instruction/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


Document document = Instructions.find(eq(&quot;type&quot;,&quot;validate&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;request&quot;).get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id
instrID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;instrID&quot;, instrID);

//Loop for all the instructions in a batch 
// Start //

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		String instr = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, finalList);

Thread. sleep(1000)
return batch_id+mode+status+stage+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-523813281">Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="inboundinstructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; InboundInstructions = vars.getObject(&quot;InboundInstructions&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
def instrID = vars.getObject(&quot;instrID&quot;);

Document document = InboundInstructions.find(eq(&quot;instructionId&quot;,instrID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID2}&quot;.toString()+&quot;\n&quot;;
instr_id = &quot;InstructionID is: &quot;+document.get(&quot;request&quot;).get(&quot;instructionId&quot;).toString()+&quot;\n&quot;;

//Get the object id
inbinstrID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;inbinstrID&quot;, inbinstrID);

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = InboundInstructions.find(and(eq(&quot;instructionId&quot;,instrID),eq(&quot;request.instructionId&quot;,onlyinstr[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		objid = document1.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;inbound_ids&quot;, instlist);
//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+instr_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructionqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; InstructionQueues = vars.getObject(&quot;InstructionQueues&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
def inbinstrID = vars.getObject(&quot;inbinstrID&quot;);

Document document = InstructionQueues.find(eq(&quot;instructionId&quot;,inbinstrID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID2}&quot;.toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;inbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		Document document1 = InstructionQueues.find(eq(&quot;instructionId&quot;,new ObjectId(instlist[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);

// Getting the object id from &apos;instructions&apos;
def instrID = vars.getObject(&quot;instrID&quot;);

Document document = Instructions.find(eq(&quot;type&quot;,&quot;validate&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID2}&quot;.toString()+&quot;\n\n&quot;;
mode = &quot;Type Validate - Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Type Validate - Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Type Validate - Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

Document document1 = Instructions.find(and(eq(&quot;refInstructionId&quot;,instrID),eq(&quot;type&quot;,&quot;status&quot;))).last();
mode1 = &quot;Type Status - Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Type Status - Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n\n&quot;;

//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		stat_var = document1.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String instr = &quot;Status for Instruction &quot;+i+&quot; is: &quot; + stat_var;
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+mode+status+stage+mode1+status1+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-543852386">Rejected</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-264035965">Type Validate - Mode is: inbound
Type Validate - Status is: Success
Type Validate - Stage is: Completed

Type Status - Mode is: outbound
Type Status - Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find().sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID2}&quot;.toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="57348383">State is: PRE-VALIDATION-REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref2}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AAAAVNVN&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKXIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;PACS008-NRTDC-001&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-05-13T18:47:04.101Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08\&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${batchID2}&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-05-27T10:58:50&lt;/CreDtTm&gt;&lt;NbOfTxs&gt;2&lt;/NbOfTxs&gt;&lt;TtlIntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;2&lt;/TtlIntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2020-06-03&lt;/IntrBkSttlmDt&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;I-NRTDC-0000001&lt;/InstrId&gt;&lt;EndToEndId&gt;NRTDC-ENDTOEND&lt;/EndToEndId&gt;&lt;TxId&gt;T-NRTDC-0000001&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CSDC&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;14.97&lt;/IntrBkSttlmAmt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;BankA&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 1&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;123456789&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AHRBPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;BankB&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 2&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;11617901130103&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/CdtrAcct&gt;&lt;/CdtTrfTxInf&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;I-NRTDC-0000002&lt;/InstrId&gt;&lt;EndToEndId&gt;NRTDC-ENDTOEND&lt;/EndToEndId&gt;&lt;TxId&gt;T-NRTDC-0000002&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CSDC&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;BankA&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 1&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;123456789&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AHRBPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;BankB&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 2&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;11617901130103&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/CdtrAcct&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1207205974">State is: IN-PROGRESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);




//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object
ArrayList&lt;String&gt; onlyinstr = new ArrayList&lt;String&gt;(); 


int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;).getAt(i).get(&quot;PmtId&quot;).get(&quot;InstrId&quot;).get(&quot;_text&quot;).toString();
		onlyinstr.add(inst);
		log.info(onlyinstr.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

vars.putObject(&quot;myArr&quot;, onlyinstr);

return batch_id+type+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1965304567">Type is: pacs.008.001.08
Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isoinboundtransactions" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; IsoInboundTransactions = vars.getObject(&quot;IsoInboundTransactions&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoInboundTransactions.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
instr_id = &quot;InstructionID is: &quot;+document.get(&quot;transactionMetaData&quot;).get(&quot;instructionId&quot;).toString()+&quot;\n&quot;;
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] onlyinstr = vars.getObject(&quot;myArr&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = onlyinstr.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = IsoInboundTransactions.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;transactionMetaData.instructionId&quot;,onlyinstr[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		objid = document1.getObjectId(&quot;_id&quot;);
		statlist.add(stat);
		instlist.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);
vars.putObject(&quot;isoinbound_ids&quot;, instlist);




Thread. sleep(1000)
return batch_id+instr_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1754980555">Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsrequestqueues" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; CbsRequestQueues = vars.getObject(&quot;CbsRequestQueues&quot;);


// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);


Document document = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
//status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		Document document1 = CbsRequestQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		statlist.add(stat);
		log.info(statlist);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsresponsequeues" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; CbsResponseQueues = vars.getObject(&quot;CbsResponseQueues&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = CbsResponseQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = CbsResponseQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n\n&quot;;
type= &quot;Pacs 008 - Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Pacs 008 - Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Pacs 008 - Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Pacs 008 - Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document1 = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;, &quot;status&quot;))).last();
type1= &quot;Type Status - Type is: &quot;+document1.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode1= &quot;Type Status - Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n\n&quot;;
//status1 = &quot;Type Status - Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;


//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document1.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		stat_var = document1.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String instr = &quot;Status for Instruction &quot;+i+&quot; is: &quot;+stat_var;
//		log.info(instr);
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+type+mode+status+stage+type1+mode1+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="370838764">State is: COMPLETED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Inward - Auto Return" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - Batch ID" enabled="true">
          <stringProp name="variableName">batchID3</stringProp>
          <stringProp name="outputFormat">C9HABBPKKA2310200000A0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereferene" enabled="true">
          <stringProp name="variableName">traceref3</stringProp>
          <stringProp name="outputFormat">HABBPKKA2310200000B0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - Msg ID" enabled="false">
          <stringProp name="variableName">msgID</stringProp>
          <stringProp name="outputFormat">HABBPKKA2310200000A0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="msgID" elementType="Argument">
              <stringProp name="Argument.name">msgID</stringProp>
              <stringProp name="Argument.value">${msgID}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Sequential Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@localhost:27017/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;inboundinstructions&apos;
MongoCollection&lt;Document&gt; InboundInstructions = database.getCollection(vars.get(&quot;InboundInstructions&quot;));
vars.putObject(&quot;InboundInstructions&quot;, InboundInstructions);

//Connection to &apos;instructionqueues&apos;
MongoCollection&lt;Document&gt; InstructionQueues = database.getCollection(vars.get(&quot;InstructionQueues&quot;));
vars.putObject(&quot;InstructionQueues&quot;, InstructionQueues);

//Connection to &apos;batches&apos;
MongoCollection&lt;Document&gt; Batches = database.getCollection(vars.get(&quot;Batches&quot;));
vars.putObject(&quot;Batches&quot;, Batches);

//Connection to &apos;cbsrequestqueues&apos;
MongoCollection&lt;Document&gt; CbsRequestQueues = database.getCollection(vars.get(&quot;CbsRequestQueues&quot;));
vars.putObject(&quot;CbsRequestQueues&quot;, CbsRequestQueues);

//Connection to &apos;cbsresponsequeues&apos;
MongoCollection&lt;Document&gt; CbsResponseQueues = database.getCollection(vars.get(&quot;CbsResponseQueues&quot;));
vars.putObject(&quot;CbsResponseQueues&quot;, CbsResponseQueues);

//Connection to &apos;isoinboundtransactions&apos;
MongoCollection&lt;Document&gt; IsoInboundTransactions = database.getCollection(vars.get(&quot;IsoInboundTransactions&quot;));
vars.putObject(&quot;IsoInboundTransactions&quot;, IsoInboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);


//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to database&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pre-Validation Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID3}&quot;,&#xd;
    &quot;batchInitiator&quot;: &quot;CDCPKKAA&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-01-25T09:04:58.495Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-1&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 1&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instruction/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


Document document = Instructions.find(eq(&quot;type&quot;,&quot;validate&quot;)).sort({createdAt:-1}).last();
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id
instrID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;instrID&quot;, instrID);

return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-523813281">Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="inboundinstructions" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {


MongoCollection&lt;Document&gt; InboundInstructions = vars.getObject(&quot;InboundInstructions&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
def instrID = vars.getObject(&quot;instrID&quot;);

//Document document = collection.find(eq(&quot;status&quot;,&quot;Success&quot;)).last();
Document document = InboundInstructions.find(eq(&quot;instructionId&quot;,instrID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Get the object id
inbinstrID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;inbinstrID&quot;, inbinstrID);

Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-100343443">Status is: Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructionqueues" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; InstructionQueues = vars.getObject(&quot;InstructionQueues&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
def inbinstrID = vars.getObject(&quot;inbinstrID&quot;);

Document document = InstructionQueues.find(eq(&quot;instructionid&quot;,inbinstrID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-946115632">Status is: Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructionqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; InstructionQueues = vars.getObject(&quot;InstructionQueues&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
def inbinstrID = vars.getObject(&quot;inbinstrID&quot;);

Document document = InstructionQueues.find().last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-946115632">Status is: Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="inboundinstructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; InboundInstructions = vars.getObject(&quot;InboundInstructions&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
def instrID = vars.getObject(&quot;instrID&quot;);

//Document document = collection.find(eq(&quot;status&quot;,&quot;Success&quot;)).last();
Document document = InboundInstructions.find(eq(&quot;instructionId&quot;,instrID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);

// Getting the object id from &apos;instructions&apos;
def instrID = vars.getObject(&quot;instrID&quot;);

Document document = Instructions.find(eq(&quot;type&quot;,&quot;validate&quot;)).sort({createdAt:-1}).last();
mode = &quot;Type Validate - Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Type Validate - Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Type Validate - Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

Document document1 = Instructions.find(and(eq(&quot;refInstructionId&quot;,instrID),eq(&quot;type&quot;,&quot;status&quot;))).last();
mode1 = &quot;Type Status - Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Type Status - Status is: &quot;+document1.get(&quot;status&quot;).toString();


Thread. sleep(1000)
return mode+status+stage+mode1+status1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-264035965">Type Validate - Mode is: inbound
Type Validate - Status is: Success
Type Validate - Stage is: Completed

Type Status - Mode is: outbound
Type Status - Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find().sort({createdAt:-1}).last();
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="57348383">State is: PRE-VALIDATION-REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref3}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0\&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01\&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AAAAVNVN&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKPKXIFT&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;PACS008-NRTDC-001&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc&gt;ACH&lt;/BizSvc&gt;&lt;CreDt&gt;2020-05-13T18:47:04.101Z&lt;/CreDt&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08\&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${batchID3}&lt;/MsgId&gt;&lt;CreDtTm&gt;2020-05-27T10:58:50&lt;/CreDtTm&gt;&lt;NbOfTxs&gt;2&lt;/NbOfTxs&gt;&lt;TtlIntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;2&lt;/TtlIntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2020-06-03&lt;/IntrBkSttlmDt&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;I-NRTDC-0000001&lt;/InstrId&gt;&lt;EndToEndId&gt;NRTDC-ENDTOEND&lt;/EndToEndId&gt;&lt;TxId&gt;T-NRTDC-0000001&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CSDC&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;13.0&lt;/IntrBkSttlmAmt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;BankA&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 1&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;123456789&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AHRBPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;BankB&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 2&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;11617901130103&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/CdtrAcct&gt;&lt;/CdtTrfTxInf&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;I-NRTDC-0000002&lt;/InstrId&gt;&lt;EndToEndId&gt;NRTDC-ENDTOEND&lt;/EndToEndId&gt;&lt;TxId&gt;T-NRTDC-0000002&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CSDC&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR\&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;BankA&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 1&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;123456789&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;ABPAPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;AHRBPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;BankB&lt;/Nm&gt;&lt;PstlAdr&gt;&lt;AdrLine&gt;Address 2&lt;/AdrLine&gt;&lt;/PstlAdr&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;Othr&gt;&lt;Id&gt;11617901130103&lt;/Id&gt;&lt;/Othr&gt;&lt;/Id&gt;&lt;Tp&gt;&lt;Prtry&gt;ACC&lt;/Prtry&gt;&lt;/Tp&gt;&lt;/CdtrAcct&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereference" enabled="true">
              <stringProp name="variableName">traceref</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID3}&quot;)).sort({createdAt:-1}).last();
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1207205974">State is: IN-PROGRESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID3}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);


Thread. sleep(1000)
return type+mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1965304567">Type is: pacs.008.001.08
Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; CbsRequestQueues = vars.getObject(&quot;CbsRequestQueues&quot;);


// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Thread. sleep(10000);
Document document = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
//status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(10000);
Document document1 = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return status2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-946115632">Status is: Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; CbsResponseQueues = vars.getObject(&quot;CbsResponseQueues&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = CbsResponseQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-946115632">Status is: Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isoinboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; IsoInboundTransactions = vars.getObject(&quot;IsoInboundTransactions&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);


//Document document = collection.find(eq(&quot;status&quot;,&quot;Processed&quot;)).last();
Document document = IsoInboundTransactions.find(eq(&apos;isoMessageId&apos;, isoID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1380616844">Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID3}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
type= &quot;Pacs 008 - Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Pacs 008 - Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Pacs 008 - Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Pacs 008 - Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document1 = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;, &quot;status&quot;))).last();
type1= &quot;Type Status - Type is: &quot;+document1.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode1= &quot;Type Status - Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Type Status - Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n\n&quot;;

Document document2 = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;, &quot;pacs.004.001.09&quot;))).last();
type2= &quot;Pacs 004 - Type is: &quot;+document2.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode2= &quot;Pacs 004 - Mode is: &quot;+document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status2 = &quot;Pacs 004 - Status is: &quot;+document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return type+mode+status+stage+type1+mode1+status1+type2+mode2+status2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="379219166">Pacs 008 - Type is: pacs.008.001.08
Pacs 008 - Mode is: inbound
Pacs 008 - Status is: Success
Pacs 008 - Stage is: Completed

Type Status - Type is: status
Type Status - Mode is: outbound
Type Status - Status is: Success

Pacs 004 - Type is: pacs.004.001.09
Pacs 004 - Mode is: outbound
Pacs 004 - Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID3}&quot;)).sort({createdAt:-1}).last();
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="370838764">State is: COMPLETED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find().last();
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="370838764">State is: COMPLETED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Inward (BB - 2 Blocked Acc)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable - batchID" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="batchInitiator" elementType="Argument">
              <stringProp name="Argument.name">batchInitiator</stringProp>
              <stringProp name="Argument.value">CDCPKKAA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="true">
          <stringProp name="variableName">batchID</stringProp>
          <stringProp name="outputFormat">C10HABBPKKA2310200000A0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereferene" enabled="true">
          <stringProp name="variableName">traceref</stringProp>
          <stringProp name="outputFormat">HABBPKKA2310200000B0000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Sequential Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;inboundinstructions&apos;
MongoCollection&lt;Document&gt; InboundInstructions = database.getCollection(vars.get(&quot;InboundInstructions&quot;));
vars.putObject(&quot;InboundInstructions&quot;, InboundInstructions);

//Connection to &apos;instructionqueues&apos;
MongoCollection&lt;Document&gt; InstructionQueues = database.getCollection(vars.get(&quot;InstructionQueues&quot;));
vars.putObject(&quot;InstructionQueues&quot;, InstructionQueues);

//Connection to &apos;batches&apos;
MongoCollection&lt;Document&gt; Batches = database.getCollection(vars.get(&quot;Batches&quot;));
vars.putObject(&quot;Batches&quot;, Batches);

//Connection to &apos;cbsrequestqueues&apos;
MongoCollection&lt;Document&gt; CbsRequestQueues = database.getCollection(vars.get(&quot;CbsRequestQueues&quot;));
vars.putObject(&quot;CbsRequestQueues&quot;, CbsRequestQueues);

//Connection to &apos;cbsresponsequeues&apos;
MongoCollection&lt;Document&gt; CbsResponseQueues = database.getCollection(vars.get(&quot;CbsResponseQueues&quot;));
vars.putObject(&quot;CbsResponseQueues&quot;, CbsResponseQueues);

//Connection to &apos;isoinboundtransactions&apos;
MongoCollection&lt;Document&gt; IsoInboundTransactions = database.getCollection(vars.get(&quot;IsoInboundTransactions&quot;));
vars.putObject(&quot;IsoInboundTransactions&quot;, IsoInboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);


//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to database&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pre-Validation Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;batchInitiator&quot;: &quot;${batchInitiator}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-01-25T09:04:58.495Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-1&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK55HABB0164030049946271&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 1&quot;&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;TEST-HABBPKKA-1643101498486-2&quot;,&#xd;
            &quot;customer&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK55HABB0164030049946271&quot;,&#xd;
                &quot;customerName&quot;: &quot;Customer 2&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instruction/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+mode+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1603873822">State is: PRE-VALIDATION</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(20000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


Document document = Instructions.find(and(eq(&quot;request.batchId&quot;,&quot;${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;request&quot;).get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
batch_initiator = &quot;Batch Initiator is: &quot;+document.get(&quot;request&quot;).get(&quot;batchInitiator&quot;).toString()+&quot;\n&quot;;
type = &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Getting it&apos;s object id and storing in var
instrId = document.getObjectId(&quot;_id&quot;);
vars.putObject(&quot;instrId&quot;, instrId);

//Loop for all the instructions in a batch 
// Start //

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; InstructionIds_list = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; instr_list = new ArrayList&lt;String&gt;(); // for print

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		String instr = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;instructionId&quot;).toString();
		InstructionIds_list.add(instr);
		String instrcs = &quot;\n&quot;+&quot;Instruction &quot;+ i + &quot; is: &quot; +instr;
		instr_list.add(instrcs);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in validate document recieved&quot;);
	}

// End

vars.putObject(&quot;InstructionIds_list&quot;, InstructionIds_list);
vars.putObject(&quot;instrId&quot;, instrId);

log.info(&quot;Test&quot;)
log.info(InstructionIds_list);
log.info(instr_list);

Thread. sleep(1000)
return batch_id+batch_initiator+type+mode+status+stage+instr_list;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1399767628">Type is: validate
Mode is: inbound
Status is: Success
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="inboundinstructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; InboundInstructions = vars.getObject(&quot;InboundInstructions&quot;);

// Getting the object id from &apos;instructions&apos;
def instrId = vars.getObject(&quot;instrId&quot;);

Document document = InboundInstructions.find(eq(&quot;instructionId&quot;,instrId)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;


//Get the object id and store in var
inbinstrID = document.getObjectId(&quot;_id&quot;);
vars.putObject(&quot;inbinstrID&quot;, inbinstrID);

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] InstructionIds_list = vars.getObject(&quot;InstructionIds_list&quot;);


// Create an ArrayList object &apos;inboundinstrId&apos;
ArrayList&lt;String&gt; inboundinstrIds = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = InstructionIds_list.size();
log.info(&quot;Count is : &quot;+instr_count.toString());

if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(InstructionIds_list[i]);
		Document document1 = InboundInstructions.find(and(eq(&quot;instructionId&quot;,instrId),eq(&quot;request.instructionId&quot;,InstructionIds_list[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		log.info(&quot;Stat Var: &quot; + stat_var);
		host_var = document1.get(&quot;host&quot;).toString();
		log.info(&quot;Stat Var: &quot; + host_var );
		responseMsg = document1.get(&quot;response&quot;).getAt(0).get(&quot;result&quot;).get(&quot;Response_Message&quot;).toString();
		String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+InstructionIds_list[i]+&quot;): host is &quot;+host_var+&quot; , Status is &quot;+stat_var+ &quot; , Response Message is &quot; +responseMsg;
		objid = document1.getObjectId(&quot;_id&quot;);
		statlist.add(result);
		inboundinstrIds.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;inbinstrID&quot;, inbinstrID);
vars.putObject(&quot;inboundinstrIds&quot;, inboundinstrIds);

//Put it in a variable for Assertion:
vars.putObject(&quot;stat_var&quot;, stat_var);
vars.putObject(&quot;host_var&quot;, host_var);


Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2055364939">BranchlessBanking</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">host_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="362091064">[
host is BranchlessBanking , Status is Success , Response Message is Success, 
host is BranchlessBanking , Status is Success , Response Message is Success]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="inboundinstructions" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; InboundInstructions = vars.getObject(&quot;InboundInstructions&quot;);

// Getting the object id from &apos;instructions&apos;
def instrId = vars.getObject(&quot;instrId&quot;);

Document document = InboundInstructions.find(eq(&quot;instructionId&quot;,instrId)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;


//Get the object id and store in var
inbinstrID = document.getObjectId(&quot;_id&quot;);
vars.putObject(&quot;inbinstrID&quot;, inbinstrID);

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] InstructionIds_list = vars.getObject(&quot;InstructionIds_list&quot;);


// Create an ArrayList object &apos;inboundinstrId&apos;
ArrayList&lt;String&gt; inboundinstrIds = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = InstructionIds_list.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = InboundInstructions.find(and(eq(&quot;instructionId&quot;,instrId),eq(&quot;request.instructionId&quot;,InstructionIds_list[i]))).last();
		stat_var = document.get(&quot;status&quot;).toString();
		host_var = document.get(&quot;host&quot;).toString();
		responseMsg = document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Response_Message&quot;).toString();
		String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+InstructionIds_list[i]+&quot;): host is &quot;+host_var+&quot; , Status is &quot;+stat_var+ &quot; , Response Message is &quot; +responseMsg;
		objid = document1.getObjectId(&quot;_id&quot;);
		statlist.add(result);
		inboundinstrIds.add(objid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


vars.putObject(&quot;inbinstrID&quot;, inbinstrID);
vars.putObject(&quot;inboundinstrIds&quot;, inboundinstrIds);

//Put it in a variable for Assertion:
vars.putObject(&quot;stat_var&quot;, stat_var);
vars.putObject(&quot;host_var&quot;, host_var);


Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="578079082">Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2055364939">BranchlessBanking</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">host_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructionqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(20000);

MongoCollection&lt;Document&gt; InstructionQueues = vars.getObject(&quot;InstructionQueues&quot;);

// Getting the object id from &apos;inboundinstructions&apos;
//def inbinstrID = vars.getObject(&quot;inbinstrID&quot;);
//
//Document document = InstructionQueues.find(eq(&quot;instructionId&quot;,inbinstrID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;

////Loop for all the documents in a collection
//// Start
// Getting the array
String [] inboundinstrIds = vars.getObject(&quot;inboundinstrIds&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();

int instr_count = inboundinstrIds.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = InstructionQueues.find(eq(&quot;instructionId&quot;,new ObjectId(inboundinstrIds[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;\n&quot;+&quot;Status of Instruction &quot; + i + &quot; is: &quot;+ stat_var;
		statlist.add(stat);
	}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End
//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {


MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);

// Getting the object id from &apos;instructions&apos;
def instrId = vars.getObject(&quot;instrId&quot;);

Document document = Instructions.find(and(eq(&quot;refInstructionId&quot;,instrId),eq(&quot;type&quot;,&quot;status&quot;))).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
type = &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n\n&quot;;

//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		stat_var = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		if (stat_var == &quot;Rejected&quot;) {
			log.info(&quot;in if condition&quot;)
			stat_reason = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;rejectedReason&quot;).toString();
			String instr = &quot;\n&quot;+&quot;Status for Instruction &quot;+ i +&quot; is: &quot; + stat_var + &quot; with rejected reason: &quot; + stat_reason;		
			finalList.add(instr);
			}
		else {
			log.info(&quot;in else&quot;)
			String instr = &quot;\n&quot;+&quot;Status for Instruction &quot;+i+&quot; is: &quot; + stat_var;
			finalList.add(instr);
		}
	}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+type+mode+status+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-543852386">Rejected</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1356059956">Type is: status
Mode is: outbound
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+mode+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="57348383">State is: PRE-VALIDATION-REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceref}&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=&apos;urn:cma:stp:xsd:stp.1.0&apos;&gt; &lt;Body&gt; &lt;AppHdr xmlns=&apos;urn:iso:std:iso:20022:tech:xsd:head.001.001.01&apos;&gt; &lt;Fr&gt; &lt;FIId&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/FIId&gt; &lt;/Fr&gt; &lt;To&gt; &lt;FIId&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/FIId&gt; &lt;/To&gt; &lt;BizMsgIdr&gt;16670217&lt;/BizMsgIdr&gt; &lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt; &lt;CreDt&gt;2022-12-20T12:58:10Z&lt;/CreDt&gt; &lt;Prty&gt;0100&lt;/Prty&gt; &lt;Sgntr&gt; &lt;ds:Signature xmlns:ds=&apos;http://www.w3.org/2000/09/xmldsig#&apos;&gt; &lt;ds:SignedInfo&gt; &lt;ds:CanonicalizationMethod Algorithm=&apos;http://www.w3.org/2001/10/xml-exc-c14n#&apos;/&gt; &lt;ds:SignatureMethod Algorithm=&apos;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&apos;/&gt; &lt;ds:Reference URI=&apos;#_b75e493a-bacd-44b9-94ac-c2ab706d272d&apos;&gt; &lt;ds:Transforms&gt; &lt;ds:Transform Algorithm=&apos;http://www.w3.org/2001/10/xml-exc-c14n#&apos;/&gt; &lt;/ds:Transforms&gt; &lt;ds:DigestMethod Algorithm=&apos;http://www.w3.org/2001/04/xmlenc#sha256&apos;/&gt; &lt;ds:DigestValue&gt;jAa3J3LODGNzaACCj1sxOLA3Y2/ZGHCKmuYBSei1ca4=&lt;/ds:DigestValue&gt; &lt;/ds:Reference&gt; &lt;ds:Reference Type=&apos;http://uri.etsi.org/01903/v1.3.2#SignedProperties&apos; URI=&apos;#_bc5f12eb-48c6-4288-8d90-7712a546160f-signedprops&apos;&gt; &lt;ds:Transforms&gt; &lt;ds:Transform Algorithm=&apos;http://www.w3.org/2001/10/xml-exc-c14n#&apos;/&gt; &lt;/ds:Transforms&gt; &lt;ds:DigestMethod Algorithm=&apos;http://www.w3.org/2001/04/xmlenc#sha256&apos;/&gt; &lt;ds:DigestValue&gt;SG1wtLYTxwmg8OMJSwW+ZJi/61BeghUQ91ozcxzP2Ks=&lt;/ds:DigestValue&gt; &lt;/ds:Reference&gt; &lt;ds:Reference&gt; &lt;ds:Transforms&gt; &lt;ds:Transform Algorithm=&apos;http://www.w3.org/2001/10/xml-exc-c14n#&apos;/&gt; &lt;/ds:Transforms&gt; &lt;ds:DigestMethod Algorithm=&apos;http://www.w3.org/2001/04/xmlenc#sha256&apos;/&gt; &lt;ds:DigestValue&gt;B0YQSRIZ0aKcgIEezpov/rnhX4/tWCLsnRa0YVaonH0=&lt;/ds:DigestValue&gt; &lt;/ds:Reference&gt; &lt;/ds:SignedInfo&gt; &lt;ds:SignatureValue&gt;Oysf8QaL+06AGALbF6fTEbKHBIRclzL7YrMf53HFgSQ5HFdRU52tVvb2BKGDJb8tEWFk9vPssspQ ZMhbrmO9eAwFb+YIwpu4rFWu3Lt7HP+jhJQLK/NFurPShXuPu7Rn8+oKiIu6/08SbxNUoaFFxYvV irtBj5M9cCfULpGxOYWwrcyKQm9JWkQS+zL5rq8FV/LGqzMbbqWohVIbZdwwmvGzM1nWUSD5uzML E5fb7MLeiDo/wibDsd/vfXn+LRox+Wtk5o+gc6PxngNcabbxYqblJYlMSdiMnQoXGyYuTSnksAks sJ5E+gjWQuU5hNwTma1yrKQyUJUGBajPuU2Q3g==&lt;/ds:SignatureValue&gt; &lt;ds:KeyInfo Id=&apos;_b75e493a-bacd-44b9-94ac-c2ab706d272d&apos;&gt; &lt;ds:X509Data&gt; &lt;ds:X509IssuerSerial&gt; &lt;ds:X509IssuerName&gt;CN=test-TST-AD-CA, DC=test, DC=mpg, DC=local&lt;/ds:X509IssuerName&gt; &lt;ds:X509SerialNumber&gt;2408480482046566660373395480477785912053334132&lt;/ds:X509SerialNumber&gt; &lt;/ds:X509IssuerSerial&gt; &lt;/ds:X509Data&gt; &lt;/ds:KeyInfo&gt; &lt;ds:Object&gt; &lt;xades:QualifyingProperties xmlns:xades=&apos;http://uri.etsi.org/01903/v1.3.2#&apos;&gt; &lt;xades:SignedProperties Id=&apos;_bc5f12eb-48c6-4288-8d90-7712a546160f-signedprops&apos;&gt; &lt;xades:SignedSignatureProperties&gt; &lt;xades:SigningTime&gt;2022-12-20T17:58:10+05:00&lt;/xades:SigningTime&gt; &lt;/xades:SignedSignatureProperties&gt; &lt;/xades:SignedProperties&gt; &lt;/xades:QualifyingProperties&gt; &lt;/ds:Object&gt; &lt;/ds:Signature&gt; &lt;/Sgntr&gt; &lt;/AppHdr&gt; &lt;Document xmlns=&apos;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08&apos;&gt; &lt;FIToFICstmrCdtTrf&gt; &lt;GrpHdr&gt; &lt;MsgId&gt;${batchID}&lt;/MsgId&gt; &lt;CreDtTm&gt;2022-12-20T17:55:56.372Z&lt;/CreDtTm&gt; &lt;BtchBookg&gt;true&lt;/BtchBookg&gt; &lt;NbOfTxs&gt;2&lt;/NbOfTxs&gt; &lt;TtlIntrBkSttlmAmt Ccy=&apos;PKR&apos;&gt;2.0&lt;/TtlIntrBkSttlmAmt&gt; &lt;IntrBkSttlmDt&gt;2022-12-20&lt;/IntrBkSttlmDt&gt; &lt;SttlmInf&gt; &lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt; &lt;/SttlmInf&gt; &lt;/GrpHdr&gt; &lt;CdtTrfTxInf&gt; &lt;PmtId&gt; &lt;InstrId&gt;TEST-02&lt;/InstrId&gt; &lt;EndToEndId&gt;TEST-02&lt;/EndToEndId&gt; &lt;TxId&gt;TEST-02&lt;/TxId&gt; &lt;/PmtId&gt; &lt;PmtTpInf&gt; &lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt; &lt;SvcLvl&gt; &lt;Prtry&gt;0100&lt;/Prtry&gt; &lt;/SvcLvl&gt; &lt;LclInstrm&gt; &lt;Prtry&gt;CSDC&lt;/Prtry&gt; &lt;/LclInstrm&gt; &lt;CtgyPurp&gt; &lt;Prtry&gt;027&lt;/Prtry&gt; &lt;/CtgyPurp&gt; &lt;/PmtTpInf&gt; &lt;IntrBkSttlmAmt Ccy=&apos;PKR&apos;&gt;1.0&lt;/IntrBkSttlmAmt&gt; &lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt; &lt;InstgAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/InstgAgt&gt; &lt;InstdAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/InstdAgt&gt; &lt;Dbtr&gt; &lt;Nm&gt;CDC&lt;/Nm&gt; &lt;/Dbtr&gt; &lt;DbtrAcct&gt; &lt;Id&gt; &lt;Othr&gt; &lt;Id&gt;123456789&lt;/Id&gt; &lt;/Othr&gt; &lt;/Id&gt; &lt;/DbtrAcct&gt; &lt;DbtrAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/DbtrAgt&gt; &lt;CdtrAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/CdtrAgt&gt; &lt;Cdtr&gt; &lt;Nm&gt;MUHUMMAD KASHIF KHAN&lt;/Nm&gt; &lt;Id&gt; &lt;PrvtId&gt; &lt;Othr&gt; &lt;Id&gt;8855960000016&lt;/Id&gt; &lt;SchmeNm&gt; &lt;Prtry&gt;CNIC&lt;/Prtry&gt; &lt;/SchmeNm&gt; &lt;/Othr&gt; &lt;/PrvtId&gt; &lt;/Id&gt; &lt;/Cdtr&gt; &lt;CdtrAcct&gt; &lt;Id&gt; &lt;Othr&gt; &lt;Id&gt;PK55HABB0164030049946271&lt;/Id&gt; &lt;/Othr&gt; &lt;/Id&gt; &lt;/CdtrAcct&gt; &lt;InstrForCdtrAgt&gt; &lt;InstrInf&gt;Dividend&lt;/InstrInf&gt; &lt;/InstrForCdtrAgt&gt; &lt;Purp&gt; &lt;Prtry&gt;027&lt;/Prtry&gt; &lt;/Purp&gt; &lt;RmtInf&gt; &lt;Ustrd&gt;JS-DCR-D-23&lt;/Ustrd&gt; &lt;/RmtInf&gt; &lt;/CdtTrfTxInf&gt; &lt;CdtTrfTxInf&gt; &lt;PmtId&gt; &lt;InstrId&gt;TEST-03&lt;/InstrId&gt; &lt;EndToEndId&gt;TEST-03&lt;/EndToEndId&gt; &lt;TxId&gt;TEST-03&lt;/TxId&gt; &lt;/PmtId&gt; &lt;PmtTpInf&gt; &lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt; &lt;SvcLvl&gt; &lt;Prtry&gt;0100&lt;/Prtry&gt; &lt;/SvcLvl&gt; &lt;LclInstrm&gt; &lt;Prtry&gt;CSDC&lt;/Prtry&gt; &lt;/LclInstrm&gt; &lt;CtgyPurp&gt; &lt;Prtry&gt;027&lt;/Prtry&gt; &lt;/CtgyPurp&gt; &lt;/PmtTpInf&gt; &lt;IntrBkSttlmAmt Ccy=&apos;PKR&apos;&gt;1.0&lt;/IntrBkSttlmAmt&gt; &lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt; &lt;InstgAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/InstgAgt&gt; &lt;InstdAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/InstdAgt&gt; &lt;Dbtr&gt; &lt;Nm&gt;CDC&lt;/Nm&gt; &lt;/Dbtr&gt; &lt;DbtrAcct&gt; &lt;Id&gt; &lt;Othr&gt; &lt;Id&gt;123456789&lt;/Id&gt; &lt;/Othr&gt; &lt;/Id&gt; &lt;/DbtrAcct&gt; &lt;DbtrAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/DbtrAgt&gt; &lt;CdtrAgt&gt; &lt;FinInstnId&gt; &lt;ClrSysMmbId&gt; &lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt; &lt;/ClrSysMmbId&gt; &lt;/FinInstnId&gt; &lt;/CdtrAgt&gt; &lt;Cdtr&gt; &lt;Nm&gt;MUHUMMAD KASHIF KHAN&lt;/Nm&gt; &lt;Id&gt; &lt;PrvtId&gt; &lt;Othr&gt; &lt;Id&gt;8855960000016&lt;/Id&gt; &lt;SchmeNm&gt; &lt;Prtry&gt;CNIC&lt;/Prtry&gt; &lt;/SchmeNm&gt; &lt;/Othr&gt; &lt;/PrvtId&gt; &lt;/Id&gt; &lt;/Cdtr&gt; &lt;CdtrAcct&gt; &lt;Id&gt; &lt;Othr&gt; &lt;Id&gt;PK55HABB0164030049946271&lt;/Id&gt; &lt;/Othr&gt; &lt;/Id&gt; &lt;/CdtrAcct&gt; &lt;InstrForCdtrAgt&gt; &lt;InstrInf&gt;Dividend&lt;/InstrInf&gt; &lt;/InstrForCdtrAgt&gt; &lt;Purp&gt; &lt;Prtry&gt;027&lt;/Prtry&gt; &lt;/Purp&gt; &lt;RmtInf&gt; &lt;Ustrd&gt;JS-DCR-D-23&lt;/Ustrd&gt; &lt;/RmtInf&gt; &lt;/CdtTrfTxInf&gt; &lt;/FIToFICstmrCdtTrf&gt; &lt;/Document&gt; &lt;/Body&gt; &lt;/DataPDU&gt;&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(40000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID}&quot;),eq(&quot;type&quot;, &quot;pacs.008.001.08&quot;))).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;batchId&quot;).toString()+&quot;\n\n&quot;;
type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage= &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Getting the object id and storing in var
isoID = document.getObjectId(&quot;_id&quot;);
vars.putObject(&quot;isoID&quot;, isoID);

//Looping
// Start
//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;);
ArrayList&lt;String&gt; strList1 = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object to store Instruction Ids
ArrayList&lt;String&gt; instr_Ids = new ArrayList&lt;String&gt;(); 
ArrayList&lt;String&gt; instr_list = new ArrayList&lt;String&gt;(); 



int count1 = 0;
count1 = strList1.size();
if (count1 != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count1; i++)
	{

		//Getting InstructionIDs
		String inst = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFICstmrCdtTrf&quot;).get(&quot;CdtTrfTxInf&quot;).getAt(i).get(&quot;PmtId&quot;).get(&quot;InstrId&quot;).get(&quot;_text&quot;).toString();
		instr_Ids.add(inst);
		String instrid = &quot;\n&quot;+&quot;Instruction &quot;+ i + &quot; is: &quot; +inst;
		instr_list.add(instrid);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty&quot;);
	}

// End




////TYPE PACS.002
//Document document1 = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID}&quot;), eq(&quot;refIsoMessageId&quot;,isoID), eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;))).last();
//type2= &quot;\n\n&quot;+&quot;Type is: &quot;+document1.get(&quot;type&quot;).toString()+&quot;\n&quot;;
//mode2= &quot;Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
//status2= &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
//stage2= &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
//
//
////Loop for all the instructions in a batch // Start
//
////Getting the ARRAY of Instructions
//stat_txt = document1.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;);
//ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(stat_txt); 
//
//// Create an ArrayList object &apos;finalList&apos;
//ArrayList&lt;String&gt; stat_txt2 = new ArrayList&lt;String&gt;(); 
//
//int count = 0;
//count = strList.size();
//if (count != 0)
//{
//	String [] arr;
//	for(int i = 0; i &lt; count; i++)
//	{
//		stat_var=document1.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).getAt(i).get(&quot;TxSts&quot;).get(&quot;_text&quot;).toString();
//		String stat_txt1 = &quot;\n&quot;+&quot;Status Text for Instruction &quot;+i+&quot; is: &quot;+stat_var;
//		stat_txt2.add(stat_txt1);
//		}
//}
//
//else 
//{
//	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
//	}


vars.putObject(&quot;instr_Ids&quot;, instr_Ids);

return batch_id+type+mode+status+stage+instr_list;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-669423811">BatchID is: ${batchID}

Type is: pacs.008.001.08
Mode is: inbound
Status is: Initiated
Stage is: NotStarted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isoinboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(20000);

MongoCollection&lt;Document&gt; IsoInboundTransactions = vars.getObject(&quot;IsoInboundTransactions&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoInboundTransactions.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;transactionMetaData&quot;).get(&quot;batchId&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instr_Ids = vars.getObject(&quot;instr_Ids&quot;);


// Create an ArrayList object &apos;instlist&apos;
ArrayList&lt;String&gt; instlist = new ArrayList&lt;String&gt;(); 

// Create an ArrayList object &apos;statlist&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;();


int instr_count = 0;
instr_count = instr_Ids.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = IsoInboundTransactions.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;transactionMetaData.instructionId&quot;,instr_Ids[i]))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		host_var = document1.get(&quot;host&quot;).toString();
		objid = document1.getObjectId(&quot;_id&quot;);
		instlist.add(objid);
		
		
		try {
			responseMsg = document1.get(&quot;response&quot;).get(&quot;Response_Message&quot;).toString();
			String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+instr_Ids[i]+&quot;): host is &quot;+host_var+&quot; , Status is &quot;+stat_var+ &quot; , Response Message is &quot; +responseMsg;
			statlist.add(result);
		}
		catch (Exception e) 
		{
			responseMsg = document1.get(&quot;response&quot;).getAt(0).get(&quot;Response_Message&quot;).toString();
			String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+instr_Ids[i]+&quot;): host is &quot;+host_var+&quot; , Status is &quot;+stat_var+ &quot; , Response Message is &quot; +responseMsg;
			statlist.add(result);
			}
		
		
		
		
		}
}

else 
{
	log.info(&quot;Instructions Array is empty&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);
vars.putObject(&quot;host_var&quot;, host_var);
vars.putObject(&quot;isoinbound_ids&quot;, instlist);


Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="578079082">Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2055364939">BranchlessBanking</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">host_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1015384198">[
host is BranchlessBanking , Status is Failure ,
host is BranchlessBanking , Status is Failure ]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);

MongoCollection&lt;Document&gt; CbsRequestQueues = vars.getObject(&quot;CbsRequestQueues&quot;);


// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);


Document document = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
//status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		log.info(&quot;Ifrah1&quot;);
		Document document1 = CbsRequestQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		String stat = &quot;\n&quot;+&quot;Status of Instruction &quot;+i+&quot; is: &quot;+ stat_var;
		statlist.add(stat);
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="cbsresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(20000);

MongoCollection&lt;Document&gt; CbsResponseQueues = vars.getObject(&quot;CbsResponseQueues&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = CbsResponseQueues.find(eq(&apos;isoMessageId&apos;, isoID)).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
//status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


////Loop for all the documents in a collection
//// Start
// Getting the array
String [] instlist = vars.getObject(&quot;isoinbound_ids&quot;);
String [] instr_Ids = vars.getObject(&quot;instr_Ids&quot;);


// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; statlist = new ArrayList&lt;String&gt;(); 


int instr_count = 0;
instr_count = instlist.size();
if (instr_count != 0)
{
	//String [] arr;
	for(int i = 0; i &lt; instr_count; i++)
	{
		Document document1 = CbsResponseQueues.find(and(eq(&quot;isoMessageId&quot;,isoID),eq(&quot;isoInboundTransactionId&quot;,new ObjectId(instlist[i])))).last();
		stat_var = document1.get(&quot;status&quot;).toString();
		host_var = document1.get(&quot;host&quot;).toString();
		processingStatus = document1.get(&quot;processingStatus&quot;).toString();
		try {
			responseMsg = document1.get(&quot;response&quot;).get(&quot;Response_Message&quot;).toString();
			String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+instlist[i]+&quot;): Status is &quot;+stat_var+ &quot; , Host is &quot;+host_var+&quot; , Processing Status is: &quot;+processingStatus+ &quot; , Response Message is &quot; +responseMsg;
		statlist.add(result);
		}
		catch (Exception e) 
		{
			responseMsg = document1.get(&quot;response&quot;).getAt(0).get(&quot;Response_Message&quot;).toString();
			String result = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+instr_Ids[i]+&quot;): Status is &quot;+stat_var+ &quot; , Host is &quot;+host_var+&quot; , Processing Status is: &quot;+processingStatus+ &quot; , Response Message is &quot; +responseMsg;
		statlist.add(result);
			}
	
		
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+statlist;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="909208366">Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(5000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

log.info(&quot;This is isoID &quot; + isoID )

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;, &quot;status&quot;))).last();
batch_id = &quot;BatchID is: &quot;+document.get(&quot;batchId&quot;).toString()+&quot;\n&quot;;

log.info(&quot;This is batchID &quot; + batch_id)
type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;instructions&quot;);
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 

int count = 0;
count = strList.size();
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		stat_var = document.get(&quot;request&quot;).get(&quot;instructions&quot;).getAt(i).get(&quot;reportedStatus&quot;).get(&quot;name&quot;).toString();
		String instr = &quot;\n&quot;+&quot;Status of Instruction &quot;+i+&quot; is: &quot;+stat_var;
//		log.info(instr);
		finalList.add(instr);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End

//Put it in a variable:
vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+type+mode+status+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-242343441">Returned</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1264213564">BatchID is: ${batchID}
Type is: status
Mode is: outbound
Status is: Success</stringProp>
                <stringProp name="2068815703">[
Status of Instruction 0 is: Returned, 
Status of Instruction 1 is: Returned]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(5000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

// getting the object id of &apos;isomessages&apos;
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;, &quot;pacs.004.001.09&quot;))).last();

batch_id = &quot;BatchID is: &quot;+document.get(&quot;batchId&quot;).toString()+&quot;\n&quot;;
log.info(&quot;This is batchID &quot; + batch_id)

type= &quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
//Getting the object id
objID = document.getObjectId(&quot;_id&quot;);
vars.putObject(&quot;objID&quot;, objID);


//Loop for all the instructions in a batch // Start

//Getting the ARRAY of Instructions
instr_array = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;PmtRtr&quot;).get(&quot;TxInf&quot;);
log.info(instr_array.toString());
ArrayList&lt;String&gt; strList = (ArrayList&lt;String&gt;) Arrays.asList(instr_array); 

// Create an ArrayList object &apos;finalList&apos;
ArrayList&lt;String&gt; finalList = new ArrayList&lt;String&gt;(); 
ArrayList&lt;String&gt; stat_txt2 = new ArrayList&lt;String&gt;();

int count = 0;
count = strList.size();
count1 = count;
if (count != 0)
{
	String [] arr;
	for(int i = 0; i &lt; count; i++)
	{
		InstrId = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;PmtRtr&quot;).get(&quot;TxInf&quot;).getAt(i).get(&quot;OrgnlInstrId&quot;).get(&quot;_text&quot;).toString();
		RejReason = document.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;PmtRtr&quot;).get(&quot;TxInf&quot;).getAt(i).get(&quot;RtrRsnInf&quot;).get(&quot;Rsn&quot;).get(&quot;Prtry&quot;).get(&quot;_text&quot;).toString();
		
		String stat_var = &quot;\n&quot;+&quot;Instruction &quot;+i+ &quot; (&quot;+InstrId+&quot;) is rejected due to &quot;+RejReason;
		finalList.add(stat_var);
		log.info(finalList.toString());
		}
}

else 
{
	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
	}

// End


//
////TYPE PACS.002
//
//Document document1 = IsoMessages.find(and(eq(&quot;batchId&quot;,&quot;${batchID}&quot;), eq(&quot;refIsoMessageId&quot;,objID) ,eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;))).last();
//type2= &quot;\n\n&quot;+&quot;Type is: &quot;+document1.get(&quot;type&quot;).toString()+&quot;\n&quot;;
//mode2= &quot;Mode is: &quot;+document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
//status2= &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
//stage2= &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;
//
//listsize = count1;
//if (count1 != 0)
//{
//	String [] arr;
//	for(int i = 0; i &lt; count1; i++)
//	{
//		if (listsize == 1){
//			stat_var = document1.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).get(&quot;TxSts&quot;).get(&quot;_text&quot;).toString();
//		String stat_txt1 = &quot;\n&quot;+&quot;Status Text for Instruction &quot;+i+&quot; is: &quot;+stat_var;
//		stat_txt2.add(stat_txt1);
//		}
//
//		else{
//		stat_var=document1.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).getAt(i).get(&quot;TxSts&quot;).get(&quot;_text&quot;).toString();
//		String stat_txt1 = &quot;\n&quot;+&quot;Status Text for Instruction &quot;+i+&quot; is: &quot;+stat_var;
//		stat_txt2.add(stat_txt1);
//		}
//	}
//}
//
//else 
//{
//	log.info(&quot;Instructions Array is empty in status document recieved from SBP&quot;);
//	}
//


//Put it in a variable:
//vars.putObject(&quot;stat_var&quot;, stat_var);

Thread. sleep(1000)
return batch_id+type+mode+status+finalList;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-242343441">Returned</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">stat_var</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1550277141">BatchID is: ${batchID}
Type is: pacs.004.001.09
Mode is: outbound
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="batches" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; Batches = vars.getObject(&quot;Batches&quot;);

Document document = Batches.find(eq(&quot;batchId&quot;,&quot;${batchID}&quot;)).sort({createdAt:-1}).last();
batch_id = &quot;BatchID is: &quot;+&quot;${batchID}&quot;.toString()+&quot;\n&quot;;
mode = &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state = &quot;State is: &quot;+document.get(&quot;state&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return batch_id+mode+state;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="370838764">State is: COMPLETED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BB - P2P Inward Flow(Blocked Account)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">ba53eeeee3a711ebadd67f3772</stringProp>
            <stringProp name="variableName">traceReference3</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">C3JSBLPKKA90870000000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorName" elementType="Argument">
                <stringProp name="Argument.name">CreditorName</stringProp>
                <stringProp name="Argument.value">ZOHAIB ALI KHAN</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK55HABB0164030049946271</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorName" elementType="Argument">
                <stringProp name="Argument.name">DebitorName</stringProp>
                <stringProp name="Argument.value">ABC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebitorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebitorIBAN</stringProp>
                <stringProp name="Argument.value">PK28JSBL9545000000626088</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference3}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402202&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:43Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 \&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/CreDtTm&gt;&lt;BtchBookg&gt;false&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;JSBLPKKA908745603401&lt;/InstrId&gt;&lt;EndToEndId&gt;JSBLPKKA908745603401&lt;/EndToEndId&gt;&lt;TxId&gt;JSBLPKKA9087456034&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;021&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;${DebitorName}&lt;/Nm&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${DebitorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;${CreditorName}&lt;/Nm&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${CreditorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;RmtInf&gt;&lt;Ustrd&gt;testing1&lt;/Ustrd&gt;&lt;/RmtInf&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgId</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
//msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document1.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n\n&quot;;

// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2P Outbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
//status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;


if(document2.get(&quot;state&quot;).toString()==&quot;RJCT&quot;){
	RejectedReason = document2.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).get(&quot;StsRsnInf&quot;).get(&quot;Rsn&quot;).get(&quot;Prtry&quot;).get(&quot;_text&quot;).toString();

	status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot; with Reason: &quot;+RejectedReason+&quot;\n&quot;;
}
else{
	status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
}
	 
return message1+mode1+status1+stage1+paymentFlowStage+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2007467121">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentReceived


P2P Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Success with Reason: IncorrectAccountNumber
Pacs 002 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

    Thread.sleep(3000);

    MongoCollection &lt; Document &gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


    // Getting the object id of P2Pisomessages
    def isoID = vars.getObject(&quot;isoID&quot;);

    Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;, isoID), eq(&quot;type&quot;, &quot;Validate&quot;))).last();
    type = &quot;Type is: &quot; + document.get(&quot;type&quot;).toString() + &quot;\n&quot;;
    msgID = &quot;Msg Id is: &quot; + document.get(&quot;msgId&quot;).toString() + &quot;\n&quot;;
    procsby = &quot;Processed By is: &quot; + document.get(&quot;processedBy&quot;).toString() + &quot;\n&quot;;

    ResponseCode= &quot;Response Code Received from BB is: &quot;+document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Response_code&quot;).toString()+&quot;\n&quot;;
ResponseMsg= &quot;Response Message Received from BB is: &quot;+document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Response_Message&quot;).toString()+&quot;\n&quot;;
//AccountStatus= &quot;Account Status Received from BB is: &quot;+document.get(&quot;response&quot;).get(&quot;result&quot;).get(&quot;Account_Status&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status+ResponseCode+ResponseMsg;

    return type + msgID + procsby  + responseReason;
} catch (Exception e) {
    SampleResult.setSuccessful(false);
    SampleResult.setResponseCode(&quot;500&quot;);
    SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-415751790">Type is: Validate
Msg Id is: ${msgID}
Processed By is: BranchlessBanking
Status is: Failure
Response Code Received from BB is: 2101
Response Message Received from BB is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID3}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2P Outbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1447157020">P2P Inbound Pacs.008 document details: 
Pacs 008 MsgID is: ${msgID3}
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress

P2P Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;; 
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1184482340">Type is: Validate
Msg Id is: ${msgID3}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference3}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}/003&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-12T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;pc624bklwur2jpj98w92&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;pc624bklwur2jpj98w92&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;pc624bklwur2jpj98w92&lt;/OrgnlTxId&gt;&lt;TxSts&gt;RJCT&lt;/TxSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EL201&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Document was rejected by counterparty&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;IncorrectAccountNumber&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Account number is invalid or missing&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
              <stringProp name="variableName">msgId</stringProp>
              <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="randomSeed">9695</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
              <stringProp name="variableName">MsgId</stringProp>
              <stringProp name="outputFormat">M1789930/002</stringProp>
              <stringProp name="minimumValue">002</stringProp>
              <stringProp name="maximumValue">999</stringProp>
              <stringProp name="randomSeed">006</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(3000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;), eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

Thread. sleep(2000);

// Pacs 002 Inbound
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).sort({createdAt:-1}).last();
message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

if(document2.get(&quot;state&quot;).toString()==&quot;RJCT&quot;){
	RejectedReason = document2.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).get(&quot;StsRsnInf&quot;).getAt(0).get(&quot;AddtlInf&quot;).get(&quot;_text&quot;).toString();

	status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot; with Reason: &quot;+RejectedReason+&quot;\n&quot;;
}
else{
	status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString();
}
	 
return message1+mode1+status1+stage1+message2+mode2+state2+stage2+status2;
//return message1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="835785649">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Stage is: Completed
Pacs 002 Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

//def msgid = vars.getObject(&quot;msgID&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID3}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message1 = &quot;P2P Inbound Pacs.008 document details: \n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;

// Pacs 002 Inbound
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+ document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
reason = &quot;Pacs 002 Rejected Reason is: &quot;+document2.get(&apos;request&apos;).get(&apos;DataPDU&apos;).get(&apos;Body&apos;).get(&apos;Document&apos;).get(&apos;FIToFIPmtStsRpt&apos;).get(&apos;TxInfAndSts&apos;).get(&apos;StsRsnInf&apos;).getAt(1).get(&apos;Rsn&apos;).get(&apos;Prtry&apos;).get(&apos;_text&apos;).toString()+&quot;\n&quot;;
addinfo = &quot;Pacs 002 Rejected Reason Additional Info is: &quot;+document2.get(&apos;request&apos;).get(&apos;DataPDU&apos;).get(&apos;Body&apos;).get(&apos;Document&apos;).get(&apos;FIToFIPmtStsRpt&apos;).get(&apos;TxInfAndSts&apos;).get(&apos;StsRsnInf&apos;).getAt(1).get(&apos;AddtlInf&apos;).get(&apos;_text&apos;).toString()+&quot;\n\n\n&quot;;
//reason = &quot;Pacs 002 Rejected Reason is: &quot;+document2.get(&apos;request&apos;).toString()+&quot;\n&quot;;
	 
return message1+mode1+status1+stage1+message2+mode2+state2+status2+stage2+reason+addinfo;
//return mode1+status1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="329248691">P2P Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Failure
Pacs 002 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BB - P2P Outward Flow(Blocked Account)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">C6LOCALTESTING0000000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference6</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2POutboundTransactions = database.getCollection(vars.get(&quot;P2POutboundTransactions&quot;));
vars.putObject(&quot;P2POutboundTransactions&quot;, P2POutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate Payment" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB103101271712000643&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;PK42UNIL0109000213301578&quot;,&#xd;
            &quot;name&quot;: &quot;Ali Khan&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;UNILPKKARTG&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;PK55HABB0164030049946271&quot;,&#xd;
            &quot;name&quot;: &quot;HZRU ZASIZ&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/p2ppayment</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51514">406</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1273575271">{&quot;errors&quot;:[{&quot;type&quot;:&quot;Main&quot;,&quot;code&quot;:&quot;704&quot;,&quot;subCode&quot;:&quot;IncorrectAccountNumber&quot;,&quot;message&quot;:&quot;Account number is invalid or missing&quot;}]}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID6}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-871656001">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID6}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="false">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Transfer&quot;))).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
type =&quot;Pacs 008 Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Pacs 008 MsgID is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Pacs 008 Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Pacs 008 Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return message1+type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="236471927">P2P Outbound Pacs.008 document details: 
Pacs 008 Type is: Payment
Pacs 008 MsgID is: MB${msgID6}
Pacs 008 Sub-Type is: Transfer
Pacs 008 Processed By is: CoreBanking
Pacs 008 Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1151035635">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(2000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1991574108">Type is: Payment
Msg Id is: MB${msgID}
Processed By: BranchlessBanking
Status is: Initiated</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002 RJCT" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference6}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;MB${msgID}/003&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-12T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;MBZbwuKJN75kGogD1Tt8_Dfd8&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;MBZbwuKJN75kGogD1Tt8_Dfd8&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MBZbwuKJN75kGogD1Tt8_Dfd8&lt;/OrgnlTxId&gt;&lt;TxSts&gt;RJCT&lt;/TxSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EL201&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Document was rejected by counterparty&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;IncorrectAccountNumber&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Account number is invalid or missing&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <stringProp name="variableName">traceReference</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
                  <stringProp name="variableName">msgID</stringProp>
                  <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
                  <stringProp name="variableName">MsgId</stringProp>
                  <stringProp name="outputFormat">M1789930/002</stringProp>
                  <stringProp name="minimumValue">002</stringProp>
                  <stringProp name="maximumValue">999</stringProp>
                  <stringProp name="randomSeed">006</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID6}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-791178532">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID6}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Reversal&quot;))).sort({createdAt:-1}).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-964491955">Type is: Payment
Msg Id is: MB${msgID6}
Sub-Type is: Reversal
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
reason = document2.get(&quot;request&quot;).get(&quot;DataPDU&quot;).get(&quot;Body&quot;).get(&quot;Document&quot;).get(&quot;FIToFIPmtStsRpt&quot;).get(&quot;TxInfAndSts&quot;).get(&quot;StsRsnInf&quot;).getAt(1).get(&quot;Rsn&quot;).get(&quot;Prtry&quot;).get(&quot;_text&quot;).toString();
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot; due to &quot;+reason+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1743219238">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT due to IncorrectAccountNumber
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Reversal&quot;))).sort({createdAt:-1}).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1105565577">Type is: Payment
Msg Id is: MB${msgID}
Sub-Type is: Reversal
Processed By is: BranchlessBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M Inward RJCT Scenario (Pacs.002 RJCT)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
          <stringProp name="variableName">msgID</stringProp>
          <stringProp name="outputFormat">T10TestMsgID00000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="outputFormat">T7_TestMsgID00000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed">9695</stringProp>
          <stringProp name="variableName">traceReference</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorIBAN10" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN10</stringProp>
                <stringProp name="Argument.value">PK32HABB0000477948641001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebtorIBAN10" elementType="Argument">
                <stringProp name="Argument.name">DebtorIBAN10</stringProp>
                <stringProp name="Argument.value">PK84BAHL1063008100002401</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorBank" elementType="Argument">
                <stringProp name="Argument.name">CreditorBank</stringProp>
                <stringProp name="Argument.value">BAHLPKKA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InstructionId" elementType="Argument">
                <stringProp name="Argument.name">InstructionId</stringProp>
                <stringProp name="Argument.value">Inst-2023-001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2mhostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402202&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:43Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 \&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/CreDtTm&gt;&lt;BtchBookg&gt;false&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;${InstructionId}&lt;/InstrId&gt;&lt;EndToEndId&gt;${InstructionId}&lt;/EndToEndId&gt;&lt;TxId&gt;${InstructionId}&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;021&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;${DebitorName10}&lt;/Nm&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${DebitorIBAN}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;${CreditorName}&lt;/Nm&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${CreditorIBAN10}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;RmtInf&gt;&lt;Ustrd&gt;testing1&lt;/Ustrd&gt;&lt;/RmtInf&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2m/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message = &quot;P2M Inbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
paymentTraceId =&quot;Pacs 008 Payment Trace Id is: &quot;+ document.get(&quot;paymentTraceId&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot; + document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot; + document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot; +document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2M Outbound Pacs.002 document details: \n&quot;;
msgID2=&quot;Pacs 002 MsgID is: &quot;+ document2.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
	 
return message+msgId+paymentTraceId+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2+msgID2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1077348186">P2M Inbound Pacs.008 document details: 
Pacs 008 MsgID is: ${msgID}
Pacs 008 Payment Trace Id is: ${traceReference}
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentReceived

P2M Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;msgId&quot;,&quot;${msgID}&quot;),eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
response =&quot;Response is: \n&quot;+ document.get(&quot;response&quot;).toString()+&quot;\n\n&quot;;
	 
return type+msgID+procsby+status+response;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-540776971">Type is: Validate
Msg Id is: ${msgID}
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}/001&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-12T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${InstructionId}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${InstructionId}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;${InstructionId}&lt;/OrgnlTxId&gt;&lt;TxSts&gt;RJCT&lt;/TxSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EL201&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Document was rejected by counterparty&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;IncorrectAccountNumber&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Account number is invalid or missing&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;PMCT&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;), eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message = &quot;P2M Inbound Pacs.008 document details: \n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;

Thread. sleep(10000);

// Pacs 002 Inbound
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2;
//return message1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-854649494">P2M Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: PaymentDeclined

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Failure
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M Outward - Reversal Scenario" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">T2TestMsgID00000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">T2_TestMsgID00000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK84BAHL1063008100002401</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebtorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebtorIBAN</stringProp>
                <stringProp name="Argument.value">PK09HABB0000927900524203</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorBank" elementType="Argument">
                <stringProp name="Argument.name">CreditorBank</stringProp>
                <stringProp name="Argument.value">BAHLPKKA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorSubCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorSubCode</stringProp>
                <stringProp name="Argument.value">IncorrectAccountNumber</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorMessage" elementType="Argument">
                <stringProp name="Argument.name">ErrorMessage</stringProp>
                <stringProp name="Argument.value">Account number is invalid or missing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="code" elementType="Argument">
                <stringProp name="Argument.name">code</stringProp>
                <stringProp name="Argument.value">704</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2MOutboundTransactions = database.getCollection(vars.get(&quot;P2MOutboundTransactions&quot;));
vars.putObject(&quot;P2MOutboundTransactions&quot;, P2MOutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB1031012717120060645&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;instrForCdtrBank&quot;: &quot;ABC&quot;,&#xd;
        &quot;rmtInf&quot;: &quot;XYZ&quot;,&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${CreditorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;KHURRAM RAZA&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;merchantName&quot;: &quot;COMPANY CO.&quot;,&#xd;
                &quot;merchantChannel&quot;: &quot;400&quot;,&#xd;
                &quot;storeLabel&quot;: &quot;SOME BRANCH&quot;,&#xd;
                &quot;website&quot;: &quot;www.merchant.pk&quot;,&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520420&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-123&quot;,&#xd;
                &quot;email&quot;: &quot;payee@karachi.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;terminalNumber&quot;: &quot;LABEL&quot;,&#xd;
                &quot;address&quot;: &quot;Free Format Address&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;taxId&quot;: &quot;733738292928PK&quot;,&#xd;
            &quot;referenceInfo&quot;: {&#xd;
                &quot;code&quot;: &quot;INVN&quot;,&#xd;
                &quot;value&quot;: &quot;PK7822222UIH88891&quot;&#xd;
            },&#xd;
            &quot;merchantId&quot;: &quot;229999999&quot;,&#xd;
            &quot;merchantCategoryCode&quot;: &quot;5411&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;${CreditorBank}&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${DebtorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;MUHAMMAD OMER&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520410&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-3055520419&quot;,&#xd;
                &quot;email&quot;: &quot;payer@raast.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;street&quot;: &quot;GREEN STREET&quot;,&#xd;
                &quot;building&quot;: &quot;1&quot;,&#xd;
                &quot;room&quot;: &quot;2&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;customerLabel&quot;: &quot;BLK&quot;,&#xd;
            &quot;loyaltyNumber&quot;: &quot;MU303&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/payment/p2m</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51514">406</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1520830367">${ErrorSubCode}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;



// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId= document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


return message+msgId+mode+status+stage+paymentFlowStage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="959790513">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentPosting
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def pacs008_ObjId= vars.getObject(&quot;pacs008_ObjId&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
direction = &quot;Direction is: &quot;+document.get(&quot;direction&quot;).toString()+&quot;\n&quot;;
subType = &quot;Sub Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+direction+subType+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-979907318">Type is: Payment
Msg Id is: MB${msgID}
Direction is: FROM_DEBITOR_ACCOUNT_TO_SETLLEMENT_ACCOUNT
Sub Type is: Transfer
Processed By is: CoreBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
     &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2023-10-26T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2023-10-26T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2023-10-26T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${msgID}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;${msgID}&lt;/OrgnlTxId&gt;&lt;TxSts&gt;RJCT&lt;/TxSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EL201&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Document was rejected by counterparty&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;${ErrorSubCode}&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;${ErrorMessage}&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2023-10-26&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;


try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status=&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+msgId+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="899605047">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: ReversalProcessed

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);


// Getting the object id of P2Misomessages
def pacs008_ObjId = vars.getObject(&quot;pacs008_ObjId&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Reversal&quot;))).sort({createdAt:-1}).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1405296869">Type is: Payment
Msg Id is: MB${msgID}
Sub-Type is: Reversal
Processed By is: CoreBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M Outward (BB) - Reversal Scenario" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
            <stringProp name="variableName">msgID</stringProp>
            <stringProp name="outputFormat">T2TestMsgID00000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">T2_TestMsgID00000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorIBAN" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN</stringProp>
                <stringProp name="Argument.value">PK84BAHL1063008100002401</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebtorIBAN" elementType="Argument">
                <stringProp name="Argument.name">DebtorIBAN</stringProp>
                <stringProp name="Argument.value">PK55HABB0164030049946271</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorBank" elementType="Argument">
                <stringProp name="Argument.name">CreditorBank</stringProp>
                <stringProp name="Argument.value">BAHLPKKA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorSubCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorSubCode</stringProp>
                <stringProp name="Argument.value">IncorrectAccountNumber</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorMessage" elementType="Argument">
                <stringProp name="Argument.name">ErrorMessage</stringProp>
                <stringProp name="Argument.value">Account number is invalid or missing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="code" elementType="Argument">
                <stringProp name="Argument.name">code</stringProp>
                <stringProp name="Argument.value">704</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2MOutboundTransactions = database.getCollection(vars.get(&quot;P2MOutboundTransactions&quot;));
vars.putObject(&quot;P2MOutboundTransactions&quot;, P2MOutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;instruction&quot;: {&#xd;
        &quot;instructionId&quot;: &quot;MB1031012717120060645&quot;,&#xd;
        &quot;amount&quot;: {&#xd;
            &quot;currency&quot;: &quot;PKR&quot;,&#xd;
            &quot;value&quot;: &quot;1&quot;&#xd;
        },&#xd;
        &quot;instrForCdtrBank&quot;: &quot;ABC&quot;,&#xd;
        &quot;rmtInf&quot;: &quot;XYZ&quot;,&#xd;
        &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
        &quot;creditor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${CreditorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;KHURRAM RAZA&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;merchantName&quot;: &quot;COMPANY CO.&quot;,&#xd;
                &quot;merchantChannel&quot;: &quot;400&quot;,&#xd;
                &quot;storeLabel&quot;: &quot;SOME BRANCH&quot;,&#xd;
                &quot;website&quot;: &quot;www.merchant.pk&quot;,&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520420&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-123&quot;,&#xd;
                &quot;email&quot;: &quot;payee@karachi.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;terminalNumber&quot;: &quot;LABEL&quot;,&#xd;
                &quot;address&quot;: &quot;Free Format Address&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;taxId&quot;: &quot;733738292928PK&quot;,&#xd;
            &quot;referenceInfo&quot;: {&#xd;
                &quot;code&quot;: &quot;INVN&quot;,&#xd;
                &quot;value&quot;: &quot;PK7822222UIH88891&quot;&#xd;
            },&#xd;
            &quot;merchantId&quot;: &quot;229999999&quot;,&#xd;
            &quot;merchantCategoryCode&quot;: &quot;5411&quot;&#xd;
        },&#xd;
        &quot;cdtrBank&quot;: &quot;${CreditorBank}&quot;,&#xd;
        &quot;debtor&quot;: {&#xd;
            &quot;iban&quot;: &quot;${DebtorIBAN}&quot;,&#xd;
            &quot;name&quot;: &quot;MUHAMMAD OMER&quot;,&#xd;
            &quot;accountType&quot;: &quot;W&quot;,&#xd;
            &quot;contactDetails&quot;: {&#xd;
                &quot;phoneNumber&quot;: &quot;+92-3055520410&quot;,&#xd;
                &quot;mobileNumber&quot;: &quot;+92-3055520419&quot;,&#xd;
                &quot;email&quot;: &quot;payer@raast.pk&quot;,&#xd;
                &quot;latitude&quot;: &quot;24.875061&quot;,&#xd;
                &quot;longitude&quot;: &quot;67.038332&quot;&#xd;
            },&#xd;
            &quot;postalAddress&quot;: {&#xd;
                &quot;street&quot;: &quot;GREEN STREET&quot;,&#xd;
                &quot;building&quot;: &quot;1&quot;,&#xd;
                &quot;room&quot;: &quot;2&quot;,&#xd;
                &quot;city&quot;: &quot;KARACHI&quot;&#xd;
            },&#xd;
            &quot;customerLabel&quot;: &quot;BLK&quot;,&#xd;
            &quot;loyaltyNumber&quot;: &quot;MU303&quot;&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/payment/p2m</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="51514">406</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1520830367">${ErrorSubCode}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;



// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId= document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


return message+msgId+mode+status+stage+paymentFlowStage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="959790513">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentPosting
</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);

// Getting the object id of P2Pisomessages
def pacs008_ObjId= vars.getObject(&quot;pacs008_ObjId&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
direction = &quot;Direction is: &quot;+document.get(&quot;direction&quot;).toString()+&quot;\n&quot;;
subType = &quot;Sub Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+direction+subType+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1942021926">Type is: Payment
Msg Id is: MB${msgID}
Direction is: FROM_DEBITOR_ACCOUNT_TO_SETLLEMENT_ACCOUNT
Sub Type is: Transfer
Processed By is: BranchlessBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
     &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2023-10-26T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2023-10-26T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2023-10-26T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${msgID}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;${msgID}&lt;/OrgnlTxId&gt;&lt;TxSts&gt;RJCT&lt;/TxSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EL201&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Document was rejected by counterparty&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;${ErrorSubCode}&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;${ErrorMessage}&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2023-10-26&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;001&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;


try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;MB${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message = &quot;P2M Outbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status=&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
pacs008_ObjId = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;pacs008_ObjId&quot;, pacs008_ObjId);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+msgId+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="899605047">P2M Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: ReversalProcessed

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);


// Getting the object id of P2Misomessages
def pacs008_ObjId = vars.getObject(&quot;pacs008_ObjId&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;refP2mIsoMessageId&quot;,pacs008_ObjId),eq(&quot;type&quot;,&quot;Payment&quot;),eq(&quot;subType&quot;,&quot;Reversal&quot;))).sort({createdAt:-1}).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
subtype = &quot;Sub-Type is: &quot;+document.get(&quot;subType&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+subtype+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1105565577">Type is: Payment
Msg Id is: MB${msgID}
Sub-Type is: Reversal
Processed By is: BranchlessBanking
Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2M (BB) Inward RJCT Scenario (Pacs.002 RJCT)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_MsgID" enabled="true">
          <stringProp name="variableName">msgID</stringProp>
          <stringProp name="outputFormat">T11TestMsgID00000</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="P2M_traceReference" enabled="true">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">0000</stringProp>
          <stringProp name="outputFormat">T7_TestMsgID00000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed">9695</stringProp>
          <stringProp name="variableName">traceReference</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variable" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CreditorIBAN11" elementType="Argument">
                <stringProp name="Argument.name">CreditorIBAN11</stringProp>
                <stringProp name="Argument.value">PK29HABB0164030049943635</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="DebtorIBAN11" elementType="Argument">
                <stringProp name="Argument.name">DebtorIBAN11</stringProp>
                <stringProp name="Argument.value">PK84BAHL1063008100002401</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CreditorBank" elementType="Argument">
                <stringProp name="Argument.name">CreditorBank</stringProp>
                <stringProp name="Argument.value">BAHLPKKA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="InstructionId" elementType="Argument">
                <stringProp name="Argument.name">InstructionId</stringProp>
                <stringProp name="Argument.value">Inst-2023-001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2mhostresponselogs&apos;
MongoCollection&lt;Document&gt; P2MHostResponselogs = database.getCollection(vars.get(&quot;P2MHostResponselogs&quot;));
vars.putObject(&quot;P2MHostResponselogs&quot;, P2MHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2MIsoMessages = database.getCollection(vars.get(&quot;P2MIsoMessages&quot;));
vars.putObject(&quot;P2MIsoMessages&quot;, P2MIsoMessages);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.008" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.008.001.08&quot;,&#xd;
    &quot;document&quot;: &quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1402202&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.008.001.08&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-13T06:58:43Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08 \&quot;&gt;&lt;FIToFICstmrCdtTrf&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-13T11:58:28.976Z&lt;/CreDtTm&gt;&lt;BtchBookg&gt;false&lt;/BtchBookg&gt;&lt;NbOfTxs&gt;1&lt;/NbOfTxs&gt;&lt;SttlmInf&gt;&lt;SttlmMtd&gt;CLRG&lt;/SttlmMtd&gt;&lt;/SttlmInf&gt;&lt;/GrpHdr&gt;&lt;CdtTrfTxInf&gt;&lt;PmtId&gt;&lt;InstrId&gt;${InstructionId}&lt;/InstrId&gt;&lt;EndToEndId&gt;${InstructionId}&lt;/EndToEndId&gt;&lt;TxId&gt;${InstructionId}&lt;/TxId&gt;&lt;/PmtId&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;021&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;1&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-13&lt;/IntrBkSttlmDt&gt;&lt;ChrgBr&gt;SLEV&lt;/ChrgBr&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;Dbtr&gt;&lt;Nm&gt;Debitor&lt;/Nm&gt;&lt;/Dbtr&gt;&lt;DbtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${DebitorIBAN11}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/DbtrAcct&gt;&lt;DbtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;JSBLPKKA&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/DbtrAgt&gt;&lt;CdtrAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/CdtrAgt&gt;&lt;Cdtr&gt;&lt;Nm&gt;Creditor&lt;/Nm&gt;&lt;/Cdtr&gt;&lt;CdtrAcct&gt;&lt;Id&gt;&lt;IBAN&gt;${CreditorIBAN11}&lt;/IBAN&gt;&lt;/Id&gt;&lt;/CdtrAcct&gt;&lt;RmtInf&gt;&lt;Ustrd&gt;testing1&lt;/Ustrd&gt;&lt;/RmtInf&gt;&lt;/CdtTrfTxInf&gt;&lt;/FIToFICstmrCdtTrf&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2m/iso/pacs/008</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="false">
              <stringProp name="maximumValue">9999</stringProp>
              <stringProp name="minimumValue">0000</stringProp>
              <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed">9695</stringProp>
              <stringProp name="variableName">traceReference</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message = &quot;P2M Inbound Pacs.008 document details: \n&quot;;
msgId =&quot;Pacs 008 MsgID is: &quot;+ document.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
paymentTraceId =&quot;Pacs 008 Payment Trace Id is: &quot;+ document.get(&quot;paymentTraceId&quot;).toString()+&quot;\n&quot;;
mode =&quot;Pacs 008 Mode is: &quot; + document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot; + document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot; +document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();

message2 = &quot;P2M Outbound Pacs.002 document details: \n&quot;;
msgID2=&quot;Pacs 002 MsgID is: &quot;+ document2.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
	 
return message+msgId+paymentTraceId+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2+msgID2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1946861884">P2M Inbound Pacs.008 document details: 
Pacs 008 MsgID is: ${msgID}
Pacs 008 Payment Trace Id is: ${traceReference}
Pacs 008 Mode is: inbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress
Pacs 008 Payment Flow Stage is: PaymentReceived

P2M Outbound Pacs.002 document details: 
Pacs 002 Mode is: outbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2mhostresponselogs" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MHostResponselogs = vars.getObject(&quot;P2MHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2MHostResponselogs.find(and(eq(&quot;msgId&quot;,&quot;${msgID}&quot;),eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Validate&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
response =&quot;Response is: \n&quot;+ document.get(&quot;response&quot;).toString()+&quot;\n\n&quot;;
	 
return type+msgID+procsby+status+response;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1376070312">Type is: Validate
Msg Id is: ${msgID}
Processed By is: BranchlessBanking
Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;${msgID}/001&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-07-12T18:56:45.422 03:00&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;${msgID}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;RJCT&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;${InstructionId}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;${InstructionId}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;${InstructionId}&lt;/OrgnlTxId&gt;&lt;TxSts&gt;RJCT&lt;/TxSts&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;EL201&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Document was rejected by counterparty&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;StsRsnInf&gt;&lt;Rsn&gt;&lt;Prtry&gt;IncorrectAccountNumber&lt;/Prtry&gt;&lt;/Rsn&gt;&lt;AddtlInf&gt;Account number is invalid or missing&lt;/AddtlInf&gt;&lt;/StsRsnInf&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;PMCT&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/p2m/iso/pacs/002</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2misomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2MIsoMessages = vars.getObject(&quot;P2MIsoMessages&quot;);

// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

// Pacs 008 Inbound
Document document = P2MIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID}&quot;), eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message = &quot;P2M Inbound Pacs.008 document details: \n&quot;;
mode =&quot;Pacs 008 Mode is: &quot;+ document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status =&quot;Pacs 008 Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Pacs 008 Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;
paymentFlowStage = &quot;Pacs 008 Payment Flow Stage is: &quot;+document.get(&quot;paymentFlowStage&quot;).toString()+&quot;\n\n&quot;;

Thread. sleep(10000);

// Pacs 002 Inbound
Document document2 = P2MIsoMessages.find(and(eq(&quot;refP2mIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();
message2 = &quot;P2M Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message+mode+status+stage+paymentFlowStage+message2+mode2+state2+status2+stage2;
//return message1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-854649494">P2M Inbound Pacs.008 document details: 
Pacs 008 Mode is: inbound
Pacs 008 Status is: Failure
Pacs 008 Stage is: Completed
Pacs 008 Payment Flow Stage is: PaymentDeclined

P2M Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: RJCT
Pacs 002 Status is: Failure
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BulkPayment Outward - SBP_FAILED" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - Batch ID" enabled="true">
          <stringProp name="variableName">batchID</stringProp>
          <stringProp name="outputFormat">C9TESTBANKLTD|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID1" enabled="true">
          <stringProp name="variableName">instructionID1</stringProp>
          <stringProp name="outputFormat">CDC28007|170003681</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - instructionID2" enabled="true">
          <stringProp name="variableName">instructionID2</stringProp>
          <stringProp name="outputFormat">CDC28007|170003671</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="maximumValue">9</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - tracereference" enabled="true">
          <stringProp name="variableName">traceref</stringProp>
          <stringProp name="outputFormat">CRPL-TBank|Batch-00000</stringProp>
          <stringProp name="minimumValue">00000</stringProp>
          <stringProp name="maximumValue">99999</stringProp>
          <stringProp name="randomSeed">${__time()}</stringProp>
          <boolProp name="perThread">false</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="DB Connections" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*



import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;



import com.mongodb.MongoCredential;



import org.bson.Document;



import java.util.Arrays;




try
{



MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);

MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));


//Connection to &apos;instructions&apos;
MongoCollection&lt;Document&gt; Instructions = database.getCollection(vars.get(&quot;Instructions&quot;));
vars.putObject(&quot;Instructions&quot;, Instructions);

//Connection to &apos;outboundtransactions&apos;
MongoCollection&lt;Document&gt; OutboundTransactions = database.getCollection(vars.get(&quot;OutboundTransactions&quot;));
vars.putObject(&quot;OutboundTransactions&quot;, OutboundTransactions);

//Connection to &apos;isomessages&apos;
MongoCollection&lt;Document&gt; IsoMessages = database.getCollection(vars.get(&quot;IsoMessages&quot;));
vars.putObject(&quot;IsoMessages&quot;, IsoMessages);

//Connection to &apos;lftrequestqueues&apos;
MongoCollection&lt;Document&gt; LftRequestQueues = database.getCollection(vars.get(&quot;LftRequestQueues&quot;));
vars.putObject(&quot;LftRequestQueues&quot;, LftRequestQueues);

//Connection to &apos;lftresponsequeues&apos;
MongoCollection&lt;Document&gt; LftResponseQueues = database.getCollection(vars.get(&quot;LftResponseQueues&quot;));
vars.putObject(&quot;LftResponseQueues&quot;, LftResponseQueues);

//Connection to &apos;outboundtransactiondetails&apos;
MongoCollection&lt;Document&gt; OutboundTransactionDetails = database.getCollection(vars.get(&quot;OutboundTransactionDetails&quot;));
vars.putObject(&quot;OutboundTransactionDetails&quot;, OutboundTransactionDetails);

//return &quot;Connected to &quot; + vars.get(&quot;collectionInstructions&quot;);
return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Pre-Validation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;cdtrBank&quot;: &quot;UNILPKKARTG&quot;,&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2022-03-21T00:00:00.000Z&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;5759863088690&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK24HABB0000577900821401&quot;,&#xd;
                &quot;name&quot;: &quot;HZIUZIZA&lt;AZSRWZ&quot;&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/validate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">msgID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode1= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find().last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of outboundtransactions
outboundtransID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outboundtransID&quot;, outboundtransID);

Thread. sleep(1000)
//return status1+stage;
return mode1+status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1771563262">Mode is: outbound
Status is: Initiated
Stage is: VAL_ACCEPT
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(40000);

Thread. sleep(40000);

MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);

// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);

Document document = Instructions.find(and(eq(&quot;_id&quot;,outboundtransID),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2107612606">Mode is: outbound
Status is: Failure
Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-427853138">Status is: Failure
Stage is: VAL_FAILURE
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status validation reply (VAL_REPLY)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchInitiator&quot;: &quot;ALFHPKKA&quot;,&#xd;
    &quot;batchId&quot;: &quot;CRPL-${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;09-JUN-22&quot;,&#xd;
    &quot;instructions&quot;: [&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/instructions/validate/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">20201105Req1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;status&quot;))).last();
//Document document = OutboundTransactions.find(eq(&quot;type&quot;,&quot;status&quot;)).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1875437325">Mode is: inbound
Status is: Success
Stage is: VAL_REPLY</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="instructions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);
MongoCollection&lt;Document&gt; Instructions = vars.getObject(&quot;Instructions&quot;);


// getting the obj id of outboundtransactions
def outboundtransID = vars.getObject(&quot;outboundtransID&quot;);

//Document document = Instructions.find(and(eq(&quot;_id&quot;,outboundtransID),eq(&quot;type&quot;,&quot;status&quot;))).last();
Document document = Instructions.find(and(eq(&quot;_id&quot;,outboundtransID),eq(&quot;type&quot;,&quot;validate&quot;))).sort({createdAt:-1}).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-345082168">Mode is: outbound
Status is: Failure
Stage is: Completed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BP Outward Payment" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;batchId&quot;: &quot;${batchID}&quot;,&#xd;
    &quot;valueDate&quot;: &quot;2021-07-13T00:00:00.000Z&quot;,&#xd;
    &quot;nbOfTxs&quot;: &quot;2&quot;,&#xd;
    &quot;amount&quot;: {&#xd;
        &quot;currency&quot;: &quot;PKR&quot;,&#xd;
        &quot;value&quot;: &quot;2.93&quot;&#xd;
    },&#xd;
    &quot;instructions&quot;: [&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.03&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID1}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4210154878570&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
                &quot;name&quot;: &quot;MOBINA SAEED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-17&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;amount&quot;: {&#xd;
                &quot;currency&quot;: &quot;PKR&quot;,&#xd;
                &quot;value&quot;: &quot;1.9&quot;&#xd;
            },&#xd;
            &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
            &quot;instructionId&quot;: &quot;${instructionID2}&quot;,&#xd;
            &quot;creditor&quot;: {&#xd;
                &quot;identification&quot;: {&#xd;
                    &quot;type&quot;: &quot;CNIC&quot;,&#xd;
                    &quot;value&quot;: &quot;4220189247021&quot;&#xd;
                },&#xd;
                &quot;iban&quot;: &quot;PK72HABB0005997900537503&quot;,&#xd;
                &quot;name&quot;: &quot;ZAFAR AHMED&quot;&#xd;
            },&#xd;
            &quot;cdtrBank&quot;: &quot;SCBLPKKX&quot;,&#xd;
            &quot;debtor&quot;: {&#xd;
                &quot;iban&quot;: &quot;PK86HABB0000207900584503&quot;,&#xd;
                &quot;name&quot;: &quot;SKY PVT LIMITED&quot;&#xd;
            },&#xd;
            &quot;instrForCdtrBank&quot;: &quot;Dividend&quot;,&#xd;
            &quot;rmtInf&quot;: &quot;CD-DCR-D-18&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">localhost</stringProp>
            <stringProp name="HTTPSampler.port">3001</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/payment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Request-ID</stringProp>
                  <stringProp name="Header.value">ZA5EW2AKB</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">sender-participant-code</stringProp>
                  <stringProp name="Header.value">CGAPKKAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">receiver-participant-code</stringProp>
                  <stringProp name="Header.value">HABBPKPK</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Sender-User-Code</stringProp>
                  <stringProp name="Header.value">CGAPKKAASNRT</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA; connect.sid=s%3AHqcb5T-1adB2bPCMARPvBbjI_aioMg2R.e0AanRGtiKvV9RkXWHTiMiKrGblkO6tZeFFzWtGCcAA</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-channel-id</stringProp>
                  <stringProp name="Header.value">CRPL</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - BatchID" enabled="false">
              <stringProp name="variableName">batchID</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">999999999</stringProp>
              <stringProp name="randomSeed">${__time()}</stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id of type payment
paymentID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;paymentID&quot;, paymentID);

return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="502516385">Mode is: outbound
Status is: Initiated
Stage is: PAY_ACCEPT</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

return status;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-100343443">Status is: Initiated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

//Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
Document document = LftRequestQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-946115632">Status is: Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Thread. sleep(20000);
Document document = LftResponseQueues.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-946115632">Status is: Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactionDetails.find(eq(&quot;outboundTransactionId&quot;,paymentID)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

return status;
//return status1+stage1+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1380616844">Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage1 = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(20000);
Document document1 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage2 = &quot;Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

Thread. sleep(30000);
Document document2 = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage3 = &quot;Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Thread. sleep(20000);
//Document document1 = CbsRequestQueues.find().last();
//status2 = &quot;Status is: &quot;+document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000)
return stage1+stage2+stage3;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1831599089">Stage is: CBS_PROCESSED</stringProp>
                <stringProp name="-778302848">Stage is: PAYMENT_IN_PROCESS</stringProp>
                <stringProp name="-1738874451">Stage is: SBP_FAILED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

Document document = IsoMessages.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;))).last();
//Document document = IsoMessages.find(eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;)).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

//Get the object id
isoID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;isoID&quot;, isoID);


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1380616844">Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;batchId&quot;, &quot;CRPL-${batchID}&quot;),eq(&quot;type&quot;,&quot;payment&quot;))).last();
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1738874451">Stage is: SBP_FAILED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="isomessages" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(30000);

MongoCollection&lt;Document&gt; IsoMessages = vars.getObject(&quot;IsoMessages&quot;);

//Get the object id
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = IsoMessages.find(and(eq(&quot;refIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;))).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1380616844">Status is: Failure</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
//mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
//status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;

//Get the object id
outID = document.getObjectId(&quot;_id&quot;);

//Put it in a variable:
vars.putObject(&quot;outID&quot;, outID);

Thread. sleep(1000)
return stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1888389501">Stage is: RETURN_RECV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftrequestqueues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(10000);
MongoCollection&lt;Document&gt; LftRequestQueues = vars.getObject(&quot;LftRequestQueues&quot;);

//Get the object id
def outID = vars.getObject(&quot;outID&quot;);

Document document = LftRequestQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;type&quot;,&quot;reversal&quot;))).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(10000)
return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-946115632">Status is: Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lftresponsequeues" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(15000);
MongoCollection&lt;Document&gt; LftResponseQueues = vars.getObject(&quot;LftResponseQueues&quot;);

//Get the object id
def outID = vars.getObject(&quot;outID&quot;);

Document document = LftResponseQueues.find(and(eq(&quot;outboundTransactionId&quot;,outID),eq(&quot;type&quot;,&quot;reversal&quot;))).last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;


return status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-946115632">Status is: Processed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactiondetails" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactionDetails = vars.getObject(&quot;OutboundTransactionDetails&quot;);

Document document = OutboundTransactionDetails.find().last();
status = &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;

Thread. sleep(1000);
return status;

}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="600021253">Status is: Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="outboundtransactions" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; OutboundTransactions = vars.getObject(&quot;OutboundTransactions&quot;);

//Get the object id of type payment
def paymentID = vars.getObject(&quot;paymentID&quot;);

Document document = OutboundTransactions.find(and(eq(&quot;refOutboundTransactionId&quot;,paymentID),eq(&quot;type&quot;,&quot;return&quot;))).last();
mode= &quot;Mode is: &quot;+document.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status= &quot;Status is: &quot;+document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage = &quot;Stage is: &quot;+document.get(&quot;stage&quot;).toString()+&quot;\n&quot;;


Thread. sleep(1000)
return mode+status+stage;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1650924334">Mode is: inbound
Status is: Success
Stage is: CBS_REV_PROCESSED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Outward Flow - Success COUNTER" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">4</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
            <boolProp name="perThread">false</boolProp>
            <stringProp name="randomSeed">9695</stringProp>
            <stringProp name="variableName">traceReference4</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
            <stringProp name="CounterConfig.start">01</stringProp>
            <stringProp name="CounterConfig.end">100</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">msgID4</stringProp>
            <stringProp name="CounterConfig.format">C1LOCALTESTING00</stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable - msgID" enabled="true">
            <stringProp name="variableName">msgID4</stringProp>
            <stringProp name="outputFormat">C4LOCALTESTING0000</stringProp>
            <stringProp name="minimumValue">0000</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed">${__time()}</stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MongoConnection" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.*

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import com.mongodb.MongoCredential;

import org.bson.Document;

import java.util.Arrays;


try 
{

MongoClient mongoClient = MongoClients.create(&quot;mongodb://paymentcoreuser:p%40ssWord@${DBHost}:${DBPort}/?authSource=admin&amp;readPreference=primary&amp;appname=MongoDB%20Compass&amp;directConnection=true&amp;ssl=false&quot;);
MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));

//Connection to &apos;p2phostresponselogs&apos;
MongoCollection&lt;Document&gt; P2PHostResponselogs = database.getCollection(vars.get(&quot;P2PHostResponselogs&quot;));
vars.putObject(&quot;P2PHostResponselogs&quot;, P2PHostResponselogs);

//Connection to &apos;p2pisomessages&apos;
MongoCollection&lt;Document&gt; P2PIsoMessages = database.getCollection(vars.get(&quot;P2PIsoMessages&quot;));
vars.putObject(&quot;P2PIsoMessages&quot;, P2PIsoMessages);

//Connection to &apos;p2poutboundtransactions&apos;
MongoCollection&lt;Document&gt; P2POutboundTransactions = database.getCollection(vars.get(&quot;P2POutboundTransactions&quot;));
vars.putObject(&quot;P2POutboundTransactions&quot;, P2POutboundTransactions);

return &quot;Successfuly connected to Database!&quot;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="true">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Initiate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
   &quot;instruction&quot;: {&#xd;
      &quot;instructionId&quot;: &quot;ZbwuKJN75kGogD1Tt8&quot;,&#xd;
      &quot;amount&quot;: {&#xd;
         &quot;currency&quot;: &quot;PKR&quot;,&#xd;
         &quot;value&quot;: &quot;10.0&quot;&#xd;
      },&#xd;
      &quot;purposeCode&quot;: &quot;033&quot;,&#xd;
      &quot;creditor&quot;: {&#xd;
         &quot;iban&quot;: &quot;PK36SCBL0000001123456702&quot;,&#xd;
         &quot;name&quot;:&quot;MOBINA SAEED&quot;,&#xd;
         &quot;accountType&quot;: &quot;W&quot;&#xd;
      },&#xd;
      &quot;cdtrBank&quot;: &quot;SCBLPKKA&quot;,&#xd;
      &quot;debtor&quot;: {&#xd;
         &quot;iban&quot;: &quot;PK32HABB0000477948641001&quot;,&#xd;
         &quot;name&quot;: &quot;MUHAMMAD RIZWAN&quot;,&#xd;
         &quot;accountType&quot;: &quot;A&quot;&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/sbpmpg/instructions/p2ppayment</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-req-id</stringProp>
                      <stringProp name="Header.value">${msgID4}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-channel-id</stringProp>
                      <stringProp name="Header.value">MB</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJTTVBHIn0.zq7NXyeK54</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID4}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


return message1+msgid1+mode1+status1+stage1;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-100922435">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID4}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Initiated
Pacs 008 Stage is: InProgress</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2phostresponselogs" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PHostResponselogs = vars.getObject(&quot;P2PHostResponselogs&quot;);


// Getting the object id of P2Pisomessages
def isoID = vars.getObject(&quot;isoID&quot;);

Document document = P2PHostResponselogs.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;Payment&quot;))).last();
type =&quot;Type is: &quot;+document.get(&quot;type&quot;).toString()+&quot;\n&quot;;
msgID =&quot;Msg Id is: &quot;+document.get(&quot;msgId&quot;).toString()+&quot;\n&quot;;
procsby =&quot;Processed By is: &quot;+document.get(&quot;processedBy&quot;).toString()+&quot;\n&quot;;
status =&quot;Status is: &quot;+ document.get(&quot;status&quot;).toString()+&quot;\n&quot;;
	 
return type+msgID+procsby+status;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="737167170">Type is: Payment
Msg Id is: MB${msgID4}
Processed By is: CoreBanking
Status is: Success</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pacs.002" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;traceReference&quot;: &quot;${traceReference4}&quot;,&#xd;
    &quot;type&quot;: &quot;pacs.002.001.10&quot;,&#xd;
    &quot;document&quot;:&quot;&lt;DataPDU xmlns=\&quot;urn:cma:stp:xsd:stp.1.0 \&quot;&gt;&lt;Body&gt;&lt;AppHdr xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:head.001.001.01 \&quot;&gt;&lt;Fr&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/Fr&gt;&lt;To&gt;&lt;FIId&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/FIId&gt;&lt;/To&gt;&lt;BizMsgIdr&gt;1401827&lt;/BizMsgIdr&gt;&lt;MsgDefIdr&gt;pacs.002.001.10&lt;/MsgDefIdr&gt;&lt;BizSvc/&gt;&lt;CreDt&gt;2021-07-12T13:56:45Z&lt;/CreDt&gt;&lt;Prty/&gt;&lt;Sgntr&gt;___SGNTR___&lt;/Sgntr&gt;&lt;/AppHdr&gt;&lt;Document xmlns=\&quot;urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10 \&quot;&gt;&lt;FIToFIPmtStsRpt&gt;&lt;GrpHdr&gt;&lt;MsgId&gt;MB${msgID4}/002&lt;/MsgId&gt;&lt;CreDtTm&gt;2021-11-23T16:56:35.214Z&lt;/CreDtTm&gt;&lt;/GrpHdr&gt;&lt;OrgnlGrpInfAndSts&gt;&lt;OrgnlMsgId&gt;MB${msgID4}&lt;/OrgnlMsgId&gt;&lt;OrgnlMsgNmId&gt;pacs.008.001.08&lt;/OrgnlMsgNmId&gt;&lt;OrgnlCreDtTm&gt;2021-07-12T13:56:35.214Z&lt;/OrgnlCreDtTm&gt;&lt;GrpSts&gt;ACSP&lt;/GrpSts&gt;&lt;/OrgnlGrpInfAndSts&gt;&lt;TxInfAndSts&gt;&lt;StsId&gt;M178992544/002&lt;/StsId&gt;&lt;OrgnlInstrId&gt;MB${msgID}&lt;/OrgnlInstrId&gt;&lt;OrgnlEndToEndId&gt;MB${msgID}&lt;/OrgnlEndToEndId&gt;&lt;OrgnlTxId&gt;MB${msgID4}&lt;/OrgnlTxId&gt;&lt;TxSts&gt;ACSP&lt;/TxSts&gt;&lt;AcctSvcrRef&gt;276&lt;/AcctSvcrRef&gt;&lt;InstgAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;SBPPPKKAIPS&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstgAgt&gt;&lt;InstdAgt&gt;&lt;FinInstnId&gt;&lt;ClrSysMmbId&gt;&lt;MmbId&gt;HABBPKKARTG&lt;/MmbId&gt;&lt;/ClrSysMmbId&gt;&lt;/FinInstnId&gt;&lt;/InstdAgt&gt;&lt;OrgnlTxRef&gt;&lt;IntrBkSttlmAmt Ccy=\&quot;PKR \&quot;&gt;111.&lt;/IntrBkSttlmAmt&gt;&lt;IntrBkSttlmDt&gt;2021-07-12&lt;/IntrBkSttlmDt&gt;&lt;PmtTpInf&gt;&lt;ClrChanl&gt;RTNS&lt;/ClrChanl&gt;&lt;SvcLvl&gt;&lt;Prtry&gt;0100&lt;/Prtry&gt;&lt;/SvcLvl&gt;&lt;LclInstrm&gt;&lt;Prtry&gt;CTAA&lt;/Prtry&gt;&lt;/LclInstrm&gt;&lt;CtgyPurp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/CtgyPurp&gt;&lt;/PmtTpInf&gt;&lt;Purp&gt;&lt;Prtry&gt;033&lt;/Prtry&gt;&lt;/Purp&gt;&lt;/OrgnlTxRef&gt;&lt;/TxInfAndSts&gt;&lt;/FIToFIPmtStsRpt&gt;&lt;/Document&gt;&lt;/Body&gt;&lt;/DataPDU&gt;&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">3001</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/p2p/iso/pacs/002</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (traceReference)" enabled="true">
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="outputFormat">ba53eeeee3a711ebadd67f0000</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <stringProp name="variableName">traceReference</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (msgID)" enabled="false">
                  <stringProp name="variableName">msgID</stringProp>
                  <stringProp name="outputFormat">JSBLPKKA9087450000</stringProp>
                  <stringProp name="minimumValue">0000</stringProp>
                  <stringProp name="maximumValue">9999</stringProp>
                  <stringProp name="randomSeed">9695</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable (MsgId - 002)" enabled="false">
                  <stringProp name="variableName">MsgId</stringProp>
                  <stringProp name="outputFormat">M1789930/002</stringProp>
                  <stringProp name="minimumValue">002</stringProp>
                  <stringProp name="maximumValue">999</stringProp>
                  <stringProp name="randomSeed">006</stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">keep-alive</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay">3000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="p2pisomessages" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;



import org.bson.Document;
import org.bson.types.ObjectId;



try {

Thread. sleep(1000);

MongoCollection&lt;Document&gt; P2PIsoMessages = vars.getObject(&quot;P2PIsoMessages&quot;);

// Pacs 008 Inbound
Document document1 = P2PIsoMessages.find(and(eq(&quot;msgID&quot;,&quot;${msgID4}&quot;),eq(&quot;type&quot;,&quot;pacs.008.001.08&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).sort({createdAt:-1}).last();
message1 = &quot;P2P Outbound Pacs.008 document details: \n&quot;;
msgid1 =&quot;Pacs 008 MsgID is: &quot;+ document1.get(&quot;msgID&quot;).toString()+&quot;\n&quot;;
mode1 =&quot;Pacs 008 Mode is: &quot;+ document1.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
status1 =&quot;Pacs 008 Status is: &quot;+ document1.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage1 = &quot;Pacs 008 Stage is: &quot;+document1.get(&quot;stage&quot;).toString()+&quot;\n\n&quot;;


// Getting PACS 008 Object ID to compare it with refP2pIsoMessageId:
isoID = document1.getObjectId(&quot;_id&quot;);		//get object id
vars.putObject(&quot;isoID&quot;, isoID);			//Put it in a variable


// Pacs 002 Outbound
//Document document2 = P2PIsoMessages.find(and(eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;outbound&quot;))).last();
Document document2 = P2PIsoMessages.find(and(eq(&quot;refP2pIsoMessageId&quot;,isoID),eq(&quot;type&quot;,&quot;pacs.002.001.10&quot;),eq(&quot;mode&quot;,&quot;inbound&quot;))).last();

message2 = &quot;P2P Inbound Pacs.002 document details: \n&quot;;	
mode2 =&quot;Pacs 002 Mode is: &quot;+ document2.get(&quot;mode&quot;).toString()+&quot;\n&quot;;
state2 =&quot;Pacs 002 State is: &quot;+ document2.get(&quot;state&quot;).toString()+&quot;\n&quot;;
status2 =&quot;Pacs 002 Status is: &quot;+ document2.get(&quot;status&quot;).toString()+&quot;\n&quot;;
stage2 = &quot;Pacs 002 Stage is: &quot;+document2.get(&quot;stage&quot;).toString()+&quot;\n\n\n&quot;;
	 
return message1+msgid1+mode1+status1+stage1+message2+mode2+state2+status2+stage2;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1453500777">P2P Outbound Pacs.008 document details: 
Pacs 008 MsgID is: MB${msgID4}
Pacs 008 Mode is: outbound
Pacs 008 Status is: Success
Pacs 008 Stage is: Completed

P2P Inbound Pacs.002 document details: 
Pacs 002 Mode is: inbound
Pacs 002 State is: ACSP
Pacs 002 Status is: Success
Pacs 002 Stage is: Completed
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
